<!DOCTYPE html>
<html>

<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <title>Matrix Manipulations</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    Matrix Manipulations
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<p>[<a href="io.htm">Previous Chapter</a>] [<a href="gridman.htm">Next
  Chapter</a>] [<a href="index.htm">Table of Contents</a>]</p>
  <ul>
    <li>
      <a href="#Representing_Matrices">Representing Matrices</a>
      <ul>
        <li><a href="#Identity_Matrix">Identity Matrix</a></li>
      </ul>
    </li>
    <li><a href="#Basic_Matrix_Operations">Basic Matrix Operations</a></li>
    <li><a href="#Higher-Dimensional_Matrices">Higher-Dimensional
    Matrices</a></li>
    <li><a href="#BuiltInFunctions">Built-in Functions</a></li>
  </ul>

<p>Although it might be assumed that a vector language is ill suited for
  matrix manipulations, matrix operations in SVL are in fact relatively
  straightforward. This is because in SVL, a matrix is merely a vector with
  vector elements. In this chapter, we will discuss primarily 2-D matrices,
  with a short discussion at the end of how to extend to higher dimensions.</p>

<h1>
<a id="Representing_Matrices">Representing
  Matrices</a></h1>

<p>In SVL, a 2-D matrix:</p>

<pre>
    a b c d
    e f g h
    i j k l
</pre>

<p>is best represented as a vector of <i>rows</i>:</p>

<pre>
    M = [ [a,b,c,d],
          [e,f,g,h],
          [i,j,k,l] ];
</pre>

<p>In this way, <tt>M</tt>, an <i>r</i> x <i>c</i> matrix, has <i>r</i>
  (number of rows) elements, each of which is of length <i>c</i>, the number of
  columns. Row <tt>i</tt> can then be extracted from the matrix using
  <tt>M(i)</tt>.</p>

<p>A column <tt>j</tt> can easily be extracted from <tt>M</tt> by flipping
  the matrix into a column-wise representation using the transpose operator
  <tt>tr</tt>; this is effectively accomplished using <tt>apt</tt>, as
  follows:</p>

<pre>
    apt peek [M,1]
</pre>

<p>To extract a single element from <tt>M</tt>, use double indexing:
  <tt>M(i)(j)</tt>. retrieves the <tt>j</tt>th column of the <tt>i</tt>th row
  from a row-wise matrix.</p>

<h2><a id="Identity_Matrix">Identity Matrix</a></h2>

<p>The identity matrix of dimension <tt>n</tt> is generated by the following
  line of code:</p>

<pre>
    I = igen n == [igen n];
</pre>

<p>Here, <tt>I</tt> is in both row-wise and column-wise representation (since
  <tt>I</tt> is symmetric).</p>

<p>A matrix of all zeroes can be generated from <tt>I</tt> with:</p>

<pre>
    zero I;
</pre>

<p>as can, similarly, a matrix of all ones with:</p>

<pre>
    one I;
</pre>

<p>These can also be generated using <tt>rep</tt>, for instance, for a matrix
  of zeroes:</p>

<pre>
    Z = rep [ rep[0,n], n ];
</pre>

<h1><a id="Basic_Matrix_Operations">Basic
  Matrix Operations</a></h1>

<p>Matrices can be added and subtracted in the same way vectors can. For
  instance, to add matrices <tt>A</tt> and <tt>B</tt>, use</p>

<pre>
    A + B
</pre>

<p>Multiplication by a vector (a one-dimensional matrix) and by a matrix are
  achieved with identical lines of code. In the following, for matrix-matrix
  multiplication, both matrices <tt>M</tt> and <tt>m</tt> are represented
  row-wise, and the operation returns a row-wise matrix. As always, the number
  of columns in <tt>M</tt> and the number of rows in <tt>m</tt> must match.</p>

<pre>
    Mm = app add (M * [m]);
</pre>

<p>For matrix-vector multiplication,:</p>

<pre>
    Mv = app add (M * [v]);
</pre>

<p>and the length of <tt>v</tt> must equal the number of columns in
  <tt>M</tt>. <tt>v</tt> must be given as an <i>n</i> 1 <i>column</i> vector in
  row-wise representation, i.e. as <tt>[</tt><i>v</i><sub>1</sub>,
  <i>v</i><sub>2</sub>, ... , <i>v</i><sub>n</sub><tt>]</tt>. The returned
  value is a <i>k</i> 1 vector, where k is the number of rows in
  <tt>M</tt>.</p>

<p>Vector-matrix (<tt>v*M</tt>) multiplication requires that the multiplying
  vector be a 1 n <i>row</i> vector in given row-wise representation, i.e.
  <tt>[</tt> <tt>[</tt><i>v</i><sub>1</sub>, <i>v</i><sub>2</sub>, ... ,
  <i>v</i><sub>n</sub><tt>] ]</tt>, in which case</p>

<pre>
    vM = app add (v * [M]);
</pre>

<p>Note that the return value is a 1 <i>k</i> vector, where <i>k</i> is the
  number of columns in <tt>M</tt>.</p>

<p>For a <i>column</i> vector <tt>v</tt>, vector-matrix multiplication can
  also be achieved, without first transposing <tt>v</tt> into a row vector,
  with the following:</p>

<pre>
    vM = add (v * M)
</pre>

<p>This returns a <i>column</i> vector. Vector-vector multiplication (inner
  product) can be calculated with the following:</p>

<pre>
    viw = add (v * w)
</pre>

<p>In each of these, the vectors must be column vectors, i.e. of the form
  <tt>[</tt><i>v</i><sub>1</sub>, <i>v</i><sub>2</sub>, ... ,
  <i>v</i><sub>n</sub><tt>]</tt>.</p>

<p>The outer product of vectors is accomplished using (for column vectors
  <tt>v</tt> and <tt>w</tt>):</p>

<pre>
    vow = v * [w]
</pre>

<p>which is equivalent to <tt>v * tr w</tt>.</p>

<p>The vector cross product for 3 vectors can be calculated as (for column
  vectors <tt>v</tt> and <tt>w</tt>):</p>

<pre>
    vxw = rotl v * rotr w - rotr v * rotl w ;
</pre>

<p>This is the operation performed by the built-in function
  <tt>rot3d_vCross</tt>.</p>

<p>Matrix transposition is achieved with the <tt>tr</tt> operator, which
  turns rows into columns and columns into rows.</p>

<pre>
    svl&gt; M = [ [1,2,3], [4,5,6] ]
    svl&gt; tr M
    [ [1,4], [2,5], [3,6] ]
</pre>

<p><b>Caution!</b> Attempting large matrix multiplications may cause your
  system to slow significantly.</p>

<h1><a id="Higher-Dimensional_Matrices">Higher-Dimensional Matrices</a></h1>

<p>Representation of higher-dimensional matrices can be accomplished in the
  same way as for 2-D matrices, with an additional level of nesting. For
  instance, a 3-D matrix could be manipulated as a vector of 2-D matrices,
  thus:</p>

<pre>
    M3D = [ M1, M2, M3 ]
</pre>

<p>where each of the <tt>M</tt>_i is a 2-D matrix.</p>

<p>Extending from the 2-D case, extracting the 2-D matrix <tt>Mi</tt> from
  <tt>M3D,</tt> is done with <tt>M3D(i)</tt>. Extracting row <tt>j</tt> of
  <tt>Mi</tt> is done with <tt>M3D(i)(j)</tt>, and extracting the element in
  column <tt>k</tt>, with <tt>M3D(i)(j)(k)</tt>.</p>

<p>Addition and subtraction are performed in the same manner as in the 2-D
  case.</p>

<h1><a id="BuiltInFunctions">Built-in
  Functions</a></h1>

<p>Several predefined functions are available for routine <a href=
  "../fcnref/matlib.htm">matrix operations</a>, which include <tt>matid</tt>
  and <tt>matmul</tt>, which can improve source code readability, as well as
  advanced operations such as diagonalization and inversion.</p>

<p>Next: <a href="gridman.htm">Multidimensional Grids and Isosurfaces</a></p>

<p><a href="../../fcnindex.htm">Function Index</a></p>
  <!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
<a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

