<!DOCTYPE html>
<html>

<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <title>Advanced SVL Topics</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    Advanced SVL Topics
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<p>[<a href="gridman.htm">Previous Chapter</a>] [<a href="index.htm">Table of
  Contents</a>]</p>
<ul>
  <li>
    <a href=
    "#Functions_with_Fewer_than_Specified_Number_of_Arguments">Functions with
    Fewer than Specified Number of Arguments</a>
    <ul>
      <li><a href="#Binary_Operators_with_Null_or_Unit_Arguments">Binary
      Operators with Null or Unit Arguments</a></li>
    </ul>
  </li>
  <li><a href="#Tasks">Tasks</a></li>
  <li>
    <a href="#Performance_Issues">Performance Issues</a>
    <ul>
      <li><a href="#Integer_Arithmetic">Integer Arithmetic</a></li>
      <li><a href="#Cost_of_Function_Calls">Cost of Function Calls</a></li>
      <li><a href="#Memory_Allocation_and_Performance">Memory Allocation and
      Performance</a></li>
      <li><a href="#Code_Speed-Ups">Code Speed-Ups</a></li>
    </ul>
  </li>
</ul>

<h1>
<a id="Functions_with_Fewer_than_Specified_Number_of_Arguments">Functions with
  Fewer than Specified Number of Arguments</a></h1>

<p>When functions are called with fewer than the number of expected
  arguments, the shortfall is made up with nulls. In some cases, null arguments
  make perfect sense; in other cases, such as with <tt>div</tt> or
  <tt>get</tt>, they generate errors. Many functions merely return null when
  presented with a null argument.</p>

<h2><a id="Binary_Operators_with_Null_or_Unit_Arguments">Binary Operators with Null or
  Unit Arguments</a></h2>

<p>Reduction is not well defined for unit or null arguments. Some binary
  operators cannot be called with fewer than two arguments. Others may behave
  quite sensibly. Consider, for instance, the arithmetic operations
  <tt>add</tt> and <tt>mul</tt>. By definition, <tt>add v</tt> computes:</p>

<img src="adv/Image86.gif" class="center" />

<p>When <tt>v</tt> is <tt>null</tt>, the sum sums to the additive identity,
  0. Similarly, we have for <tt>mul</tt>,</p>

<img src="adv/Image87.gif" class="center" />

<p><tt>andE</tt> is another example of well-defined behavior. The following
  is necessarily true:</p>

<pre class="code">
(andE cat [a,b]) === (andE a and andE b)
</pre>

<p>If <tt>b</tt> is null, then <tt>andE b</tt> must evaluate to <tt>1</tt>,
  which determines the behavior of <tt>andE</tt> with a null argument. Similar
  reasoning may be applied to <tt>orE</tt>.</p>

<h1><a id="Tasks">Tasks</a></h1>

<p>SVL tasks can be created for executing individual functions and scripts,
  or for evaluating expressions. Tasks can also be created using forking
  routines. Task forking is needed, for example, when implementing monitoring
  routines or when running a task that must not fail but is required to perform
  operations that might.</p>

<p>Tasks have associated environment variables which may be queried and
  set.</p>

<h1><a id="Performance_Issues">Performance
  Issues</a></h1>

<h3><a id="Integer_Arithmetic">Integer
  Arithmetic</a></h3>

<p>Integer arithmetic (<tt>iadd</tt>, <tt>isub</tt>, <tt>imul</tt>) should
  only be used when space and memory are at a premium, and when the data are
  known to be integer (for instance, when the data are vector indices).
  Floating point arguments will be rounded before calculations are done. There
  is no integer divide.</p>

<p>For more on numbers, see <a href="svlfund.htm">Numeric Data</a>.</p>

<h3><a id="Cost_of_Function_Calls">Cost of
  Function Calls</a></h3>

<p>Each function call has a significant overhead associated with it, in
  addition to its computing time. Thus, when the vectors to be manipulated are
  relatively short in length, it is the calling overhead which dominates the
  running time, whereas when the vectors are long, it is the actual computing
  time which dominates. So, if your vectors are short, it is particularly
  important to minimize the number of function calls so as to minimize the
  overhead. However, keeping the number of calls to a minimum is generally a
  good rule of thumb no matter what the length of the vector.</p>

<h3><a id="Memory_Allocation_and_Performance">Memory Allocation and
  Performance</a></h3>

<p>Memory considerations become significant when handling large amounts of
  data. However, the limitations of memory capacity can be felt even when not
  manipulating long vectors. In general, memory requirements scale
  proportionally with the amount of parallelization achieved. This is because
  parallel processing distributes work over memory so that the product of the
  parallel running time and the amount of memory consumed are equal to the work
  complexity (sequential runtime). There is thus a tradeoff between speed and
  memory. This suggests that unless you have a very large amount of memory
  indeed, you should not try to turn an <tt>0(n<sup>3</sup>)</tt>algorithm into
  one that is <tt>0(LOG n)</tt>.</p>

<p>When vectors are so large that computational memory requirements exceed
  the capacity of the machine on which the computations are being run, one-line
  computations must be divided up over several lines of code. For example, in
  matrix multiplication, a loop could be used to step through each column or
  row of one of the matrices. Although in this manual we have frequently
  admonished against using loops for stepping through data in precisely this
  manner, this is an example of a case in which the use of a loop is
  justified.</p>

<pre class="code">
for i = 1, length m1 loop
    m(i) = add ( m1(i) * m2 );
endloop
</pre>

<p>This computation requires a chunk of memory whose size is the dimension of
  <tt>m1(i)</tt> times the dimensions of <tt>m2</tt>.</p>

<p>In SVL, for purposes of thrift, memory allocation is delayed until
  absolutely necessary (this optimization has not yet been fully implemented);
  for example, copying a vector does not perform any allocation. Thus,</p>

<pre class="code">
  a = igen 20;
  b = a;
</pre>

<p>results in both <tt>a</tt> and <tt>b</tt> pointing to the same location.
  As soon as any modification is done on a vector that is pointed to by more
  than one variable, new memory is allocated. (Although for now, some
  allocations are still performed even when memory is uniquely associated with
  one variable.)</p>

<p><b>Note:</b> This only applies to local vectors. Global vectors are always
  copied before modification.</p>

<h3><a id="Code_Speed-Ups">Code Speed-Ups</a></h3>

<p>Here are some rules of thumb to use when coding in SVL for speed:</p>
<ul>
  <li>Use <tt>loop</tt> constructs when the complexity of calculation or of
  memory use warrants it. Otherwise use <tt>app</tt> or <tt>apt</tt>.</li>
  <li><tt>app</tt> and <tt>apt</tt> are faster than <tt>loop</tt>, but still
  costly; keep use of these to a minimum.</li>
  <li><tt>tr</tt> is a costly operation. In general, one use of <tt>tr</tt>
  leads to another. If too many <tt>tr</tt> calls abound, you may be using an
  inefficient vector structure in your calculations. Note that <tt>tr</tt> is
  part of the <tt>apt</tt> operation.</li>
  <li>It is faster to operate on flat vectors. In other words, avoid deeply
  nested vectors.</li>
  <li>It is faster to operate on long vectors. However, extremely long
  vectors may be more efficient if processed in a loop in chunks.</li>
</ul>

<p><a href="../../fcnindex.htm">Function Index</a></p>
  <!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
<a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

