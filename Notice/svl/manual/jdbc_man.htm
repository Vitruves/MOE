<!DOCTYPE html>
<html>

<!--
!!    MOE On-Line Manuals
!!    COPYRIGHT (C) CHEMICAL COMPUTING GROUP ULC.  ALL RIGHTS RESERVED.
!!-->
<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <title>SVL Relational Database Access</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    SVL Relational Database Access
  </div>
<!-- END MOE_HEADER -->
<div class="content">
  <ul>
    <li><a href="#Overview">Overview</a></li>
    <li>
      <a href="#JDBC">Using SVL Relational Database Functions</a>
      <ul>
        <li><a href="#OpenConnection">Opening a Connection to a Database
        Server</a></li>
        <li><a href="#CreateTable">Creating a New Table</a></li>
        <li><a href="#WritingData">Writing Data to a Table</a></li>
        <li><a href="#ReadingData">Reading Data from a Table</a></li>
      </ul>
    </li>
    <li><a href="#SVL">SVL Commands</a></li>
  </ul>

<h1>
<a id="Overview">Overview</a></h1>

<p>The SVL relational database functions provide both access to a wide
  variety of relational databases and compatibility with a wide variety of
  database servers. In these functions, the language of communication with the
  relational databases is SQL (<dfn>Structured Query Language</dfn> for use
  with JDBC). The connections to databases are made using JDBC (<dfn>Java
  Database Connectivity</dfn>). In the current distribution, the functions have
  been tested with the following database products: IBM DB2, Oracle, Microsoft
  SQL Server, and MySQL databases.</p>

<p>SQL, a common standard for interfacing with relational databases, is the
  most popular <i>set processing</i> language for relational databases. JDBC is
  a driver-based Java application programming interface supported by a large
  number of database applications. The relational database functions
  transparently make the appropriate JDBC calls to open, read from, and write
  to databases, without the user having to write any Java code.</p>

<p>To use the relational database functions, you must have Java (i.e. a Java
  Virtual Machine) installed. For complete installation instructions for the
  JVM and JDBC Drivers refer to <a href="../../install/install.htm">Installing
  and Running MOE</a>.</p>

<h1><a id="JDBC">Using SVL Relational Database Functions</a></h1>

<p>This section presents sample SVL code illustrating the usage of some of
  the SVL relational database functions. For detailed information on each
  <tt>jdbc_XXX</tt> function, please refer to the function reference page
  <a href="../fcnref/jdbc_fcn.htm">Relational Database Functions</a>.</p>

<p>The code samples provided below illustrate how to establish a connection
  to a database server and create a new table on that database server. Sample
  code is also provided to demonstrate how information can be read from the MOE
  database <tt>$MOE/sample/mol/mref.mdb</tt> and copied to the table. A final
  example shows how to read back the information from the newly created
  table.</p>

<p><i>Note:</i> Currently, Microsoft SQL is the only driver that supports
  <tt>jdbc_append</tt> exactly as it is used here. It is expected that all
  drivers will support this usage in the near future. For those drivers that
  currently do not, <tt>jdbc_execute</tt> can replicate the behavior if passed
  the appropriate <tt>SQL</tt> query string. <a id="OpenConnection"></a>
</p>

<h2>Opening a Connection to a Database Server</h2>

<p>In this example, the variable <tt>server</tt> is a parameter specifying
  the database server. The form of the <tt>url</tt> and <tt>driver</tt>
  arguments is JDBC-specific, and is provided in the JDBC driver
  documentation.</p>

<pre>
    local url, driver, usr, password, server = 'Oracle';

    if server == 'Oracle' then
        url      = 'jdbc:oracle:thin:@oracle1:1521:o8iserv';
        driver   = 'oracle.jdbc.driver.OracleDriver';
        usr      = 'system';
        password = 'okphcagjmggdbpagemakmgobfeeflgchgeekoanbmchana';

    elseif server == 'Postgres' then
        url      = 'jdbc:mysql://localhost:5432/ccg';
        driver   = 'org.postgresql.Driver';
        usr      = 'postgres';
        password = 'kllagbcajoejeggbjjadhmlaajmjgmklikdjliiclmaeoi';

    elseif server == 'MySQL' then
        url      = 'jdbc:mysql://localhost:3306/ccg'
		   '?useUnicode=yes&characterEncoding=UTF-8'
		   '&autoReconnect=true&serverTimezone=UTC';
        driver   = 'com.mysql.jdbc.Driver';
        usr      = 'root';
        password = 'kllagbcajoejeggbjjadhmlaajmjgmklikdjliiclmaeoi';

    elseif server == 'MSSQL' then
        url      = 'jdbc:sqlserver://vali:1433;DatabaseName=MSDB1;'
		   'trustServerCertificate=true;encrypt=true';
        driver   = 'com.microsoft.sqlserver.jdbc.SQLServerDriver';
        usr      = 'ccg';
        password = 'pipccpggkmaljjlcefaimjckpoffbjpddllfkiomgjpdkn';
    endif

    local ckey = jdbc_open [url, driver, usr, password];
    write ['Open Connection: {}\n', ckey];

        // Note: the jdbc_open call should be paired with a
        // jdbc_close ckey call.
</pre>

<a id="CreateTable"></a>
<h2>Creating a New Table</h2>

<p>The SVL function <tt>jdbc_execute</tt> is used to create a new table. For
  some SQL queries, <tt>jdbc_execute</tt> returns a key to a result set. With
  the <tt>CREATE TABLE</tt> query, however, no result set key is returned.</p>

<p>The following example illustrates the use of Microsoft SQL data types.</p>

<pre>
	// This example illustrates the use of Microsoft SQL data types.

        // If a table named &quot;mref&quot; already exists, destroy it.
        // &quot;ckey&quot; is the return value of jdbc_open.

    local sql = &quot;DROP TABLE IF EXISTS mref&quot;;
    local sql_ret = jdbc_execute [ckey, sql];

        // Create a table with fields NAME, MR_EXP, and MOL.

    sql = &quot;CREATE TABLE mref (NAME VARCHAR(100),MR_EXP FLOAT,MOL TEXT)&quot;;
    sql_ret = jdbc_execute [ckey, sql];
</pre>

<p>The following example illustrates the use of Oracle SQL data types.</p>

<pre>
	// This example illustrates the use of both Oracle and Microsoft
	// SQL data types.

        // If a table named &quot;mref&quot; already exists, destroy it.
        // &quot;ckey&quot; is the return value of jdbc_open.

    local sql = &quot;SELECT TABLE_NAME FROM USER_TABLES WHERE TABLE_NAME='MREF'&quot;;
    local sql_ret = jdbc_execute [ckey, sql];  
    sql = &quot;&quot;;

    while jdbc_next sql_ret loop
	ora_ret = jdbc_readfields [sql_ret, ORA_FIELDS];
	if notnull ora_ret and first ora_ret(1) === &quot;MREF&quot; then 
	    sql = &quot;DROP TABLE MREF&quot;;
	endif
    endloop

    if not (sql === &quot;&quot;) then
        sql_ret = jdbc_execute [ckey, sql];
    endif

        // Create a table with fields NAME, MR_EXP, and MOL.

    sql = &quot;CREATE TABLE mref (NAME VARCHAR(100),MR_EXP FLOAT,MOL CLOB)&quot;;
    sql_ret = jdbc_execute [ckey, sql];
</pre>


<a id="WritingData"></a>
<h2>Writing Data to a Table</h2>

<p>To write to a table, a result set for that table is needed. New additions
  to the table are made by appending to the result set.</p>

<pre>
        // Create a result set.
        // The result set key is needed for operating on the table.

        // The &quot;select *&quot; operation returns all entries in the table.
        // For a newly created table, the result set will be empty.
        // &quot;rkey&quot; is the result set key.

    sql = &quot;select * from mref&quot;;
    local rkey = jdbc_execute [ckey, sql];

        // Get the table field names.
        // These were set above to be 'NAME', 'MR_EXP', and 'MOL'.

    local fields = first jdbc_fields rkey;
    jdbc_close rkey;

    local db = db_Open ['$MOE/sample/mol/mref.mdb', 'read'];

        // Step through the entries of mref.mdb.
        // Append each entry to the result set.

    const DB_FIELDS = ['name', 'MR(exp)', 'mol'];
    local ent = 0;

    Close [force:1];

    while ent = db_NextEntry [db, ent] loop
        local values = db_Readfields [db, ent, DB_FIELDS];

            // Create the molecule in MOE.

        local chains = mol_Create last values;

            // Convert the molecule to MOE file format.

        local fp = fopen '';    // temporary file handle
        WriteMOE fp;            // output molecule to MOE file format
        fseek [fp, 0];
        local moemol = freadb [fp, 'char', SVL_MAXLEN];
	fclose fp;

	local record  = append [droplast values, moemol];
	const MAX_STRING_SIZE = 4000;

	    // Note: if chain names contain apostrophes, the
	    // apostrophes must be removed or escaped.

	if length moemol < MAX_STRING_SIZE then
	    sql = swrite [
		'INSERT INTO mref ({|,}) VALUES(\'{}\',{},\'{}\')', 
		fields, record(1), record(2), moemol
	    ];
	    write['{}\n', sql];
	    rkey = jdbc_execute [ckey, sql];
	    jdbc_close rkey;
	endif

	oDestroy chains;
    endloop
</pre>

<a id="ReadingData"></a>
<h2>Reading Data from a Table</h2>

<p>To read from a table, a result set for that table is needed. The result
  set identifies which table entries are to be read.</p>

<pre>
        // Create a result set.
        // The &quot;select *&quot; operation returns all entries in the table.
        // &quot;rkey&quot; is the result set key.

    sql = &quot;select * from mref&quot;;
    opt = [type:'SCROLL_INSENSITIVE',mode:'READ_ONLY',fetchsize:10];
    rkey = jdbc_execute [ckey, sql, opt];

        // Step through the result set, print values from the set.

    local idx = 0;              // entry index

    while jdbc_next rkey loop
        idx = inc idx;
        local rowdata = jdbc_readfields [rkey, ['MR_EXP', 'NAME']];
        write cat ['{}: MR_EXP={n:8.3}\tNAME= {20}\n', idx, rowdata];
    endloop

        // Clean up: close the result set.

    jdbc_close rkey;
</pre>

<h1>
<a id="SVL">SVL Commands</a></h1>
<table class="functionList">
  <tr>
    <td valign="top"><a href=
    "../fcnref/jdbc_fcn.htm">jdbc_append</a><br />
    <a href="../fcnref/jdbc_fcn.htm">jdbc_close</a><br />
    <a href="../fcnref/jdbc_fcn.htm">jdbc_delete</a><br />
    <a href="../fcnref/jdbc_fcn.htm">jdbc_execute</a><br />
    <a href="../fcnref/jdbc_fcn.htm">jdbc_fields</a></td>
    <td valign="top"><a href=
    "../fcnref/jdbc_fcn.htm">jdbc_next</a><br />
    <a href="../fcnref/jdbc_fcn.htm">jdbc_nread</a><br />
    <a href="../fcnref/jdbc_fcn.htm">jdbc_open</a><br />
    <a href="../fcnref/jdbc_fcn.htm">jdbc_read</a><br />
    <a href=
    "../fcnref/jdbc_fcn.htm">jdbc_readfields</a><br /></td>
    <td valign="top"><a href=
    "../fcnref/jdbc_fcn.htm">jdbc_readlob</a><br />
    <a href="../fcnref/jdbc_fcn.htm">jdbc_seek</a><br />
    <a href="../fcnref/jdbc_fcn.htm">jdbc_scroll</a><br />
    <a href="../fcnref/jdbc_fcn.htm">jdbc_tell</a><br />
    <a href="../fcnref/jdbc_fcn.htm">jdbc_write</a></td>
  </tr>
</table><!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
<a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

