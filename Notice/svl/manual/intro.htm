<!DOCTYPE html>
<html>

<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <title>Introduction</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    Introduction
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<p>[<a href="index.htm">Previous Chapter</a>] [<a href="svlfund.htm">Next
  Chapter</a>] [<a href="index.htm">Table of Contents</a>]</p>
  <ul>
    <li><a href="#What_is_SVL">What is SVL?</a></li>
    <li><a href="#Why_Vector_Languages">Why Vector Languages?</a></li>
    <li><a href="#Key_Features_of_SVL">Key Features of SVL</a></li>
  </ul>

<h1>
<a id="What_is_SVL">What is SVL?</a></h1>

<p>SVL is a <i>vector language</i>, in which the <i>vector</i> is the
  primitive unit of operation. This is in contrast to other languages, where
  the data primitive is a scalar, and a vector may be one of any number of
  possible data structures built around scalar quantities.</p>

<p>SVL is both a compiled and interactive language. In this way, SVL can be
  flexible enough to serve as an interactive command and scripting language and
  efficient enough to serve as a platform for the development of complex
  scientific applications. The interactive component of the language consists
  of the evaluation of expressions. Flow control constructs and function
  definitions form the remainder of the language.</p>

<h1><a id="Why_Vector_Languages">Why Vector
  Languages?</a></h1>

<p>Vector languages are well suited to problems involving intensive
  computations over large amounts of data. By manipulating data in vector form,
  an operation can be performed over an entire data set using a single
  instruction. Thus, vector code can be compact, yet readable. Computations
  over partial data sets are no less straightforward. For instance, in SVL,
  subsets of data can be easily accessed via <i>indexing</i>, <i>tagging</i>
  and <i>masking</i>, and via special vector operators.</p>

<p>SVL falls into the family of data-parallel languages, which are at the
  forefront of parallel language technology. Examples of data parallelism can
  be seen in High Performance FORTRAN, and vector extensions to C. SVL carries
  the vectorization process further.</p>

<p>The trend towards data parallelism is caused by a number of factors
  including:</p>
  <ul>
    <li>the difficulty in programming massively parallel computer
    architectures</li>
    <li>the success of vector architectures (e.g. CRAY) and
    multi-processors</li>
    <li>the natural mapping of scientific calculations onto the primitive
    operations of data-parallel languages</li>
    <li>sequential processor engineering assumptions (e.g. localization of
    memory access), which are less likely to be violated in the data-parallel
    paradigm</li>
  </ul>

<p>The result has been a wealth of research into data-parallel languages that
  has shown that data parallelism is a very successful paradigm for efficient
  implementations of algorithms on a wide variety of computer architectures,
  even sequential processors.</p>

<h1><a id="Key_Features_of_SVL">Key Features of
  SVL</a></h1>

<p>Key features of SVL are:</p>
  <ul>
    <li><b>expressivity</b>: the vector primitive, the principle of unit
    extension, and the simple, natural control mechanisms make for compact,
    powerful code that is easy to write, to debug, and to read, and that is
    suitable for use in a wide range of applications.</li>
    <li><b>simple syntax</b>: a simple, regular syntax makes SVL easy to
    learn.</li>
    <li><b>heterogeneous and nested vectors</b>: SVL vectors are permitted to
    contain elements of more than one data type, and may even contain other
    vectors, thus allowing data structures of arbitrary shape.</li>
    <li><b>multi-tasking capability</b>: when SVL is invoked in a windows
    environment, operations can be executed concurrently.</li>
    <li><b>performance</b>: SVL was designed to run efficiently on many
    computer architectures, including sequential processors, multi-processors,
    and parallel processors; any program written in SVL is parallel-ready, and
    can benefit from any parallelism supported by the host computer.</li>
    <li><b>interactive and non-interactive execution</b>: SVL may be run
    interactively at the <i>Command Line Interface</i> (CLI), but may also be
    invoked non-interactively.</li>
    <li><b>user-extensible</b>: users can augment the standard repertory of SVL
    built-in functions with their own application-specific, user-designed
    functions.</li>
    <li><b>integrates into applications</b>: SVL supports graphical user
    interfaces, and is the key to the programmability and flexibility of
    applications of which SVL is an integral part.</li>
  </ul>

<p>Next: <a href="svlfund.htm">Fundamental SVL Concepts</a></p>

<h1>See Also</h1>

<p><a href="../../tutorials/svltour.htm">SVL Tutorial</a><br />
  <a href="../../fcnindex.htm">Function Index</a></p>
<!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
<a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

