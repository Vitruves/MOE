<!DOCTYPE html>
<html>

<!--
!!    MOE On-Line Manuals
!!    COPYRIGHT (C) CHEMICAL COMPUTING GROUP ULC.  ALL RIGHTS RESERVED.
!!-->
<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="keywords:" />
  <meta name="keywords" content=
  "functions: bitcount, bitreverse, bitmsbpos, bitlsbpos" />
  <meta name="keywords" content=
  "functions: bitmsbmask, bitlsbmask, bitmsbblock, bitlsbblock" />
  <meta name="keywords" content=
  "functions: bitnot, bitand, bitor, bitxor, bitshl, bitshr" />
  <title>Bit Manipulation Functions</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    Bit Manipulation Functions
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<pre class="code">
    y = <a class="fcnlink" href="#bitand">bitand</a>      [x1,...,xN]
    y = <a class="fcnlink" href="#bitcount">bitcount</a>    x
    y = <a class="fcnlink" href="#bitmsbblock">bitmsbblock</a> x
    y = <a class="fcnlink" href="#bitlsbblock">bitlsbblock</a> x
    y = <a class="fcnlink" href="#bitmsbmask">bitmsbmask</a>  x
    y = <a class="fcnlink" href="#bitlsbmask">bitlsbmask</a>  x
    y = <a class="fcnlink" href="#bitmsbpos">bitmsbpos</a>   x
    y = <a class="fcnlink" href="#bitlsbpos">bitlsbpos</a>   x
    y = <a class="fcnlink" href="#bitnot">bitnot</a>      x
    y = <a class="fcnlink" href="#bitor">bitor</a>       [x1,...,xN]
    y = <a class="fcnlink" href="#bitreverse">bitreverse</a>  [x, k]
    y = <a class="fcnlink" href="#bitshl">bitshl</a>      [x, k]
    y = <a class="fcnlink" href="#bitshr">bitshr</a>      [x, k]
    y = <a class="fcnlink" href="#bitxor">bitxor</a>      [x1,...,xN]
</pre>

<h1>Description</h1>

<p>Bit manipulation functions operate on the base-2 representation of an
  integer wherein each base-2 digit is a <i>bit</i>. Unless otherwise noted,
  all functions round their arguments to the nearest integer (if in floating
  point). All calculations are performed with integer arithmetic and no
  provision is made for overflow or underflow.</p>

<p>The unary operators (like <tt>bitcount</tt> and <tt>bitmsbpos</tt>) apply
  to all scalar values in the argument vector (no matter how deeply nested).
  The binary operators (like <tt>bitreverse</tt> and <tt>bitshr</tt>) match
  elements of the arguments in pair no matter how deeply nested. Unit extension
  applies. <!-- bitand --></p>
<a id="bitand"></a>
<hr noshade="noshade" />

<pre>
y = <span class="fcndef">bitand</span> [x1, x2, ... xN]
</pre>

<p>Implements the bitwise logical operation <tt>AND</tt>: it sets each bit of
  the integer result <tt>y</tt> if and only if all the corresponding bits in
  the base-2 representation of <tt>x1, x2, ..., xN</tt> are also set. If
  <tt>N=1</tt>, the function returns <tt>x1</tt>. If <tt>K=0</tt>, the
  functions returns an integer with all bits set, i.e. -1.</p>

<pre class="code">
svl&gt; bitand [6,3]
2
svl&gt; bitand [0xABC5,0xF,0xF17]
5
</pre><!-- ====================== bitcount ====================== -->
<a id="bitcount"></a>
<hr noshade="noshade" />

<pre>
y = <span class="fcndef">bitcount</span> x
</pre>

<p>Returns the number of one bits in the base-2 representation of its
  argument. The results depend on the word size of the computer (especially for
  negative arguments). The SVL constant <tt>INT_BITS</tt> contains the number
  of bits used to represent integers.</p>

<pre class="code">
svl&gt; bitcount [-2,-1,0,1,2,3,4,5,6,7,8]
[31,32,0,1,1,2,1,2,2,3,1]
</pre>
<!-- ====================== bitmsbblock, bitlsbblock ====================== -->
<a id="bitlsbblock"></a>
<a id="bitmsbblock"></a>
<hr noshade="noshade" />

<pre>
y = <span class="fcndef">bitmsbblock</span> x
y = <span class="fcndef">bitlsbblock</span> x
</pre>

<p><tt>bitmsbblock</tt> sets all bits in the base-2 representation of
  <tt>x</tt> that are not strictly more significant than the most significant
  bit. <tt>bitlsbblock</tt> sets all bits in the base-2 representation of
  <tt>x</tt> that are not strictly more significant than the least significant
  bit. If <tt>x</tt> is zero then zero is returned. The results depend on the
  word size of the computer (especially for negative arguments). The SVL
  constant <tt>INT_BITS</tt> contains the number of bits used to represent
  integers.</p>

<pre class="code">
svl&gt; bitmsbblock [-2,-1,0,1,2,3,4,5,6,7,8]
[-1,-1,0,1,3,3,7,7,7,7,15]

svl&gt; bitlsbblock [-2,-1,0,1,2,3,4,5,6,7,8]
[3,1,0,1,3,1,7,1,3,1,15]
</pre>
<!-- ====================== bitmsbmask, bitlsbmask ====================== -->
<a id="bitlsbmask"></a>
<a id="bitmsbmask"></a>
<hr noshade="noshade" />

<pre>y = <span class="fcndef">bitmsbmask</span> x
y = <span class="fcndef">bitlsbmask</span> x
</pre>

<p><tt>bitmsbmask</tt> clears all bits in the base-2 representation of
  <tt>x</tt> except the most significant one bit. <tt>bitlsbmask</tt> clears
  all bits in the base-2 representation of <tt>x</tt> except the least
  significant one bit. If <tt>x</tt> is zero then zero is returned. The results
  depend on the word size of the computer (especially for negative arguments).
  The SVL constant <tt>INT_BITS</tt> contains the number of bits used to
  represent integers.</p>

<pre class="code">
svl&gt; bitmsbmask [-2,-1,0,1,2,3,4,5,6,7,8]
[-2147483648,-2147483648,0,1,2,2,4,4,4,4,8]

svl&gt; bitlsbmask [-2,-1,0,1,2,3,4,5,6,7,8]
[2,1,0,1,2,1,4,1,2,1,8]
</pre>
<!-- ====================== bitmsbpos, bitlsbpos ====================== -->
<a id="bitlsbpos"></a>
<a id="bitmsbpos"></a>
<hr noshade="noshade" />

<pre>
y = <span class="fcndef">bitmsbpos</span> x
y = <span class="fcndef">bitlsbpos</span> x
</pre>

<p><tt>bitmsbpos</tt> returns the bit number (starting from the least
  significant bit which is numbered 1) of the most significant one bit in the
  base-2 representation of the argument <tt>x</tt>. <tt>bitlsbpos</tt> returns
  the bit number of the least significant one bit. If <tt>x</tt> is zero then
  zero is returned. The results depend on the word size of the computer
  (especially for negative arguments). The SVL constant <tt>INT_BITS</tt>
  contains the number of bits used to represent integers.</p>

<pre class="code">
svl&gt; bitmsbpos [-2,-1,0,1,2,3,4,5,6,7,8]
[32,32,0,1,2,2,3,3,3,3,4]

svl&gt; bitlsbpos [-2,-1,0,1,2,3,4,5,6,7,8]
[2,1,0,1,2,1,3,1,2,1,4]
</pre><!-- ====================== bitnot ====================== -->
<a id="bitnot"></a>
<hr noshade="noshade" />

<pre>
y = <span class="fcndef">bitnot</span> x
</pre>

<p>Inverts each bit in the base-2 representation of the argument
  <tt>x</tt>.</p>

<pre class="code">
svl&gt; bitnot [-2,-1,0,1,2,3,4,5,6,7,8]
[1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9]
</pre><!-- ====================== bitor ====================== -->
<a id="bitor"></a>
<hr noshade="noshade" />

<pre>
y = <span class="fcndef">bitor</span> [x1, x2, ... xN]
</pre>

<p>Implements the bitwise logical operation <tt>OR</tt>: it sets each bit of
  the integer result <tt>y</tt> if and only if there is at least one bit set
  among the corresponding bits in the base-2 representation of <tt>x1, x2, ...,
  xN</tt>. If <tt>K=1</tt>, the function returns <tt>x1</tt>. If <tt>K=0</tt>,
  the functions returns an integer with no bits set, i.e. 0.</p>

<pre class="code">
svl&gt; bitor [6,3]
7
svl&gt; bitor [0xABCDE,-1]
-1
svl&gt; bitor [1,2,4,8]
15
</pre><!-- ====================== bitreverse ====================== -->
<a id="bitreverse"></a>
<hr noshade="noshade" />

<pre>
y = <span class="fcndef">bitreverse</span> [x, k]
</pre>

<p>Reverses the order of the least significant <tt>k</tt> bits in the base-2
  representation of the argument <tt>x</tt>. If <tt>k</tt> is less than zero
  then zero is used; if <tt>k</tt> is greater than <tt>INT_BITS</tt> then
  <tt>INT_BITS</tt> is used.</p>

<pre class="code">
svl&gt; bitreverse [[1,8,3,12,2,4,16], 4]
[8,1,12,3,4,2,16]

svl&gt; bitreverse [1, igen 5]
[1,2,4,8,16]
</pre><!-- ====================== bitshl, bitshr ====================== -->
<a id="bitshr"></a>
<a id="bitshl"></a>
<hr noshade="noshade" />

<pre>
y = <span class="fcndef">bitshl</span> [x, k]
y = <span class="fcndef">bitshr</span> [x, k]
</pre>

<p><tt>bitshl</tt> increases the significance of each bit in the base-2
  representation of <tt>x</tt> by <tt>k</tt> bits. For positive quantities,
  <tt>bitshl</tt> is similar to multiplication by 2<sup><i>k</i></sup>; the
  most significant <tt>k</tt> bits are lost and the least significant
  <tt>k</tt> bits in the result are 0.</p>

<p><tt>bitshr</tt> decreases the significance of each bit in the base-2
  representation of <tt>x</tt> by <tt>k</tt> bits. For positive quantities,
  <tt>bitshr</tt> is similar to division by 2<sup><i>k</i></sup>. The least
  significant <tt>k</tt> bits are lost and the most significant <tt>k</tt> bits
  in the result are 0.</p>

<p>The results depend on the word size of the computer (especially for
  negative arguments). The SVL constant <tt>INT_BITS</tt> contains the number
  of bits used to represent integers.</p>

<pre class="code">
svl&gt; bitshl [ [-2,-1,0,1,2,3,4,5,6,7,8], 1 ]
[-4,-2,0,2,4,6,8,10,12,14,16]

svl&gt; bitshr [ [-2,-1,0,1,2,3,4,5,6,7,8], 1 ]
[-1,-1,0,0,1,1,2,2,3,3,4]
</pre><!-- ====================== bitxor ====================== -->
<a id="bitxor"></a>
<hr noshade="noshade" />

<pre>
y = <span class="fcndef">bitxor</span> [x1, x2, ... xN]
</pre>

<p>Implements the bitwise logical operation <tt>XOR</tt>: it sets each bit of
  the integer result <tt>y</tt> if and only if there is an odd number of bits
  set among the corresponding bits in the integer representation of <tt>x1, x2,
  ..., xN</tt>. If <tt>K=1</tt>, the function returns <tt>x1</tt>. If
  <tt>K=0</tt>, the functions returns an integer with no bits set, i.e. 0.</p>

<pre class="code">
svl&gt; bitxor [6,3]
5
svl&gt; bitxor [7,0xF]
8
</pre>

<h1>See Also</h1>

<p><a href="arithmet.htm">Arithmetic Functions</a></p>
  <!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

