<!DOCTYPE html>
<html>

<!--
!!    MOE On-Line Manuals
!!    COPYRIGHT (C) CHEMICAL COMPUTING GROUP ULC.  ALL RIGHTS RESERVED.
!!-->
<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="keywords:" />
  <meta name="keywords" content="functions: flist" />
  <meta name="keywords" content="functions: ftype" />
  <meta name="keywords" content="functions: fhash" />
  <meta name="keywords" content="functions: fdelete" />
  <meta name="keywords" content="functions: fmkdir" />
  <meta name="keywords" content="functions: frmdir" />
  <meta name="keywords" content="functions: fname" />
  <meta name="keywords" content="functions: fabsname" />
  <meta name="keywords" content="functions: ffullname" />
  <meta name="keywords" content="functions: fenvname" />
  <meta name="keywords" content="functions: ftrimname" />
  <meta name="keywords" content="functions: fcat" />
  <meta name="keywords" content="functions: fsize" />
  <meta name="keywords" content="functions: fseek" />
  <meta name="keywords" content="functions: ftell" />
  <meta name="keywords" content="functions: fdate" />
  <meta name="keywords" content="functions: fpermissions" />
  <meta name="keywords" content="functions: fsetpermissions" />
  <meta name="keywords" content="functions: fstat" />
  <meta name="keywords" content="functions: fstatp" />
  <meta name="keywords" content="functions: fdiskfree" />
  <meta name="keywords" content="functions: fbase" />
  <meta name="keywords" content="functions: fext" />
  <meta name="keywords" content="functions: fpath" />
  <meta name="keywords" content="functions: ftail" />
  <meta name="keywords" content="functions: fuserpath" />
  <meta name="keywords" content="functions: frename" />
  <meta name="keywords" content="functions: freplace" />
  <meta name="keywords" content="functions: fcopy" />
  <meta name="keywords" content="functions: fcopydel" />
  <meta name="keywords" content="functions: fmove" />
  <meta name="keywords" content="functions: fmovedel" />
  <meta name="keywords" content="functions: fwriteable" />
  <meta name="keywords" content="functions: _fmkdir" />
  <meta name="keywords" content="functions: _frmdir" />
  <meta name="keywords" content="functions: _frename" />
  <meta name="keywords" content="functions: _freplace" />
  <meta name="keywords" content="functions: _fcopy" />
  <meta name="keywords" content="functions: _fcopydel" />
  <meta name="keywords" content="functions: _fmove" />
  <meta name="keywords" content="functions: _fmovedel" />
  <meta name="keywords" content="functions: _fdelete" />
<title>File Functions</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
<div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    File Functions
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<pre class="code">
list = <a class="fcnlink" href="#flist">flist</a> []
list = <a class="fcnlink" href="#flist">flist</a> [ [], &#39;pattern&#39; ]
list = <a class="fcnlink" href="#flist">flist</a> &#39;directory&#39;
list = <a class="fcnlink" href=
"#flist">flist</a> [ &#39;directory&#39;, &#39;pattern&#39; ]

name = <a class="fcnlink" href="#fname">fname</a> file_number
name = <a class="fcnlink" href="#fname">fname</a> &#39;filename&#39;

name = <a class="fcnlink" href="#fabsname">fabsname</a> file_number
name = <a class="fcnlink" href="#fabsname">fabsname</a> &#39;filename&#39;

name = <a class="fcnlink" href="#ffullname">ffullname</a> file_number
name = <a class="fcnlink" href=
"#ffullname">ffullname</a> &#39;filename&#39;

name = <a class="fcnlink" href="#fenvname">fenvname</a> file_number
name = <a class="fcnlink" href="#fenvname">fenvname</a> &#39;filename&#39;

name = <a class="fcnlink" href=
"#ftrimname">ftrimname</a> [&#39;pathname&#39;, len]

basename_token = <a class="fcnlink" href=
"#fbase">fbase</a> &#39;filename&#39;
extension_token = <a class="fcnlink" href=
"#fext">fext</a> &#39;filename&#39;

path_token = <a class="fcnlink" href=
"#fpath">fpath</a> &#39;path_and_filename&#39;
name_token = <a class="fcnlink" href=
"#ftail">ftail</a> &#39;path_and_file_name&#39;

name_token = <a class="fcnlink" href=
"#fcat">fcat</a> [&#39;component_1&#39;, &#39;component_2&#39;, ...]

path_token = <a class="fcnlink" href=
"#fuserpath">fuserpath</a> &#39;user_name&#39;

type_token = <a class="fcnlink" href="#ftype">ftype</a> &#39;name&#39;
number = <a class="fcnlink" href="#fhash">fhash</a> &#39;name&#39;

size = <a class="fcnlink" href="#fsize">fsize</a> file_number
size = <a class="fcnlink" href="#fsize">fsize</a> &#39;filename&#39;

seconds = <a class="fcnlink" href="#fdate">fdate</a> &#39;filename&#39;

pmode = <a class="fcnlink" href=
"#fpermissions">fpermissions</a> &#39;filename&#39;
<a class="fcnlink" href=
"#fsetpermissions">fsetpermissions</a> [&#39;filename&#39;, pmode]

file_info = <a class="fcnlink" href="#fstat">fstat</a> &#39;filename&#39;
file_info = <a class="fcnlink" href="#fstat">fstat</a> file_number
file_info = <a class="fcnlink" href="#fstat">fstat</a> files
file_info = <a class="fcnlink" href="#fstatp">fstatp</a> files

size = <a class="fcnlink" href= "#fdiskfree">fdiskfree</a> &#39;path&#39;

<a class="fcnlink" href="#fdelete">fdelete</a> &#39;pathname&#39;
<a class="fcnlink" href=
"#fdelete">fdelete</a> [ &#39;pathname1&#39;, &#39;pathname2&#39;, ...]
rcode = <a class="fcnlink" href="#_fdelete">_fdelete</a> &#39;pathname&#39;

<a class="fcnlink" href="#fmkdir">fmkdir</a> &#39;directory&#39;
<a class="fcnlink" href=
"#fmkdir">fmkdir</a> [ &#39;directory1&#39;, &#39;directory2&#39;, ...]
rcode = <a class="fcnlink" href="#_fmkdir">_fmkdir</a> &#39;directory&#39;

<a class="fcnlink" href="#frmdir">frmdir</a> &#39;directory&#39;
<a class="fcnlink" href=
"#frmdir">frmdir</a> [ &#39;directory1&#39;, &#39;directory2&#39;, ...]
rcode = <a class="fcnlink" href="#_frmdir">_frmdir</a> &#39;directory&#39;

<a class="fcnlink" href=
"#frename">frename</a> [&#39;filename1&#39;, &#39;filename2&#39;]
rcode = <a class="fcnlink" href=
"#_frename">_frename</a> [&#39;filename1&#39;, &#39;filename2&#39;]

<a class="fcnlink" href=
"#freplace">freplace</a> [&#39;filename1&#39;, &#39;filename2&#39;]
rcode = <a class="fcnlink" href=
"#_freplace">_freplace</a> [&#39;filename1&#39;, &#39;filename2&#39;]

<a class="fcnlink" href=
"#fcopy">fcopy</a> [&#39;filename1&#39;, &#39;filename2&#39;]
rcode = <a class="fcnlink" href=
"#_fcopy">_fcopy</a> [&#39;filename1&#39;, &#39;filename2&#39;]
<a class="fcnlink" href=
"#fcopydel">fcopydel</a> [&#39;filename1&#39;, &#39;filename2&#39;]
rcode = <a class="fcnlink" href=
"#_fcopydel">_fcopydel</a> [&#39;filename1&#39;, &#39;filename2&#39;]

<a class="fcnlink" href=
"#fmove">fmove</a> [&#39;filename1&#39;, &#39;filename2&#39;]
rcode = <a class="fcnlink" href=
"#_fmove">_fmove</a> [&#39;filename1&#39;, &#39;filename2&#39;]
<a class="fcnlink" href=
"#fmovedel">fmovedel</a> [&#39;filename1&#39;, &#39;filename2&#39;]
rcode = <a class="fcnlink" href=
"#_fmovedel">_fmovedel</a> [&#39;filename1&#39;, &#39;filename2&#39;]

file_number = <a class="fcnlink" href=
"#fseek">fseek</a> [ file_number, byte_position ]
pos = <a class="fcnlink" href="#ftell">ftell</a> file_number

<a class="fcnlink" href="#fwriteable">fwriteable</a> &#39;pathname&#39;
</pre>
<a id="flist"></a>
<h1>Description</h1>

<pre>
list = <span class="fcndef">flist</span> []
list = <span class="fcndef">flist</span> [ [], &#39;pattern&#39; ]
list = <span class="fcndef">flist</span> &#39;directory&#39;
list = <span class=
"fcndef">flist</span> [ &#39;directory&#39;, &#39;pattern&#39; ]
</pre>

<p>Returns a list of all files in the directory specified by the token
  <tt>&#39;directory&#39;</tt> that match a given pattern. If the directory is
  null (<tt>[]</tt>), a null token (<tt>&#39;&#39;</tt>) or missing, the
  current directory is used instead. If the pattern is null, a null token or
  missing, the pattern <tt>&#39;*&#39;</tt> is used instead, i.e. the list of
  all files in the given directory is returned.
</p>
<a id="fname"></a>
<hr noshade="noshade" />

<pre>
name = <span class="fcndef">fname</span> file_number
</pre>

<p>Returns the name token of the file specified by its file handle
  <tt>file_number</tt>.</p>

<pre>
name = <span class="fcndef">fname</span> &#39;filename&#39;
</pre>

<p>Returns the given pathname with any environment variables expanded and any
  extraneous portions stripped away. For example,
  <tt>&#39;$MOE/sample//./mol//&#39;</tt> will become
  <tt>&#39;c:/moe/sample/mol&#39;</tt>.</p>
<a id="fabsname"></a>
<hr noshade="noshade" />

<pre>
name = <span class="fcndef">fabsname</span> file_number
</pre>

<p>Returns the absolute pathname of the specified file. On Windows, the
  returned pathname will use lower-case letters.</p>

<pre>
name = <span class="fcndef">fabsname</span> &#39;filename&#39;
</pre>

<p>Returns the absolute form of a given pathname, with any environment
  variables expanded and any extraneous portions stripped away. Relative
  pathnames are converted to their absolute using the path prefix of the current
  working directory (or &quot;working folder&quot;).</p>

<p>If given a path that contains an environment variable that does not
  exist, <tt>fabsname</tt> will report an error, while <tt>_fabsname</tt> will
  return an empty token.</p>
<a id="ffullname"></a>
<hr noshade="noshade" />

<pre>
name = <span class="fcndef">ffullname</span> file_number
name = <span class="fcndef">ffullname</span> &#39;filename&#39;
</pre>

<p>Returns a &quot;full&quot; form of an absolute pathname. On Windows, the
  pathname will NOT be converted to lowercase. Instead, any path prefix that
  refers to an existing path will be converted to the actual letter case
  stored, while the letter case of the remaining suffix will be left as-is.
  Additionally, extraneous path components of form <tt>&#39;/dir/../&#39;</tt>
  are replaced with <tt>/</tt>, provided that the new pathname refers to the
  same object.</p>
<a id="fenvname"></a>
<hr noshade="noshade" />

<pre>
name = <span class="fcndef">fenvname</span> file_number
name = <span class="fcndef">fenvname</span> &#39;filename&#39;
</pre>

<p>Returns a compact form of an absolute pathname. If possible, the pathname
  prefix will be replaced with either <tt>&#39;$MOE&#39;</tt> or
  <tt>&#39;$HOME&#39;</tt> or <tt>&#39;$TMP&#39;</tt>.</p>
<a id="ftrimname"></a>
<hr noshade="noshade" />

<pre>
name = <span class="fcndef">ftrimname</span> [&#39;pathname&#39;, len]
</pre>

<p>Trims a given pathname to ensure that it does not exceed the given length,
  <tt>len</tt>. The length is interpreted as the number of visible character
  glyphs; thus, a <a href="utf8.htm">UTF-8 multi-byte sequence</a> for a
  non-ASCII letter/symbol counts as having length 1.
  When possible, the function keeps the prefix and suffix
  components intact. For example,</p>

<pre class="code">
svl&gt; ftrimname &#39;/prefix/aa/bb/cc/dd/suffix&#39;, 25]
&#39;prefix/aa/.../dd/suffix&#39;
</pre>
<a id="fbase"></a>
<hr noshade="noshade" />

<pre>
basename_token = <span class="fcndef">fbase</span> &#39;filename&#39;
</pre>

<p>Returns its argument without any extensions: it strips away all characters
  to the right of and including the rightmost period (.) that follows the
  rightmost slash (/).</p>

<pre class="code">
svl&gt; fbase &#39;/u/gins.moe&#39;
&#39;/u/gins&#39;

svl&gt; fbase &#39;/u/gins.a.moe&#39;
&#39;/u/gins.a&#39;
</pre>
<a id="fext"></a>
<hr noshade="noshade" />

<pre>
extension_token = <span class="fcndef">fext</span> &#39;filename&#39;
</pre>

<p>Returns the extension of its argument, i.e. all characters to the right of
  the rightmost period (.) that follows the rightmost slash (/).</p>

<pre class="code">
svl&gt; fext &#39;/u/gins.moe&#39;
&#39;moe&#39;

svl&gt; fext &#39;/u/gins.a.moe&#39;
&#39;moe&#39;
</pre>
<a id="fpath"></a>
<hr noshade="noshade" />

<pre>
path_token = <span class="fcndef">fpath</span> &#39;path_and_filename&#39;
</pre>

<p>Extracts the path name from its argument, i.e. all characters to the left
  of the rightmost slash (/) character.</p>

<pre class="code">
svl&gt; fpath &#39;/moe/data/molecule.moe&#39;
&#39;/moe/data&#39;
</pre>

<p>The path for a top level directory includes a trailing slash (/)
  character.</p>

<pre class="code">
svl&gt; fpath &#39;c:/tmp.txt&#39;
&#39;c:/&#39;
</pre>
<a id="ftail"></a>
<hr noshade="noshade" />

<pre>
name_token = <span class="fcndef">ftail</span> &#39;path_or_file_name&#39;
</pre>

<p>Extracts the portion of its argument to the right of the rightmost slash
  (/) character present in the argument.</p>

<pre class="code">
svl&gt; ftail &#39;/moe/data/molecule.moe&#39;
&#39;molecule.moe&#39;

svl&gt; ftail &#39;/moe/data&#39;
&#39;data&#39;
</pre>
<a id="fcat"></a>
<hr noshade="noshade" />

<pre>
name_token = <span class=
"fcndef">fcat</span> [&#39;component_1&#39;, &#39;component_2&#39;, ...]
</pre>

<p>Concatenates the given path component to form a valid path.</p>

<pre class="code">
svl&gt; fcat [&#39;/moe&#39;, &#39;data&#39;, &#39;molecule.moe&#39;]
&#39;/moe/data/molecule.moe&#39;
</pre>
<a id="fuserpath"></a>
<hr noshade="noshade" />

<pre>
path_token = <span class="fcndef">fuserpath</span> &#39;user_name&#39;
</pre>

<p>Given a user name, returns the full path to the user&#39;s home directory.
  This function call works on UNIX operating systems only.</p>

<pre class="code">
svl&gt; fuserpath &#39;john&#39;
&#39;/net/isis/u/john&#39;
</pre>
<a id="ftype"></a>
<hr noshade="noshade" />

<pre>
type_token = <span class="fcndef">ftype</span> &#39;pathname&#39;
</pre>

<p>Returns the type of the specified pathname:</p>
<table class="noborder">
  <tr>
    <td><tt>&#39;file&#39;</tt></td>
    <td>regular file</td>
  </tr>
  <tr>
    <td><tt>&#39;dir&#39;</tt></td>
    <td>directory (folder)</td>
  </tr>
  <tr>
    <td><tt>&#39;other&#39;</tt></td>
    <td>other object (or badly formed pathname)</td>
  </tr>
  <tr>
    <td><tt>&#39;&#39;</tt></td>
    <td>pathname does not exist.</td>
  </tr>
</table>
<hr noshade="noshade" />

<a id="fhash"></a>
<pre>
number = <span class="fcndef">fhash</span> &#39;pathname&#39;
</pre>

<p>Returns an internal identifier which can be used to detect when two path
  specifications refer to the same location. Two existing pathnames refer to
  the same location if and only if <tt>fhash</tt> returns the same number for
  the both pathnames. When given a non-existent pathname, <tt>fhash</tt>
  returns 0. <i>Warning:</i> Although quite reliable in most situations, this
  function depends on information supplied to it by the underlying operating
  system and network software and is not (and cannot be) absolutely reliable in
  all cases.</p>
  <hr noshade="noshade" />

  <a id="fsize"></a>
<pre>
size = <span class="fcndef">fsize</span> file_number
size = <span class="fcndef">fsize</span> &#39;filename&#39;
</pre>

<p>Returns the number of bytes in the file specified by its file handle or
  name.</p>
  <hr noshade="noshade" />

  <a id="fdate"></a>
<pre>
seconds = <span class="fcndef">fdate</span> &#39;filename&#39;
</pre>

<p>Returns the time in seconds since January 1, 1970 of the most recent
  modification of the file specified by <tt>filename</tt>.</p>
  <hr noshade="noshade" />

  <a id="fpermissions"></a>
  <a id="fsetpermissions"></a>
<pre>
pmode = <span class="fcndef">fpermissions</span> &#39;filename&#39;
<span class="fcndef">fsetpermissions</span> [&#39;filename&#39;, pmode]
</pre>

<p>Functions to return and set the permission flags on a file. <tt>pmode</tt>
  specifies the read (R), write (W), and execute (X) permission bits of the
  file, as follows:</p>
<table class="titlebar">
  <tr>
    <th>pmode</th>
    <th>Bits</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>1</td>
    <td>R</td>
    <td>Reading is enabled for user (read-only mode)</td>
  </tr>
  <tr>
    <td>2</td>
    <td>W</td>
    <td>Writing is enabled for user (write-only mode)</td>
  </tr>
  <tr>
    <td>3</td>
    <td>RW</td>
    <td>Reading and writing are enabled for user</td>
  </tr>
  <tr>
    <td>4</td>
    <td>X</td>
    <td>Execute is enabled for user (execute-only)</td>
  </tr>
  <tr>
    <td>5</td>
    <td>RX</td>
    <td>Reading and execute are enabled for user (no writing)</td>
  </tr>
  <tr>
    <td>6</td>
    <td>WX</td>
    <td>Writing and execute are enabled for user (no reading)</td>
  </tr>
  <tr>
    <td>7</td>
    <td>RWX</td>
    <td>Reading, writing, and execute are enabled for user</td>
  </tr>
</table>
<hr noshade="noshade" />

<a id="fstatp"></a>
<a id="fstat"></a>
<pre>
file_info = <span class="fcndef">fstat</span> &#39;filename&#39;
file_info = <span class="fcndef">fstat</span> file_number
file_info = <span class="fcndef">fstat</span> files

file_info = <span class="fcndef">fstatp</span> files
</pre>

<p>Given a vector of file names or file handles, returns a vector describing
  the specified files. <tt>fstatp</tt> is identical to <tt>fstat</tt> with the
  exception that <tt>fstatp</tt> does not evaluate <tt>file_flags</tt> and
  <tt>fs_type</tt> (as described below), returning the default values 0 and
  null token (<tt>&#39;&#39;</tt>), respectively. In some situations,
  <tt>fstatp</tt> will execute substantially faster than <tt>fstat</tt>.
<p>The information returned in the <tt>file_info</tt> vector is as
  follows:</p>

<p class="blockquote"><tt>[file_type, file_size, file_flags, mtime,
  atime, fs_type]</tt> <!-- DESC -->
</p>
<div class="indent">
  <table class="noborder">
    <tr>
      <td><tt>file_type</tt></td>
      <td>Token describing the file type. Possible values
      are <tt>&#39;file&#39;</tt> or <tt>&#39;dir&#39;</tt>.</td>
    </tr>
    <tr>
      <td><tt>file_size</tt></td>
      <td>The number of bytes in the file.</td>
    </tr>
    <tr>
      <td><tt>file_flags</tt></td>
      <td>
        Binary mask (see below) indicating if the file is readable,
        writeable, executable, and/or remote. Individual fields of the
        <tt>file_flags</tt> mask can be accessed using the following values:
        <table class="noborder">
            <tr>
              <td>0x01</td>
              <td>File is readable.</td>
            </tr>
            <tr>
              <td>0x02</td>
              <td>File is writable.</td>
            </tr>
            <tr>
              <td>0x04</td>
              <td>File is executable.</td>
            </tr>
            <tr>
              <td>0x08</td>
              <td>File is remote.</td>
            </tr>
          </table>

<p>Please note that on Windows, all readable files are flagged as
        executable.</p>
      </td>
    </tr>
    <tr>
      <td><tt>mtime</tt></td>
      <td>Last modification time of the file in seconds
      since January 1, 1970.</td>
    </tr>
    <tr>
      <td><tt>atime</tt></td>
      <td>Last access time of the file in seconds since
      January 1, 1970.</td>
    </tr>
    <tr>
      <td><tt>fs_type</tt></td>
      <td>Token describing the file system where the file
      resides.</td>
    </tr>
  </table>
</div><!-- ENDDESC -->
<pre class="code">
svl&gt; fstat [&#39;.&#39;, &#39;$MOE/license.dat&#39;]
[ [&#39;dir&#39;,&#39;file&#39;], [0,82], [7,9], [1168285068,1145537991], [1182189911,1182180482], [&#39;ext3&#39;,&#39;nfs&#39;] ]
</pre><!-- OLD example

<pre>
    svl&gt; fstat ['.', 'moe']
    [ ['dir','file'], [0,3402], [5,5], <a
    ></a>[1168285068,1145537991], [1182189911,1182180482], ['NTFS','NTFS'] ]
</pre>
-->

<a id="fdiskfree"></a>
<hr noshade="noshade" />

<pre>
<span class="fcndef">fdiskfree</span> &#39;path&#39;
</pre>
    <p>Returns the amount of free space available.  <tt>&#39;path&#39;</tt>
	is any valid path.
    </p>
    <p>On windows, <tt>fdiskfree</tt> returns the amount of space that is
	available on a disk volume, which is the total amount of free space
	available to the caller.
    </p>
    <p>For example, both of the following will give the number of available
	bytes in <tt>C:/</tt>:
    </p>

<pre class="code">
svl&gt; fdiskfree &#39;C:/&#39;
774687789056

svl&gt; fdiskfree &#39;C:/thispath&#39;
774687789056
</pre>

    <p>On Linux, <tt>fdiskfree</tt> returns the amount of space that is
	available on a mounted file system.
    </p>
    <p>For example, both of the following will give the number of available
	bytes in <tt>/</tt>:
    </p>

<pre class="code">
svl&gt; fdiskfree &#39;/&#39;
43642687488

svl&gt; fdiskfree &#39;/thatpath&#39;
43642687488
</pre>

<a id="_fdelete"></a>
<a id="fdelete"></a>
<hr noshade="noshade" />

<pre>
<span class="fcndef">fdelete</span> &#39;pathname&#39;
<span class=
"fcndef">fdelete</span> [ &#39;pathname1&#39;, &#39;pathname2&#39;, ...]
rcode = <span class="fcndef">_fdelete</span> &#39;pathname&#39;
</pre>

<p>Deletes directories and files specified <tt>&#39;pathname&#39;</tt>.
  Calling <tt>fdelete</tt> with a null argument has no effect. Wildcards are
  not permitted.</p>

<p>For example, the following will delete two files, <tt>tmp.moe</tt> and
  <tt>junk.svl</tt>, from the current directory:</p>

<pre class="code">
svl&gt; fdelete [&#39;tmp.moe&#39;, &#39;junk.svl&#39;]
</pre>

<p><b>Caution!</b> Deletion proceeds without a confirmation prompt. Files are
  deleted from disk.</p>

<p>Function <tt>_fdelete</tt> is identical to function <tt>fdelete</tt>,
  except that it always returns a result code and on failure it will not exit
  with an error. The function returns 0 on success and non-0 on failure. If the
  argument refers to a non-empty directory, the function returns 1. Otherwise,
  if the specified file or directory could not be deleted, the function returns
  -1.</p>
<a id="_fmkdir"></a>
<a id="fmkdir"></a>
<hr noshade="noshade" />

<pre>
<span class="fcndef">fmkdir</span> &#39;directory&#39;
<span class=
"fcndef">fmkdir</span> [ &#39;directory1&#39;, &#39;directory2&#39;, ...]
rcode = <span class="fcndef">_fmkdir</span> &#39;directory&#39;
</pre>

<p>Create new directories on the file system. The directories are created in
  consecutive order until there are no more arguments. By default, directories
  will be created in the current directory. Calling <tt>fmkdir</tt> with a null
  argument has no effect.</p>

<p>Function <tt>_fmkdir</tt> is identical to function <tt>fmkdir</tt>, except
  that it always returns a result code and on failure it will not exit with an
  error. The function returns 0 if a new directory is created, 1 if the
  directory already exists, and -1 if the specified directory does not exist
  and could not be created.</p>
<a id="_frmdir"></a>
<a id="frmdir"></a>
<hr noshade="noshade" />

<pre>
<span class="fcndef">frmdir</span> &#39;directory&#39;
<span class=
"fcndef">frmdir</span> [ &#39;directory1&#39;, &#39;directory2&#39;, ...]
rcode = <span class="fcndef">_frmdir</span> &#39;directory&#39;
</pre>

<p>Remove the specified directories from the file system. It is an error to
  attempt to remove non-empty directories or files which are not directories.
  Calling <tt>frmdir</tt> with a null argument has no effect.</p>

<p><b>Caution!</b> Deletion proceeds without a confirmation prompt.
  Directories are deleted from disk.</p>

<p>Function <tt>_frmdir</tt> is identical to function <tt>frmdir</tt>, except
  that it always returns a result code and on failure it will not exit with an
  error. The function returns 0 on success and non-0 on failure. If the
  argument refers to a non-empty directory, the function returns 1. Otherwise,
  if the argument is not a directory or could not be deleted, the function
  returns -1.</p>
<a id="_frename"></a>
<a id="frename"></a>
<hr noshade="noshade" />

<pre>
<span class="fcndef">frename</span> [&#39;filename1&#39;, &#39;filename2&#39;]
rcode = <span class=
"fcndef">_frename</span> [&#39;filename1&#39;, &#39;filename2&#39;]
</pre>

<p>Change the name of a file from <tt>&#39;filename1&#39;</tt> to
  <tt>&#39;filename2&#39;</tt>. If <tt>&#39;filename2&#39;</tt> exists, the
  function will fail and leave the file <tt>&#39;filename2&#39;</tt> intact. On
  failure, function <tt>frename</tt> will exit with an error. Function
  <tt>_frename</tt> will return 0 on success and non-0 on failure. On failure,
  the function will return 1, if <tt>&#39;filename2&#39;</tt> exists, and -1
  otherwise.</p>

<p><tt>frename</tt> is similar to <tt>fmove</tt> with the following important
  distinctions: <tt>frename</tt> is an atomic (uninterruptible) operation that
  involves no copying of data, and therefore should be used only when the
  source and destination files are in the same directory. If the source and
  destination directories are different, <tt>frename</tt> may fail whereas
  <tt>fmove</tt> would succeed.</p>
<a id="_freplace"></a>
<a id="freplace"></a>
<hr noshade="noshade" />

<pre>
<span class="fcndef">freplace</span> [&#39;filename1&#39;, &#39;filename2&#39;]
rcode = <span class=
"fcndef">_freplace</span> [&#39;filename1&#39;, &#39;filename2&#39;]
</pre>

<p>Change the name of a file from <tt>&#39;filename1&#39;</tt> to
  <tt>&#39;filename2&#39;</tt>. If <tt>&#39;filename2&#39;</tt> exists, the
  function will delete it. On failure, function <tt>freplace</tt> will exit
  with an error. Function <tt>_freplace</tt> will return 0 or 1 on success and
  -1 on failure. On success, the function will return 1, if
  <tt>&#39;filename2&#39;</tt> exists, and 0 otherwise.</p>

<p><tt>freplace</tt> is similar to <tt>fmovedel</tt> with the following
  important distinctions: <tt>freplace</tt> is an atomic (uninterruptible)
  operation that involves no copying of data, and therefore should be used only
  when the source and destination files are in the same directory. If the
  source and destination directories are different, <tt>freplace</tt> may fail
  whereas <tt>fmovedel</tt> would succeed.</p>
<a id="fmove"></a>
<a id="fmovedel"></a>
<a id="fcopydel"></a>
<a id="fcopy"></a>
<hr noshade="noshade" />

<pre>
<span class="fcndef">fcopy</span> [&#39;filename1&#39;, &#39;filename2&#39;]
<span class="fcndef">fcopydel</span> [&#39;filename1&#39;, &#39;filename2&#39;]
<span class="fcndef">fmovedel</span> [&#39;filename1&#39;, &#39;filename2&#39;]
<span class="fcndef">fmove</span> [&#39;filename1&#39;, &#39;filename2&#39;]
</pre>

<p>Copy file <tt>&#39;filename1&#39;</tt> to file
  <tt>&#39;filename2&#39;</tt>. If <tt>&#39;filename2&#39;</tt> exists, the
  functions <tt>fcopy</tt> and <tt>fmove</tt> will fail, while the functions
  <tt>fcopydel</tt> and <tt>fmovedel</tt> will delete the file and replace it
  with <tt>&#39;filename1&#39;</tt>. Functions <tt>fcopy</tt> and
  <tt>fcopydel</tt> copy the contents of <tt>&#39;filename1&#39;</tt> to
  <tt>&#39;filename2&#39;</tt>, while leaving the source
  <tt>&#39;filename1&#39;</tt> intact. Function <tt>fmove</tt> and
  <tt>fmovedel</tt> delete the source <tt>&#39;filename1&#39;</tt> after the
  copy operation is completed. If <tt>&#39;filename1&#39;</tt> and
  <tt>&#39;filename2&#39;</tt> refer to the same file, the functions will fail.
  On failure, the functions will exit with an error.</p>

<p>Functions <tt>fmove</tt> and <tt>fmovedel</tt> are similar to
  <tt>frename</tt> and <tt>freplace</tt>, respectively, with the following
  important distinctions: <tt>frename</tt> and <tt>freplace</tt> are atomic
  operations that involve no copying of data, and therefore should be used only
  when the source and destination files are in the same directory.
  <tt>fmove</tt> and <tt>fmovedel</tt> are not atomic, but will work even when
  the source and destination directory lie in different disk partitions (in
  which case the contents of the source file has to be physically copied to the
  destination).</p>
<a id="_fmove"></a>
<a id="_fmovedel"></a>
<a id="_fcopydel"></a>
<a id="_fcopy"></a>
<pre>
rcode = <span class=
"fcndef">_fcopy</span> [&#39;filename1&#39;, &#39;filename2&#39;]
rcode = <span class=
"fcndef">_fcopydel</span> [&#39;filename1&#39;, &#39;filename2&#39;]
rcode = <span class=
"fcndef">_fmove</span> [&#39;filename1&#39;, &#39;filename2&#39;]
rcode = <span class=
"fcndef">_fmovedel</span> [&#39;filename1&#39;, &#39;filename2&#39;]
</pre>

<p>When prefixed with an underscore, the functions always return a completion
  code, even on failure.  If <tt>&#39;filename2&#39;</tt> does not exist,
  the functions return -1 on failure and 0 on success. If
  <tt>&#39;filename2&#39;</tt> does exist, the functions return 1. In that
  case, functions <tt>_fcopy</tt> and <tt>_fmove</tt> fail and leave the file
  intact, while functions <tt>_fcopydel</tt> and <tt>_fmovedel</tt> delete it
  and replace it with file <tt>&#39;filename1&#39;</tt>.</p>
<a id="fseek"></a>
<hr noshade="noshade" />

<pre>
file_number = <span class="fcndef">fseek</span> [ file_number, byte_position ]
</pre>

<p>Positions the current read/write pointer in the file specified by
  <tt>file_number</tt> immediately after <tt>byte_position</tt>, which is the
  number of bytes from the beginning of the file. <tt>byte_position</tt> zero
  is the start of the file. The file must be open. If <tt>file_number</tt>
  refers to a gzip stream, <tt>byte_position</tt> is taken to refer to the
  position in the uncompressed data.</p>

<p>In the following example, a file designated by <tt>file_num</tt>, in a
  given format, is read beginning at byte 11:</p>

<pre class="code">
svl&gt; fread [fseek [file_num, 10], format]
</pre>
<a id="ftell"></a>
<hr noshade="noshade" />

<pre>
pos = <span class="fcndef">ftell</span> file_number
</pre>

<p>Returns the position of the current read/write pointer in the open file
  specified by <tt>file_number</tt>. If this refers to a gzip stream (returned
  by <a href="fopenetc.htm" class="svl">fopenrz</a>), the position is that in
  the uncompressed data.</p>

<p>To read with a specified format, after skipping 3 bytes:</p>

<pre class="code">
svl&gt; fread [fseek [file_num, ftell file_num + 3], format]
</pre>
<a id="fwriteable"></a>
<hr noshade="noshade" />

<pre>
<span class="fcndef">fwriteable</span> &#39;pathname&#39;
</pre>

<p>Returns 1 if the pathname refers to a writeable file and 0 otherwise.
<h1>See Also</h1>
<table class="functionList">
  <tr>
    <td colspan="3"><a href="introio.htm">I/O Functions</a></td>
  </tr>
  <tr>
    <td><a href="fopenetc.htm">fclose</a><br />
    <a href="fopenetc.htm">fflush</a><br />
    <a href="fopenetc.htm">fopen</a><br />
    <a href="fopenetc.htm">fopenr</a><br />
    <a href="fopenetc.htm">fopenw</a></td>
    <td><a href="freadetc.htm">fread</a><br />
    <a href="freadb.htm">freadb</a><br />
    <a href="freadetc.htm">fwrite</a><br />
    <a href="freadb.htm">fwriteb</a></td>
    <td><a href="time.htm">time</a><br />
    <a href="cd.htm">cd</a><br />
    <a href="time.htm">clock_to_timevec</a><br />
    <a href="time.htm">clock_to_timeYMD</a></td>
  </tr>
</table><!-- START MOE_FOOTER -->
<div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

