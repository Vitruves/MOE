<!DOCTYPE html>
<html>

<!--
!!    MOE On-Line Manuals
!!    COPYRIGHT (C) CHEMICAL COMPUTING GROUP ULC.  ALL RIGHTS RESERVED.
!!-->
<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="keywords:" />
  <meta name="keywords" content="functions: task_send" />
  <meta name="keywords" content="functions: task_receive" />
  <meta name="keywords" content="functions: task_reply" />
  <title>SVL Task Communication Functions</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    SVL Task Communication Functions
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<pre>
    rmsg = <a class="fcnlink" href=
"#task_send">task_send</a> [rtask, smsg, timeout]
    [stask, smsg] = <a class="fcnlink" href=
"#task_receive">task_receive</a> timeout
    <a class="fcnlink" href="#task_reply">task_reply</a> [stask, rmsg]
</pre>

<h1>Description</h1>
<a id="task_send"></a>
<hr noshade="noshade" />

<pre>rmsg = <span class="fcndef">task_send</span> [rtask, smsg]
rmsg = <span class="fcndef">task_send</span> [rtask, smsg, timeout]
</pre>

<p>Function <tt>task_send</tt> sends message <tt>smsg</tt> to the receiving
  task <tt>rtask</tt>. The calling task will block until the receiving task
  replies. The function returns the value of the reply.</p>
  <ul>
    <li>The timer value is optional. If the timeout is specified and expires
    before the receiving task replies, the calling task will unblock and the
    function will return&nbsp;<tt>[]</tt>.</li>
    <li>If the receiving task is destroyed before it replies, the calling task
    will unblock and the function will return&nbsp;<tt>[]</tt>.</li>
    <li>If receiving task is already waiting for the calling task, both tasks
    will be blocked, waiting for each other until a timeout expires or one of
    them is destroyed. If there is no timeout to unblock the tasks, this
    condition is called a <i>deadlock</i>. There is no protection against
    deadlock.</li>
    <li>If <tt>rtask</tt> is&nbsp;-1, the receiving task and the calling task
    are the same. In this case, the task will unblock only if the timeout
    expires. If the timeout is not specified, the task will be permanently
    blocked. If <tt>rtask</tt> is&nbsp;0, the function (immediately)
    returns&nbsp;<tt>[]</tt>. If <tt>rtask</tt> refers to a nonexistent task,
    the function reports an error.</li>
  </ul>
<a id="task_receive"></a>
<hr noshade="noshade" />

<pre>[stask, smsg] = <span class="fcndef">task_receive</span> []
[stask, smsg] = <span class="fcndef">task_receive</span> timeout
</pre>

<p>Function <tt>task_receive</tt> returns a message sent to it by another
  using function <tt>task_send</tt>. The function returns the sending task
  <tt>stask</tt> and the received message <tt>smsg</tt>.</p>
  <ul>
    <li>If the message has not yet been sent, the calling task will block until
    the message is received.</li>
    <li>If the message was sent and is waiting to be received, the calling task
    will return immediately.</li>
    <li>If there are several messages waiting to be received, only the first
    (i.e. the oldest) message will be received.</li>
    <li>The timer value is optional. If the timeout specified and expires
    before any message is received, the calling task will unblock and the
    function will return&nbsp;<tt>[]</tt>.</li>
    <li>Receiving a message with <tt>task_receive</tt> will <i>not</i> unblock
    the sending task. The sending task will unblock only when the calling task
    sends it a reply with <tt>task_reply</tt>.</li>
    <li>There is no protection against deadlock.</li>
    <li>If <tt>stask</tt> is&nbsp;-1, the sending task and the calling task are
    the same. In this case, the task will unblock only if the timeout expires.
    If the timeout is not specified, the task will be permanently blocked. If
    <tt>stask</tt> is&nbsp;0, the function (immediately)
    returns&nbsp;<tt>[]</tt>. If <tt>stask</tt> refers to a nonexistent task,
    the function reports an error.</li>
  </ul>
<a id="task_reply"></a>
<hr noshade="noshade" />

<pre><span class="fcndef">task_reply</span> [stask, rmsg]
</pre>

<p>Function <tt>task_reply</tt> assumes that a message has been sent by the
  sending task <tt>stask</tt>, which is now awaiting a reply. The function
  delivers the reply message <tt>rmsg</tt> to the sending task and unblocks the
  sending task.</p>
  <ul>
    <li>If <tt>stask</tt> refers to a nonexistent task, the function simply
    discards the reply; it does <i>not</i> report an error.</li>
    <li>If the sending task exists but is not currently waiting for the reply,
    the function also discards the reply.</li>
  </ul>

<p><i>Note:</i> If the sending task exists and is awaiting the reply, the
  execution of the calling task will be interrupted to allow the sending task
  to be executed (subject to its priority level).</p>

<h1>See Also</h1>
  <table class="functionList">
    <tr>
      <td valign="top"><a href="tskcall.htm">task_call</a><br />
      <a href="tskcall.htm">task_eval</a><br />
      <a href="tskcall.htm">task_run</a><br />
      <a href="tskcall.htm">task_script</a></td>
    </tr>
  </table>

<p><a href="introcomm.htm">SVL Task Communication Functions</a></p>
  <!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

