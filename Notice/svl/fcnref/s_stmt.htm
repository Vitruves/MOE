<!DOCTYPE html>
<html>

<!--
!!    MOE On-Line Manuals
!!    COPYRIGHT (C) CHEMICAL COMPUTING GROUP ULC.  ALL RIGHTS RESERVED.
!!-->
<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content=
  "SVL: break, continue, for, while, loop, until, endloop" />
  <meta name="keywords" content="SVL: if, elseif, else" />
  <meta name="keywords" content="SVL:syntax: SVL Statements" />
  <title>SVL Statements</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    SVL Statements
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<table class="noborder left">
  <tr>
    <td><i>statement</i></td>
    <td>: <i>expression</i> <tt>;</tt><br />
    : <tt>print</tt> <i>expression</i> <tt>;</tt><br />
    : <tt>if</tt> <i>expression</i> <tt>then</tt> <b>{</b> <tt>elseif</tt>
    <i>statements</i> <b>}</b>* <b>{</b> <tt>else</tt> <i>statements</i>
    <b>}</b> <tt>endif</tt><br />
    : <b>{</b> <tt>for</tt> <i>for</i> <b>}</b> <b>{</b> <tt>while</tt>
    <i>expression</i> <b>}</b>* <tt>loop</tt> <i>statements</i> <b>{</b>
    <tt>until</tt> <i>expression</i> <b>}</b>* <tt>endloop</tt><br />
    : <tt>break ;</tt><br />
    : <tt>continue ;</tt></td>
  </tr>
  <tr>
    <td><i>for</i></td>
    <td>: <i>expression</i><br />
    : <i>lvalue</i> <tt>=</tt> <i>expression</i> <tt>,</tt>
    <i>expression</i> <b>{</b> <tt>,</tt> <i>expression</i> <b>}</b><br />
    : <i>lvalue</i> <tt>in</tt> <i>expression</i></td>
  </tr>
  <tr>
    <td><i>statements</i></td>
    <td>: <b>{</b> <i>statement</i> <b>}</b>*</td>
  </tr>
</table>

<h1>Description</h1>

<p>SVL statements are the primary programming construct. Statements can be
  entered at an SVL command line interpreter or incorporated into definitions
  of functions. Statements serve to effect calculations, control program
  execution and iteration in loops. Control flow statements dictate the order
  in which computations are done. By default, statements are executed linearly,
  in the order in which they appear in a program. Conditional execution,
  looping and jump statements alter the flow of a program, allowing certain
  pieces of code to be bypassed, and others to be repeated.</p>

<p>The following notation is used to describe SVL syntax and syntactic
  categories. The name of a category is printed in italics, e.g. <i>lvalue</i>.
  SVL keywords and symbols are printed in teletype, e.g. <tt>loop</tt> or
  <tt>[]</tt>. Each category is defined as a list of syntactic patterns
  composed of SVL keywords or symbols and of names of other categories (like
  BNF notation); for example, <i>lvalue</i> : <i>identifier</i> <tt>[</tt>
  <i>expression</i> <tt>]</tt> means &quot;an lvalue can be an identifier
  followed by a bracketed expression&quot;. Bold braces are used to apply a
  special rule to the part of the pattern inside the braces:</p>
<ul>
  <li><b>{</b>...<b>}</b> specifies an optional pattern, e.g. <span class=
  "nobr"><b>{</b><em>for</em><b>}</b> <tt>loop</tt></span></li>
  <li><b>{</b>...<b>}<sup>*</sup></b> specifies a sequence of zero or more
  repetitions, e.g. <span class=
  "nobr"><b>{</b><em>while</em><b>}<sup>*</sup></b> <tt>loop</tt></span></li>
  <li><b>{</b>...<b>}<sup>+</sup></b> specifies a sequence of one or more
  repetitions, e.g. <span class=
  "nobr"><b>{</b><em>digit</em><b>}<sup>*</sup></b></span></li>
  <li><b>{</b>...<b>|</b>...<b>}</b> and
  <b>{</b>...<b>|</b>...<b>}<sup>1</sup></b> specify (optional and
  compulsory) alternative patterns, e.g. <span class=
  "nobr"><b>{</b><tt>local</tt> <b>|</b> <tt>global</tt><b>}</b>
  <tt>function</tt></span></li>
</ul>

<p><b>Expression and Print Statements</b>. An <i>expression</i> followed by
  semicolon is a statement. For example,</p>

<pre class="code">
x = y + z;
</pre>

<p>is a statement that stores the result of summing the vectors <tt>y</tt>
  and <tt>z</tt> into the variable <tt>x</tt>. An expression statement preceded
  by the keyword <tt>print</tt> will cause the resulting value of the
  expression to be printed to the output terminal. For example,</p>

<pre class="code">
<b>print</b> sqrt 2;
</pre>

<p>will print an approximation to the square root of two to the output
  terminal. At the SVL command line, the trailing semicolon can be omitted.</p>

<p><b>Conditional Execution</b>. The <tt>if</tt> statement causes execution
  of at most one of the contained <i>statements</i> blocks. The <tt>if</tt>
  statement is used to make a multi-way decision. A piece of code is executed
  only if a certain condition is satisfied. The optional <tt>elseif</tt> and
  <tt>else</tt> branches of the <tt>if</tt> statement allow for alternative
  routes of possibly conditioned execution in the event that earlier conditions
  are not met. The formal syntax is</p>
<p class="blockquote">
  <tt>if</tt> <i>expression</i> <tt>then</tt> <b>{</b> <tt>elseif</tt>
  <i>statements</i> <b>}</b>* <b>{</b> <tt>else</tt> <i>statements</i>
  <b>}</b> <tt>endif</tt><br />
</p>

<p>There is no limit on the number of <tt>elseif</tt> constructs that may be
  present. The <tt>if</tt>, <tt>then</tt> and <tt>endif</tt> keywords must all
  be present. No terminating semi-colon is required after the
  <tt>endif</tt>.</p>

<p>All of the <i>expression</i> constructs following <tt>if</tt> and
  <tt>elseif</tt> must evaluate to a numeric scalar. If they do not, a run-time
  error will result. If the scalar value of such an <i>expression</i> is
  non-zero then the <i>expression</i> is considered to be the value
  &quot;true&quot; otherwise it has the value &quot;false&quot;. Whenever an
  <i>expression</i> in the <tt>if</tt> statement evaluates to &quot;true&quot;
  the <i>statements</i> block immediately following the next <tt>then</tt>
  keyword is executed, following which, execution jumps immediately after the
  <tt>endif</tt> keyword (skipping all other <i>statements</i> blocks contained
  in the entire <tt>if</tt> statement. If none of the <i>expression</i>
  constructs evaluate to &quot;true&quot; then the <i>statements</i> block
  after the <tt>else</tt> keyword is executed (if present) and execution then
  jumps to immediately after the <tt>endif</tt> keyword.</p>

<p>For example, suppose that the variable <tt>x</tt> contains some value,
  then the <tt>if</tt> statement</p>

<pre class="code">
<b>if</b> x &gt;= 100 <b>then</b>
    print &#39;more than two digits&#39;;
<b>elseif</b> x &gt;= 10 <b>then</b>
    print &#39;two digits&#39;;
<b>elseif</b> x &gt;= 0 <b>then</b>
    print &#39;one digit&#39;;
<b>else</b>
    print &#39;negative&#39;;
<b>endif</b>
</pre>

<p>will print exactly one token: the token <tt>&#39;more than two
  digits&#39;</tt> if <tt>x</tt> has a value greater than or equal to 100; the
  token <tt>&#39;two digits&#39;</tt> if <tt>x</tt> has a value less than 100
  and greater than or equal to 10; the token <tt>&#39;one digit&#39;</tt> if
  <tt>x</tt> has a value greater than or equal to 0 and less than 10; and the
  token <tt>&#39;negative&#39;</tt> otherwise.</p>

<p>If <tt>y</tt> is a numeric vector of scalars then the <tt>if</tt>
  statement</p>

<pre class="code">
<b>if</b> add y &lt;&gt; 0 <b>then</b>
    y = y / add y;
    print &#39;normalized&#39;;
<b>endif</b>
</pre>

<p>will divide each element of <tt>y</tt> and print the token
  <tt>&#39;normalized&#39;</tt> provided that the sum of the elements in
  <tt>y</tt> is non-zero. Note that if the expression <tt>add y &lt;&gt; 0</tt>
  evaluated to a value that is not a numeric scalar (e.g., a vector) then a
  run-time error would result.</p>

<p><b>Loop Statements</b>. Repeating a block of statements is effected with
  the <tt>loop</tt> keyword. Loop termination tests may be present at both the
  start and end of a loop; these are indicated by the presence of the
  <tt>for</tt>, <tt>while</tt> and <tt>until</tt> keywords (all of which are
  optional). The simplest loop has the form <tt>loop</tt> <i>statements</i>
  <tt>endloop</tt>. The <i>statements</i> block is repeatedly executed (an
  infinite loop). For example, the code</p>

<pre class="code">
<b>loop</b>
    print randU 1;
<b>endloop</b>
</pre>

<p>will print uniformly distributed random numbers to the output terminal
  indefinitely. Zero or more <tt>while</tt> <i>expression</i> constructs can be
  placed before the <tt>loop</tt> keyword. Each such <tt>while</tt> construct
  will terminate execution of the loop when the given <i>expression</i>
  evaluates to &quot;false&quot; (and the others skipped). The definition of
  how &quot;true&quot; and &quot;false&quot; are calculated is given above in
  the section on Conditional Execution. Each such <i>expression</i> is
  evaluated at the start of each iteration of the loop in the order presented.
  For example, the following code evaluates the first order Bessel function
  J0:</p>

<pre class="code">
local J0 = 1, term = 1, i = 0;
local xx = sqr (x/2);

<b>while</b> (i = inc i) &lt; MAX_ITERATIONS
<b>while</b> abs term &gt; EPSILON
<b>loop</b>
    term = -term * xx / sqr i;
    J0 = J0 + term;
<b>endloop</b>
</pre>

<p>Note that the presence of two <tt>while</tt> keywords does <i>not</i>
  indicate two nested loops; there is only one loop but it has two termination
  conditions that are evaluated at the start of each iteration.</p>

<p>Zero or more <tt>until</tt> <i>expression</i> constructs can be placed
  before the <tt>endloop</tt> keyword. Each such <tt>until</tt> construct will
  terminate execution of the loop when the given <i>expression</i> evaluates to
  &quot;true&quot; (and the others skipped). Each such <i>expression</i> is
  evaluated at the end of each iteration of the loop in the order presented.
  For example, the following code evaluates the first order modified Bessel
  function IO(x).</p>

<pre class="code">
local I0 = 1, term = 1, i = 1;
local xx = sqr (x/2), fac = xx;

<b>loop</b>
    local fact = xx / sqr (i=inc i);
    term = term * fac;
    I0 = I0 + term;

    if i &gt;= 2 then fac = fact; endif
    local bd = term / (sgn [1,(1-fact)] * maxE [abs(1-fact),EPSILON]);
<b>until</b> i &gt; MAX_ITERATIONS
<b>until</b> abs bd &lt; EPSILON
<b>endloop</b>
</pre>

<p>The presence of two <tt>until</tt> keywords does <i>not</i> indicate two
  nested loops.a There is only one loop but it has two termination conditions
  that are evaluated at the end of each iteration.</p>

<p>At most one <tt>for</tt> construct can appear in a loop and, if present,
  it must be placed prior to any <tt>while</tt> constructs. The <tt>for</tt>
  loop has an explicit counter associated with it. Unlike the <tt>while</tt>
  and <tt>until</tt> conditions, the data related to the counter in the
  <tt>for</tt> is evaluated just once (prior to the start of the loop). The
  simplest <tt>for</tt> loop form is <tt>for</tt> <i>expression</i>. The
  expression must evaluate to a numeric scalar (otherwise a run-time error will
  result). This value is then rounded down to the nearest integer and the loop
  executed that many times. For example,</p>

<pre class="code">
<b>for</b> 10 <b>loop</b>
    print randU 1;
<b>endloop</b>
</pre>

<p>will print out exactly ten uniformly distributed random number in the
  interval [0,1). This loop is equivalent to the following code:</p>

<pre class="code">
i = 10;
<b>while</b> i &gt;= 1 <b>loop</b>
    print randU 1;
    i = i - 1;
<b>endloop</b>
</pre>

<p>Note that the value of the loop counter is evaluated prior to the loop.
  The <tt>for</tt> <i>lvalue</i> <tt>in</tt> <i>expression</i> form of the
  <tt>for</tt> loop derives its loop limits from the length of the value
  supplied <i>expression</i>. The code</p>

<pre class="code">
<b>for</b> x <b>in</b> list <b>loop</b>
    print x;
<b>endloop</b>
</pre>

<p>is equivalent to</p>

<pre class="code">
e = list;
i = 1;
<b>while</b> i &lt;= length e <b>loop</b>
    x = e(i);
    print x;
    i = i + 1;
<b>endloop</b>
</pre>

<p>The values of <tt>e</tt> and <tt>i</tt> are not available in the loop.
  Notice that the expression (in this case <tt>list</tt>) is evaluated only
  once prior to the loop. The <i>lvalue</i> can be any expression that is legal
  on the left hand side of an assignment operator. The previous example of code
  equivalence still applies: substitute <tt>x</tt> (symbolically) with the
  <i>lvalue</i> and substitute <tt>list</tt> with the <i>expression</i>. For
  example,</p>

<pre class="code">
<b>for</b> [a,b] in [ &quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot; ] <b>loop</b>
    print [b,a];
<b>endloop</b>
</pre>

<p>will print</p>

<pre class="code">
&quot;ba&quot;
&quot;dc&quot;
&quot;fe&quot;
</pre>

<p>to the output terminal. The <tt>for</tt> <i>lvalue</i> <tt>=</tt>
  <i>expression</i> <tt>,</tt> <i>expression</i> <tt>,</tt> <i>expression</i>
  form of the for loop is used to directly set the limits of the loop counter
  as well as making the loop counter value available in the body of the loop.
  The third expression is optional. This is analogous to the Fortran do loop.
  All three expression must evaluate to a numeric scalar (otherwise a run-tim
  error results). The first expression is the start value of the counter. The
  second expression is the end value of the counter. The third expression is
  the increment value of the counter; if the third expression is omitted then 1
  is used. All three expressions can be negative or event non-integral. For
  example,</p>

<pre class="code">
<b>for</b> a <b>=</b> 10.5, 6.5, -1 <b>loop</b>
    print a;
<b>endloop</b>
</pre>

<p>produces the result</p>

<pre class="code">
10.5
9.5
8.5
7.5
6.5
</pre>

<p>All three expressions are evaluated once prior to the loop. The code</p>

<pre class="code">
<b>for</b> x <b>=</b> start<b>,</b> end<b>,</b> incr <b>loop</b>
    ....
<b>endloop</b>
</pre>

<p>is equivalent to</p>

<pre class="code">
x = start;
i = incr;
n = floor ((end + i - x) / i);

<b>for</b> n <b>loop</b>
    ....
    x = x + i;
<b>endloop</b>
</pre>

<p>Note: the value of <i>lvalue</i> (in this case <tt>x</tt>) after the
  <tt>endloop</tt> is not defined.</p>

<p><b>Jump Statements</b>. A jump statement causes program execution to
  unconditionally transfer to another point in the program. There are two jump
  statements indicated by the keywords <tt>break</tt> or <tt>continue</tt>
  (followed by a semicolon). Normally, a <tt>loop</tt> statement terminates
  when one of the loop termination conditions is encountered (i.e., a
  <tt>for</tt> limit, or a <tt>while</tt> condition, or an <tt>until</tt>
  condition is satisfied). However, it may be desirable to truncate the entire
  iteration or to truncate the current iteration. The <tt>break</tt> and
  <tt>continue</tt> statements are used to do this.</p>

<p>The <tt>break</tt> statement causes unconditional transfer of program
  execution to the point immediately following the next <tt>endloop</tt>
  keyword. In other words, the entire <tt>loop</tt> construct is terminated. It
  is a syntax error to use the <tt>break</tt> statement outside of a
  <tt>loop</tt> ... <tt>endloop</tt> statement. The <tt>while</tt> and
  <tt>until</tt> conditions are really just shorthands for <tt>break</tt>
  constructs. For example, the loop</p>

<pre class="code">
while x &gt; 10 loop
    ....
endloop
</pre>

<p>is the same as</p>

<pre class="code">
loop
    if not (x &gt; 10) then
        <b>break</b>;
    endif
    ....
endloop
</pre>

<p>The <tt>continue</tt> statement causes unconditional transfer of program
  execution to the point immediately after the <i>statements</i> block between
  the <tt>loop</tt> and <tt>endloop</tt> keywords that surround it. In other
  words, the remaining statements in the <i>statements</i> block are skipped
  and the next iteration is started (after first executing any <tt>until</tt>
  conditions). It is a syntax error to use the <tt>continue</tt> statement
  outside of a <tt>loop</tt> ... <tt>endloop</tt> statement.</p>

<h1>See Also</h1>

<p><a href="s_lex.htm">SVL Lexical Analysis</a><br />
  <a href="s_expr.htm">SVL Expressions</a><br />
  <a href="s_decl.htm">SVL Declarations</a> </p>
<!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

