<!DOCTYPE html>
<html>

<!--
!!    MOE On-Line Manuals
!!    COPYRIGHT (C) CHEMICAL COMPUTING GROUP ULC.  ALL RIGHTS RESERVED.
!!-->
<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="keywords:" />
  <meta name="keywords" content="functions: sync_close" />
  <meta name="keywords" content="functions: sync_key" />
  <meta name="keywords" content="functions: sync_keylist" />
  <meta name="keywords" content="functions: sync_name" />
  <meta name="keywords" content="functions: sync_open" />
  <meta name="keywords" content="functions: sync_ref" />
  <meta name="keywords" content="functions: sync_taskref" />
  <meta name="keywords" content="functions: sync_update" />
  <meta name="keywords" content="functions: sync_wait" />
  <meta name="keywords" content="functions: sync_poll" />
  <meta name="keywords" content="functions: sync_diff" />
  <title>SVL Task Synchronization Functions</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    SVL Task Synchronization Functions
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<pre>
    key = <a class="fcnlink" href="#sync_open">sync_open</a> [];
    key = <a class="fcnlink" href="#sync_open">sync_open</a> &#39;name&#39;;
    key = <a class="fcnlink" href="#sync_open">sync_open</a> key;

    <a class="fcnlink" href="#sync_close">sync_close</a> key;

    key = <a class="fcnlink" href="#sync_key">sync_key</a> key_or_name;
    name = <a class="fcnlink" href="#sync_name">sync_name</a> key_or_name;
    keylist = <a class="fcnlink" href="#sync_keylist">sync_keylist</a> []

    count = <a class="fcnlink" href="#sync_ref">sync_ref</a> key
    count = <a class="fcnlink" href="#sync_taskref">sync_taskref</a> key

    sn = <a class="fcnlink" href="#sync_update">sync_update</a> [key, val];
    [sn, val] = <a class="fcnlink" href=
"#sync_wait">sync_wait</a> [key, sn, timeout];
    [sn, val] = <a class="fcnlink" href="#sync_poll">sync_poll</a> key;
    val = <a class="fcnlink" href="#sync_diff">sync_diff</a> [key, sn];
</pre>

<h1>Description</h1>

<p>A <i>synchronization object</i> is a programmatic tool that allows tasks
  to notify the rest of the system about changes in their state without
  blocking the execution of the notifying task.</p>

<p>A synchronization object is associated with a serial number that increases
  with every update from the notifying task(s). A synchronizing task can then
  block and wait until the serial number of the object increases beyond a given
  threshold - and a new update of the monitored state becomes available.</p>
<a id="sync_open"></a>
<hr noshade="noshade" />

<pre>key = <span class="fcndef">sync_open</span> []
key = <span class="fcndef">sync_open</span> &#39;name&#39;
key = <span class="fcndef">sync_open</span> key
</pre>

<p>Function <tt>sync_open</tt> with an empty argument creates a new
  synchronization object and returns its key. If the argument is a key of an
  existing object or a token name of an existing object, the function
  duplicates the object and returns the key of the duplicate. If the argument
  is a token name and no object of such a name exists, the function creates a
  new object of the given name.</p>

<p>The object will remain available for the calling task until the function
  <tt>sync_close</tt> is called by the same task. For each call to
  <tt>sync_open</tt> there must be a corresponding call to <tt>sync_close</tt>
  in the same task.</p>

<p>Each synchronization object stores its serial number and its value. The
  serial number is initialized to zero and then increased with each
  <tt>sync_update</tt>. The value is initialized to <tt>[]</tt> and then reset
  with each <tt>sync_update</tt>.</p>
<a id="sync_close"></a>
<hr noshade="noshade" />

<pre><span class="fcndef">sync_close</span> key
</pre>

<p>Function <tt>sync_close</tt> closes the given synchronization object. The
  argument may be a nested vector. The function ignores keys that refer to
  non-existing objects.</p>
<a id="sync_update"></a>
<hr noshade="noshade" />

<pre>sn = <span class="fcndef">sync_update</span> [key, val]
</pre>

<p>Function <tt>sync_update</tt> increments and returns the serial number of
  the given synchronization object. It also resets the value of the object to
  the value of the second argument.</p>
<a id="sync_poll"></a>
<hr noshade="noshade" />

<pre>[sn, val] = <span class="fcndef">sync_poll</span> key
</pre>

<p>Function <tt>sync_poll</tt> returns the serial number and the value of the
  given synchronization object.</p>
<a id="sync_wait"></a>
<hr noshade="noshade" />

<pre>[sn, val] = <span class="fcndef">sync_wait</span> [key, sn, timeout]
</pre>

<p>Function <tt>sync_wait</tt> blocks the calling tasks until the serial
  number of the given synchronization object, <tt>key</tt>, exceeds the given
  value, <tt>sn</tt>. The function then returns the value and the serial number
  of the synchronization object. If the supplied serial number is smaller that
  the object&#39;s serial number, the function returns immediately.</p>
<a id="sync_diff"></a>
<hr noshade="noshade" />

<pre>sn_diff = <span class="fcndef">sync_diff</span> [key, sn]
</pre>

<p>Function <tt>sync_diff</tt> returns the difference between the serial
  number of the given synchronization object, <tt>key</tt>, and the supplied
  serial number, <tt>sn</tt>.</p>

<p>The function can be used to determine whether or not a subsequent call to
  <tt>sync_wait</tt> would block the task. If the return value is zero or
  negative, the task would be blocked.</p>
<a id="sync_key"></a>
<hr noshade="noshade" />

<pre>key = <span class="fcndef">sync_key</span> key
key = <span class="fcndef">sync_key</span> &#39;name&#39;
</pre>

<p>Returns the key of the given object. If the object does not exist, the
  function returns&nbsp;0. The argument may be a nested vector.</p>
<a id="sync_name"></a>
<hr noshade="noshade" />

<pre>name = <span class="fcndef">sync_name</span> key
name = <span class="fcndef">sync_name</span> &#39;name&#39;
</pre>

<p>Returns the name of the given sync. If the sync does not exist, the
  function returns <tt>&#39;&#39;</tt> (empty token). The argument may be a
  nested vector.</p>
<a id="sync_keylist"></a>
<hr noshade="noshade" />

<pre>keylist = <span class="fcndef">sync_keylist</span> []
</pre>

<p>Returns the list of keys of all currently open object objects.</p>
<a id="sync_taskref"></a>
<a id="sync_ref"></a>
<hr noshade="noshade" />

<pre>
count = <span class="fcndef">sync_ref</span> [ key1, key2, ...]
count = <span class="fcndef">sync_taskref</span> [ key1, key2, ...]
</pre>

<p>Each synchronization object has associated with it a reference count. When
  the object is opened or reopened with <tt>sync_open</tt>, the reference count
  is increased. When the object is closed with <tt>sync_close</tt> or when the
  opening task is destroyed, the reference count is decreased.</p>

<p>For each <tt>key</tt> specified, function <tt>sync_ref</tt> returns the
  reference count of the corresponding synchronization object or&nbsp;0 if no
  such object exists. Function <tt>sync_taskref</tt> returns only the reference
  count associated with <tt>sync_open</tt>/<tt>sync_close</tt> calls executed
  by the calling task.</p>

<h1>See Also</h1>
  <table class="functionList">
    <tr>
      <td valign="top"><a href="tasksend.htm">task_send</a><br />
      <a href="tasksend.htm">task_receive</a><br />
      <a href="tasksend.htm">task_reply</a><br />
      <br />
      <a href="mutex.htm">mutex_open</a><br />
      <a href="mutex.htm">mutex_close</a><br />
      <a href="mutex.htm">mutex_lock</a><br />
      <a href="mutex.htm">mutex_unlock</a><br /></td>
    </tr>
  </table>

<p><a href="introcomm.htm">SVL Task Communication Functions</a></p>
  <!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

