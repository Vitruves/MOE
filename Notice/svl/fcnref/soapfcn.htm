<!DOCTYPE html>
<html>

<!--
!!    MOE On-Line Manuals
!!    COPYRIGHT (C) CHEMICAL COMPUTING GROUP ULC.  ALL RIGHTS RESERVED.
!!-->
<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="keywords: SOAP" />
  <meta name="keywords" content="functions: soap_*" />
  <title>SOAP Interface Functions</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    SOAP Interface Functions
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<pre>
    soap_spec_{NAME} [] = [input, output, option];
    result = soap_{NAME} [arg, opt]
</pre>

<h1>Description</h1>

<p>The MOE/web application server can be used to expose SVL functions to
  third party applications using SOAP (Simple Object Access Protocol). SVL
  functions which are loaded by the server, and start with the prefix
  <tt>soap_</tt>, are made available via the webservice protocol.</p>

<p>To write an SVL function and make it available via SOAP, the following
  steps are required:</p>
  <ol>
    <li>Determine the function name, input arguments and output arguments.</li>
    <li>Write the SOAP interface function.</li>
    <li>Restart the MOE/web application server, and instruct it to load the
    file which provides the interface function.</li>
  </ol>

<p>The SOAP interface function is written in SVL. The web service protocol
  interchange is handled entirely by the server. In order to conform to web
  standards, however, the definition for the SVL function is tightly
  constrained, in order to ensure compatibility with all conformable third
  party applications.</p>

<h1>Function Specification</h1>

<p>There are two SVL functions required for each SOAP interface function.
  Both functions must be global. One of the functions, which defines the SOAP
  interface specification (input, output, ...), must start with the prefix
  <tt>soap_spec_</tt>. The other function must have the prefix <tt>soap_</tt>
  and is used as the interface name. For example, to implement a SOAP interface
  function called &quot;DoSomething&quot;, the two functions would look like
  this:</p>

<pre>
    global function soap_spec_DoSomething [] = [input, output, option];

    global function soap_DoSomething [arg, opt]
        ...
        return ret;
    endfunction
</pre>

<h2>Register function soap_spec_*</h2>

<p>When the MOE/web application server is started, every global SVL function
  that starts with the <tt>soap_spec_</tt> prefix will be called for
  registration, in order to ascertain which SOAP functions are available via
  the webservice.</p>

<p>The form of the function is:</p>

<pre>
    soap_spec_{NAME} [] = [input, output, option]
</pre>

<p>The function is required to describe itself using three return values:</p>
  <div class="indent">
    <dl>
      <dt><tt>input</tt></dt>
      <dd>

<p>A tagged vector containing a tag for each of the input data items.
        The value associated with each tag is itself a tagged vector,
        containing the following attribute-value pairs:</p>
        <ul>
          <li><tt>type</tt>: input data type (token)</li>
          <li><tt>title</tt>: title of the input data (token)</li>
          <li><tt>description</tt>: full description of the input data
          (token)</li>
          <li><tt>default</tt>: the default value; if set, it also indicates
          that this input item is optional.<br />
          <b>NOTE</b>: the default attribute can only be used for scalar types:
          byte, int, real, token, boolean, url, url.path, url.fnum,
          url.content.<br />
          All other types of data cannot have a default defined, and they are
          implicitly optional. They need to be checked in the <a href=
          "#execSoap">soap function</a> against null values and be given
          defaults when necessary.</li>
        </ul>
      </dd>
      <dd>

<p>For example:</p>

<pre>
    [ thing1: [type: &#39;int&#39;,    description: &#39;First thing&#39; ],
      thing2: [type: &#39;string&#39;, description: &#39;Second thing&#39;] ]
</pre>
      </dd>
      <dt><tt>output</tt></dt>
      <dd>

<p>A tagged vector containing a tag for each of the output data items.
        The value associated with each tag is itself a tagged vector,
        containing the following attribute-value pairs:</p>
        <ul>
          <li><tt>type</tt>: output data type (token)</li>
          <li><tt>title</tt>: title of the output data (token)</li>
          <li><tt>description</tt>: full description of the output data
          (token)</li>
        </ul>
      </dd>
      <dt><tt>option</tt></dt>
      <dd>

<p>A tagged vector containing the following attribute-value pairs:</p>
        <ul>
          <li><tt>title</tt>: The title of the SOAP function. (token)</li>
          <li><tt>description</tt>: A full description the SOAP function.
          (token)</li>
        </ul>
      </dd>
    </dl>
  </div>

<p>The types for arguments and return values are specified by tokens, which
  must be selected from the following list:</p>
  <div class="indent">
    <dl>
      <dt><tt>byte</tt>, <tt>int</tt>, <tt>real</tt></dt>
      <dd>

<p>Primitive numeric types, where <tt>byte</tt> is an unsigned 8-bit
        integer, <tt>int</tt> is a 32-bit signed integer, and <tt>real</tt> is
        a double-precision floating point value. While SVL numeric types are
        interchangeable, client programs are directed to ensure that the types
        are cast as necessary.</p>
      </dd>
      <dt><tt>string</tt></dt>
      <dd>

<p>A primitive string representation, which is represented in SVL as a
        character vector (i.e. an SVL string, such as &quot;hello&quot;, rather
        than an SVL token, such as &#39;hello&#39;). The <tt>string</tt> type
        is now whitespace sensitive so that it can be used for multi-line data
        as well. <tt>text</tt> type is deprecated by this extension of
        <tt>string</tt> type.<br />
        <b>NOTE</b>: <tt>string</tt> type data cannot utilize the
        <tt>default</tt> attribute since an empty string is treated the same as
        data being missing. When a default is needed, use the <tt>token</tt>
        type instead.</p>
      </dd>
      <dt><tt>token</tt></dt>
      <dd>

<p>Similar to the <tt>string</tt> type, but it is represented in SVL as
        a token (such as &#39;hello&#39;).</p>
      </dd>
      <dt><tt>boolean</tt></dt>
      <dd>

<p>A flag, which is represented in SVL as an integer value of 0 or 1.
        External programs may cast the value to their own internal boolean
        type.</p>
      </dd>
      <dt><tt>url</tt></dt>
      <dd>

<p>A URL string, which is represented in SVL as a token and represented
        in a SOAP message under the XML schema data type <a href=
        "http://www.w3.org/TR/2004/PER-xmlschema-2-20040318/#anyURI">anyURI</a>.</p>
      </dd>
      <dt><tt>
<a id="url"></a>
url.path</tt></dt>
      <dd>

<p>Same as the <tt>url</tt> type, but it will be translated into a
        local file path by the MOE/web server when it is an input. If it is an
        output value, the server will treat it as a file path and map it into a
        MOE/web URL. See the <a href="#ComplexExample">example</a> below.</p>
      </dd>
      <dt><tt>url.fnum</tt></dt>
      <dd>

<p>This type can only be used for input. Similar to <tt>url.path</tt>,
        it causes the MOE/web server to download the source data from the input
        URL if it points to some remote resources (e.g. websites) and saves
        locally on the server. If the input URL points to an existing file on
        the server, then no downloading is needed. The server then replaces the
        input URL string with a read-only file handle.</p>
      </dd>
      <dt><tt>url.content</tt></dt>
      <dd>

<p>This type can only be used for input. Same as <tt>url.fnum</tt>, but
        it replaces the input URL string with the resource content instead. It
        is represented in SVL as an array of characters.</p>
      </dd>
      <dt><tt>file</tt></dt>
      <dd>

<p>A string value which in its SVL SOAP function is translated into, or
        interpreted as, a local file path (SVL token). For a SOAP function
        client, this value can be one of the following:</p>
        <ul>
          <li>URL: The data is a URL string.
            <ul>
              <li>On input, the client must provide the data&#39;s web address
              (its universal resource locator). The URL could point to a file
              stored on the MOE/web server or to some other resource, e.g. a
              website such as the RCSB.</li>
              <li>If the return data is to be returned using a URL, the data
              will be saved locally on the server, and its MOE/web URL returned
              to the client.</li>
            </ul>
          </li>
          <li>Base64 encoded data stream: The data is run-length 64-bit
          encoded, and the encoded data is transferred directly to or from the
          client. This kind of data encoding is needed when transferring binary
          data through XML.</li>
          <li>Raw data stream: The data is transferred directly to or from the
          client. When doing so, the data needs be specified within a <a href=
          "http://www.w3.org/TR/REC-xml/#sec-cdata-sect">CDATA section</a> to
          prevent XML from parsing the data content which may contain special
          characters, such as <tt>&#39;&lt;&#39;</tt> , <tt>&#39;&gt;&#39;</tt>
          and <tt>&#39;&amp;&#39;</tt>, that would otherwise be recognized as
          XML markup.</li>
        </ul>This type is introduced to give the client the flexibility of
        passing either stream data or a URL to the SOAP functions, and to
        specify whether to receive the output values in the form of a stream or
        a file (URL).

<p>Note that the actual content of the data – URL or stream – is
        transparent to the SOAP SVL function. Input arguments of type
        &#39;file&#39; will always be converted by the MOE/web framework into
        local files on the server; the path to these files will then become the
        input arguments actually passed to the soap_{name} function. In the
        same way, when returning output values, the soap_{name} function need
        only to return the path of the files into which it stored its output
        data, with MOE/web taking care of serving the right content to the
        client in accordance with what the client has requested.</p>

<p>The client can explicitly set the content of an argument (either
        input or output) of type &#39;file&#39;, as the MOE/web framework will
        automatically and silently add, for each such argument, a special
        &#39;Content&#39; input argument. For example, for an input argument
        called myArg, the MOE/web framework would automatically add an
        associated input argument called myArgContent. Similarly, for an output
        called out_myArg, the framework would also automatically add an
        associated output argument called out_myArgContent. The Content
        argument can have the following values: &#39;text&#39; (the default),
        &#39;base64&#39;, and &#39;url&#39;.</p>

<p><b>NOTE:</b> Do not overuse this &#39;file&#39; type. Only when the
        SOAP function cannot predict whether the input or output data will be
        large, it may consider applying the &#39;file&#39; type. Otherwise, use
        other types such as &#39;string&#39; or &#39;url.path&#39; instead.</p>
      </dd>
      <dt><tt>byteArray</tt></dt>
      <dd>

<p>A representation for an array of bytes. In SVL this type is an array
        of characters, but the SOAP/WSDL wrapping scheme uses base64 encoding,
        so it is safe to encode any kind of binary data within this type.</p>
      </dd>
      <dt><tt>intArray</tt>, <tt>realArray</tt>, <tt>booleanArray</tt>,
      <tt>stringArray</tt></dt>
      <dd>

<p>Flat vectors of the corresponding primitive types. Multidimensional
        arrays are not supported, nor are arrays with mixed types.</p>
      </dd>
    </dl>
  </div>

<h2>
<a id="execSoap">Execution function soap_*</a></h2>

<p>Each time an SVL SOAP interface function is called, the soap_{NAME}
  function is executed in the following way:</p>

<pre>
    result = soap_{NAME} [arg, opt]
</pre>

<p>The <tt>arg</tt> parameter is a tagged vector which contains one entry for
  each of the input defined in soap_spec_{NAME}. The value contained in
  <tt>arg</tt> is the SVL type corresponding to the input which was requested.
  For example, input specified as <tt>&#39;int&#39;</tt> or
  <tt>&#39;real&#39;</tt> will be scalar numeric values, while those specified
  as <tt>&#39;string&#39;</tt> will be SVL strings, and those specified as
  <tt>&#39;intArray&#39;</tt> will be flat vectors of numeric values, etc.</p>

<p>The return value must be a tagged vector, where the values are formulated
  according to an SVL type appropriate to the specified output type. The return
  values may be specified in any order. Extra values will be ignored but
  missing values or values of the wrong type will be reported as an error.</p>

<p>The <tt>opt</tt> parameter is reserved for providing information about the
  execution environment.</p>

<h2>Example</h2>

<p>An example of a very simple SVL SOAP function is as follows:</p>

<pre>
    global function soap_spec_AddTwoNumbers [] = [[

        number1: [type: &#39;real&#39;, description: &#39;First number&#39;],
        number2: [type: &#39;real&#39;, description: &#39;Second number&#39;]

    ],[

            // RETVALS: returns a number as the result.

        addition: [type: &#39;real&#39;, description: &#39;Both numbers added together&#39;]
    ],[

            // OPTION: title and description of the function.

        title: &#39;Add Two Numbers &#39;,
        description: &#39;Takes two numbers and adds them together.&#39;
    ]];


    global function soap_AddTwoNumbers [arg, opt]

        local number1 = arg.number1;
        local number2 = arg.number2;

        return [addition: number1 + number2];
    endfunction
</pre>

<a id="ReportProgress"></a>
<h2>Report Progress</h2>

<p>It is recommended to report progress information when the SOAP function
  takes a long time to run. The syntax for sending progress is as follow:</p>

<pre>
    webw_SetProgress [progress, message, pdata]
</pre>

<p><tt>progress</tt> is a rough estimate on the fraction of job finished. It
  should be a number between 0 and 1.<br />
  <tt>message</tt> is a token containing a brief message about the job
  progress.<br />
  <tt>pdata</tt> is an SVL vector that can be used to send extra progress
  information. It is intended for small information such as search counts or
  file paths. Putting large data in it will cause the SOAP function to
  fail.</p>

<h2>
<a id="DataStorage"></a>
Data Storage</h2>

<p>A dynamic directory is created under the <a href=
  "../../install/web_inst.htm#DataStorage">cache directory</a> and is
  guaranteed to be unique between SOAP requests. A SOAP SVL function can write
  files under this directory by using the <b>$DATA</b> environment variable and
  return the result as a MOE/web URL. Return items need to be specified with a
  proper url type, as described <a href="#url">above</a>, for this to work
  correctly. See below for an example.</p>

<p>In addition, each moebatch worker has an associated temporary directory,
  which is also its <a href="cd.htm">current working directory</a>. This
  directory will be automatically cleaned up by MOE/web after the SOAP job
  finishes.</p>

<h2>
<a id="ComplexExample"></a>
Example</h2>

<p>An example of a more complex SVL SOAP function is as follows:</p>

<pre>
    global function soap_spec_DBTest [] = [[            //register function

        mdb: [
            type: &#39;<b>url.path</b>&#39;,
            description: &#39;Source MDB database URL&#39;
        ]

    ],[
        mdbTrim: [
            type: &#39;<b>url.path</b>&#39;,
            description: &#39;Trimmed MDB database URL&#39;
        ]
    ],[

            // Optional attributes of this function.

        title: &#39;Trim Database&#39;,
        description: &#39;Takes a MDB database and trims it to contain &#39;
                     &#39;only every 10th of entry&#39;
    ]];


    global function soap_DBTest [arg, opt]

        <b>webw_SetProgress</b> [0.1, &#39;DBTest starts&#39;];    // report progress

            // Database output will be saved to a persistent directory($DATA).

        local dbfile = &#39;<b>$DATA</b>/trim.mdb&#39;;
        local newdb = db_Open [dbfile, &#39;create&#39;];

            // arg.mdb has already been translated from an URL to
            // server local file path.

        local db = db_Open [arg.mdb, &#39;read&#39;];
        apt db_CreateField cat [[newdb], db_Fields db];

        <b>webw_SetProgress</b> [0.4, &#39;copying database entries&#39;];

        local ent = 0, i = 1;
        while ent = db_NextEntry [db, ent] loop
            if i == 10 then
                db_Write [newdb, 0, db_Read [db, ent]];
                i = 1;
            else
                i = i + 1;
            endif
        endloop

        <b>webw_SetProgress</b> [0.99, &#39;closing database handle&#39;];

        db_Close newdb;
        db_Close db;

            // The file path (dbfile) will be translated
            // automatically into an MOE/web URL.

        return [mdbTrim: dbfile];
    endfunction

</pre>

<h1>Programming Guidelines</h1>

<p>The following guidelines and caveats should be considered when designing a
  new SVL SOAP function:</p>
  <ul>
    <li>The input arguments and output results are rigid, and must be declared
    by the function before it is executed.</li>
    <li>An SVL SOAP function cannot rely on state. Two subsequent calls to the
    same function should be assumed to be effectively running on two different
    servers, and may even be running simultaneously. Any temporary files, MOE
    atom keys, global variables, etc., should be assumed to be nonexistent when
    the second request executes. The only exceptions are persistent network
    resources, such as files in a shared network directory, or a relational
    database.</li>
    <li>It can generally be assumed that the MOE system will be cleaned up
    automatically after a SOAP function has finished executing, even if it
    failed. For example, atom keys, file handles, monitor tasks, etc., are
    automatically destroyed. It is nonetheless recommended that efforts be
    taken to ensure that all resources are properly released when no longer
    needed.</li>
    <li>SVL function crashes are not necessarily a severe problem. When an
    unhandled SVL error occurs during a SOAP request, the request will fail,
    the error will be logged, and the server will continue on to process the
    next request.</li>
    <li>Non-terminating code, such as a loop which waits indefinitely, is a
    severe problem, as the server will lose a MOE token until it is
    shutdown.</li>
    <li>SVL SOAP functions should be used to wrap reliable and well tested
    code, rather than experimental algorithms. It is often a good idea to write
    a separate entrypoint (e.g. by providing a <tt>main&nbsp;[]</tt> function),
    so that the underlying algorithm can be easily tested from within an
    interactive MOE session.</li>
    <li>Running a personal MOE/web application server on the same workstation
    is easy, and requires only one MOE token. The console output is an
    effective source of debugging information.</li>
    <li>When an SVL SOAP function sends output to the standard error stream
    (e.g. by use of the SVL functions <tt>write</tt>, <tt>print</tt> or
    <tt>pr</tt>), the text is echoed through the server and sent to the log
    file (which is the console by default). This can be used as a debugging
    tool.</li>
    <li>SOAP functions can be called by using third party software, or they can
    be tested using the built-in test page created by the server for each
    function. The directory of test pages can be accessed using the URL
    <tt>http://{hostname}:{port}/soap.html</tt>, where the host name and port
    are decided during the installation process.</li>
  </ul>

<h1>See Also</h1>

<p><a href="../../install/web_inst.htm">Installing and Running
  MOE/web</a><br />
  <a href="../../moe/moesoap.htm">MOE/web SOAP Service and Functions</a><br />
  <a href="http://www.w3.org/TR/soap12-part1">Simple Object Access Protocol
  (SOAP)</a> </p>
<!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

