<!DOCTYPE html>
<html>

<!--
!!    MOE On-Line Manuals
!!    COPYRIGHT (C) CHEMICAL COMPUTING GROUP ULC.  ALL RIGHTS RESERVED.
!!-->
<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="keywords: DFT, FFT" />
  <meta name="keywords" content="functions: cDFT, cDFTinv, rDFT, rDFTinv" />
  <meta name="keywords" content="obsolete: dft, dftinv, rdft, rdftinv" />
  <title>Discrete Fourier Transform</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    Discrete Fourier Transform
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<pre class="code">
size    = [n<sub>1</sub>, n<sub>2</sub>, ... n<sub>ndim</sub>]

freq_Re = [re<sub>1</sub>, re<sub>2</sub>, ...]
freq_Im = [im<sub>1</sub>, im<sub>2</sub>, ...]
freq<sub>x</sub>   = [freq_Re<sub>x</sub>, freq_Im<sub>x</sub>]

data_Re = [re<sub>1</sub>, re<sub>2</sub>, ...]
data_Im = [im<sub>1</sub>, im<sub>2</sub>, ...]
data<sub>x</sub>   = [data_Re<sub>x</sub>, data_Im<sub>x</sub>]

[size, [freq<sub>a</sub>, freq<sub>b</sub>, ...]]       = <a class="fcnlink" href=
"#cDFT">cDFT</a>    [size, [data<sub>a</sub>, data<sub>b</sub>, ...]]
[size, [data<sub>a</sub>, data<sub>b</sub>, ...]]       = <a class="fcnlink" href=
"#cDFTinv">cDFTinv</a> [size, [freq<sub>a</sub>, freq<sub>b</sub>, ...]]

[size, [freq<sub>a</sub>, freq<sub>b</sub>, ...]]       = <a class="fcnlink" href=
"#rDFT">rDFT</a>    [size, [data_Re<sub>a</sub>, data_Re<sub>b</sub>, ...]]
[size, [data_Re<sub>a</sub>, data_Re<sub>b</sub>, ...]] = <a class="fcnlink" href=
"#rDFTinv">rDFTinv</a> [size, [freq<sub>a</sub>, freq<sub>b</sub>, ...]]
</pre>

<h3 class="obsolete">Obsolete</h3>

<pre class="code">
[freq_Re, freq_Im, size]  = <a class="fcnlink" href=
"#dft">dft</a>     [ data_Re, data_Im ]
[freq_Re, freq_Im, size]  = <a class="fcnlink" href=
"#dft">dft</a>     [ data_Re, data_Im, size ]
[data_Re, data_Im, size]  = <a class="fcnlink" href=
"#dftinv">dftinv</a>  [ freq_Re, freq_Im ]
[data_Re, data_Im, size]  = <a class="fcnlink" href=
"#dftinv">dftinv</a>  [ freq_Re, freq_Im, size ]

[freq_Re, freq_Im, size]  = <a class="fcnlink" href=
"#rdft">rdft</a>    [ data_Re ]
[freq_Re, freq_Im, size]  = <a class="fcnlink" href=
"#rdft">rdft</a>    [ data_Re, size ]
[data_Re, size]           = <a class="fcnlink" href=
"#rdftinv">rdftinv</a> [ freq_Re, freq_Im ]
[data_Re, size]           = <a class="fcnlink" href=
"#rdftinv">rdftinv</a> [ freq_Re, freq_Im, size ]
</pre>

<a id="cDFT"></a>
<a id="cDFTinv"></a>
<a id="rDFT"></a>
<a id="rDFTinv"></a>
<h1>Description</h1>

<table class="noborder">
  <tr>
    <td><span class="fcndef">cDFT</span></td>
    <td>Returns the Discrete Fourier Transform of one or more
    multidimensional arrays of complex data.</td>
  </tr>
  <tr>
    <td><span class="fcndef">cDFTinv</span></td>
    <td>Returns the Inverse Discrete Fourier Transform of one or more
    multidimensional arrays of complex data.</td>
  </tr>
  <tr>
    <td><span class="fcndef">rDFT</span></td>
    <td>Returns the Discrete Fourier Transform of one or more
    multidimensional arrays of real data.</td>
  </tr>
  <tr>
    <td><span class="fcndef">rDFTinv</span></td>
    <td>Returns the Inverse Discrete Fourier Transform of one or more
    multidimensional arrays of complex data
    whose result is known to be real-only.</td>
  </tr>
</table>

<p>All four functions are parallelized using multithreading and can
  process multiple sets of <tt>data<sub>x</sub></tt> or
  <tt>freq<sub>x</sub></tt> of the same size/shape at the same time. 
  The real parts of data values (or frequencies) are stored in flat vectors
  <tt>data_Re<sub>x</sub></tt> (or <tt>freq_Re<sub>x</sub></tt>).
  The imaginary parts (where applicable) are stored in a
  vector <tt>data_Im<sub>x</sub></tt> (or <tt>freq_Im<sub>x</sub></tt>).</p>

<p>The <tt>size</tt> argument must
  represent the <em>size</em> of the array, i.e. a flat list of the array sizes
  in each dimension. The sizes should ideally be integer powers of 2 to gain
  optimal speed though powers of 3, 5 and 7 will also be fast and other sizes
  will work fine but not necessarily be quick.</p>

<p>The array is stored in row-major order, with the index in the first
  dimension changing least rapidly and the index in the last dimension changing
  most rapidly.</p>

<p>For example, the matrix:</p>

<pre class="code">
[[11, 12, 13, 14],
 [21, 22, 23, 24]]
</pre>

<p>stored in row-major order is represented by the size vector <tt>[2,4]</tt>
  and the flat vector of data: <tt>[11,12,13,14,21,22,23,24]</tt>.</p>

<pre class="code">
svl&gt; cDFT [4, [[igen 4, 0]]]              // Note the nesting of data<sub>x</sub>!
[4, [ [ [10,-2,-2,-2], [0,-2,0,2] ] ] ]

svl&gt; cDFTinv cDFT[4, [[igen 4, 0]]]
[ 4, [ [ [1,2,3,4], [0,0,0,0] ] ] ]

svl&gt; cDFT [2, [[[0,1], 0]]]
[ 2, [ [ [1,-1], [0,0] ] ]

svl&gt; cDFT [[2,4], [[[0,0,0,0,1,1,1,1], 0]]]
[ [2,4], [ [ [4,0,0,0,-4,0,0,0], [0,0,0,0,0,0,0,0] ] ] ]

svl&gt; cDFT [[4,2], [[[0,0,0,0,1,1,1,1], 0]]]
[ [4,2], [ [ [4,0,-2,0,0,0,-2,0], [0,0,-2,0,0,0,2,0] ] ] ]
</pre>

<p>When the data to be transformed is all real (i.e. no imaginary component),
  such as when dealing with electron densities, the <tt>rDFT</tt> function may
  be used. This has the benefit of being faster and using approximately half
  the memory of the standard <tt>cDFT</tt> call. While the input is in the same
  form as the real input to the <tt>cDFT</tt> function, the return values are
  not. Only the first half of the result data in the last dimension (that
  changing most rapidly) is returned, due to the symmetry in the Fourier
  Transform for real data:</p>

<pre class="code">
F(h,k,l,..) = F*(n<sub>1</sub>-h,n<sub>2</sub>-k,n<sub>3</sub>-l,...)
</pre>

<p>where F* is the complex conjugate of F, and (n<sub>1</sub>, n<sub>2</sub>,
  n<sub>3</sub>,...) is the <tt>size</tt> as described above. Note the
  <tt>size</tt> returned is always that of the full grid, even though only half
  the grid is returned. In order to reconstruct the full grid [A, B] of size
  <tt>size</tt> from the half-grid <tt>[freq_Re<sub>x</sub>,
  freq_Im<sub>x</sub>]</tt> returned by <tt>rDFT</tt>:</p>

<pre class="code">
local m = resize [igen last size &lt;= inc floor (0.5 * last size), mul size];
local xm = x_pack not m;
local midx = grid_m2s [size, inc mod [size - dec grid_s2m [size,xm], size]];
local A = put [mput [zero m, m, freq_Re], xm,  freq_Re[indexof [midx, x_pack m]]];
local B = put [mput [zero m, m, freq_Im], xm, -freq_Im[indexof [midx, x_pack m]]];
</pre>

<p>Similarly if the inverse transform is known to be real-only,
  <tt>rDFTinv</tt> may be used to save speed and memory. It takes as input the
  same half-grid as <tt>rDFT</tt> returns. To get this from a full grid [A, B]
  of size <tt>size</tt>, which is assumed to have the symmetry described
  above:</p>

<pre class="code">
local idx = x_pack resize [igen last size &lt;= inc floor (0.5 * last size), mul size];
freq_Re = A[idx];
freq_Im = B[idx];
</pre>

<p>The full real grid will always be returned by <tt>rDFTinv</tt>.</p>

<hr noshade="noshade" />
<a id="dft"></a>
<a id="dftinv"></a>
<a id="rdft"></a>
<a id="rdftinv"></a>
<h3 class="obsolete">Obsolete Syntax</h3>

<p>
<span class="tip">Note!</span> The following for functions provide the same
functionality and are replaced by
<span class="fcndef">cDFT</span>,
<span class="fcndef">cDFTinv</span>,
<span class="fcndef">rDFT</span>, and
<span class="fcndef">rDFTinv</span>.
They are not parallized and can only calculate the DFT for one input data
set at a time. When converting code from old to new functions, mind the
nesting of the input and output data vectors due to the parallism.
</span>
</p>

<table class="noborder">
  <tr>
    <td><span class="obsfcndef">dft</span></td>
    <td>Returns the Discrete Fourier Transform of a
    multidimensional array of complex data.</td>
  </tr>
  <tr>
    <td><span class="obsfcndef">dftinf</span></td>
    <td>Returns the Inverse Discrete Fourier Transform of a
    multidimensional array of complex data.</td>
  </tr>
  <tr>
    <td><span class="obsfcndef">rdft</span></td>
    <td>Returns the Discrete Fourier Transform of a
    multidimensional array of real data.</td>
  </tr>
  <tr>
    <td><span class="obsfcndef">rdftinf</span></tt></td>
    <td>Returns the Inverse Discrete Fourier Transform of a
    multidimensional array of complex data whose result is known to be
    real-only.</td>
  </tr>
</table>

<p>The real parts of data values (or frequencies) are stored in a flat vector
  <tt>data_Re</tt> (or <tt>freq_Re</tt>). The imaginary parts (where
  applicable) are stored in a vector <tt>data_Im</tt> (or
  <tt>freq_Im</tt>).</p>

<p>If the <tt>size</tt> argument is missing or empty (<tt>[]</tt>), the array
  is assumed to be 1-dimensional. Otherwise, the <tt>size</tt> argument must
  represent the <em>size</em> of the array, i.e. a flat list of the array sizes
  in each dimension. The sizes should ideally be integer powers of 2 to gain
  optimal speed though powers of 3, 5 and 7 will also be fast and other sizes
  will work fine but not necessarily be quick.</p>

<p>The array is stored in row-major order, with the index in the first
  dimension changing least rapidly and the index in the last dimension changing
  most rapidly.</p>

<p>For example, the matrix:</p>

<pre class="code">
[[11, 12, 13, 14],
 [21, 22, 23, 24]]
</pre>

<p>stored in row-major order is represented by the size vector <tt>[2,4]</tt>
  and the flat vector of data: <tt>[11,12,13,14,21,22,23,24]</tt>.</p>

<pre class="code">
svl&gt; dft [igen 4, 0]
[ [10,-2,-2,-2], [0,-2,0,2], 4 ]

svl&gt; dftinv dft[igen 4, 0]
[ [1,2,3,4], [0,0,0,0], 4 ]

svl&gt; dft [[0,1], 0, 2]
[ [1,-1], [0,0], 2 ]

svl&gt; dft [[0,0,0,0,1,1,1,1], 0, [2,4]]
[ [4,0,0,0,-4,0,0,0], [0,0,0,0,0,0,0,0], [2,4] ]

svl&gt; dft [[0,0,0,0,1,1,1,1], 0, [4,2]]
[ [4,0,-2,0,0,0,-2,0], [0,0,-2,0,0,0,2,0], [4,2] ]
</pre>

<p>When the data to be transformed is all real (i.e. no imaginary component),
  such as when dealing with electron densities, the <tt>rdft</tt> function may
  be used. This has the benefit of being faster and using approximately half
  the memory of the standard <tt>dft</tt> call. While the input is in the same
  form as the real input to the <tt>dft</tt> function, the return values are
  not. Only the first half of the result data in the last dimension (that
  changing most rapidly) is returned, due to the symmetry in the Fourier
  Transform for real data:</p>

<pre class="code">
F(h,k,l,..) = F*(n<sub>1</sub>-h,n<sub>2</sub>-k,n<sub>3</sub>-l,...)
</pre>

<p>where F* is the complex conjugate of F, and (n<sub>1</sub>, n<sub>2</sub>,
  n<sub>3</sub>,...) is the <tt>size</tt> as described above. Note the
  <tt>size</tt> returned is always that of the full grid, even though only half
  the grid is returned. In order to reconstruct the full grid [A, B] of size
  <tt>size</tt> from the half-grid [freq_Re, freq_Im] returned by
  <tt>rdft</tt>:</p>

<pre class="code">
local m = resize [igen last size &lt;= inc floor (0.5 * last size), mul size];
local xm = x_pack not m;
local midx = grid_m2s [size, inc mod [size - dec grid_s2m [size,xm], size]];
local A = put [mput [zero m, m, freq_Re], xm,  freq_Re[indexof [midx, x_pack m]]];
local B = put [mput [zero m, m, freq_Im], xm, -freq_Im[indexof [midx, x_pack m]]];
</pre>

<p>Similarly if the inverse transform is known to be real-only,
  <tt>rdftinv</tt> may be used to save speed and memory. It takes as input the
  same half-grid as <tt>rdft</tt> returns. To get this from a full grid [A, B]
  of size <tt>size</tt>, which is assumed to have the symmetry described
  above:</p>

<pre class="code">
local idx = x_pack resize [igen last size &lt;= inc floor (0.5 * last size), mul size];
freq_Re = A[idx];
freq_Im = B[idx];
</pre>

<p>The full real grid will always be returned by <tt>rdftinv</tt>.</p>

<hr noshade="noshade" />
<h3>Definitions</h3>

<p>The (1-dimensional) Discrete Fourier Transform in the <i>k</i>-th
  dimension of a multidimensional function <i>f</i> is defined as:</p>

<p class="blockquote">
  DFT<sub><i>k</i></sub>(<i>f</i>)(...<i>n</i><sub><i>k</i></sub>...) =
  <i>C</i><sub><i>k</i></sub> &middot; sum<sub><i>i</i><sub><i>k</i></sub> =
  0..<i>N</i><sub><i>k</i></sub>-1</sub> exp(2 &middot; Pi &middot;
  <i>i</i><sub><i>k</i></sub> &middot; <i>n</i><sub><i>k</i></sub> /
  <i>N</i><sub><i>k</i></sub>) &middot;
  <i>f</i>(...<i>i</i><sub><i>k</i></sub>...)<br />
  <i>C</i><sub><i>k</i></sub> = 1
</p>

<p>The Discrete Fourier Transform of a <i>K</i>-dimensional function <i>f</i>
  is then defined as:</p>

<p class="blockquote">
  DFT(<i>f</i>) = DFT<sub>1</sub>( DFT<sub>2</sub>(...
  DFT<sub><i>K</i></sub>(<i>f</i>)...))
</p>

<p>The Inverse Discrete Fourier Transform is defined by the same formula with
  the constant Pi replaced by -Pi and constant <span class=
  "nobr"><i>C</i><sub><i>k</i></sub> = 1</span> replaced by <span class=
  "nobr"><i>C</i><sub><i>k</i></sub> = 1 /
  <i>N</i><sub><i>k</i></sub></span>.
</p>
<!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

