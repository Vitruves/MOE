<!DOCTYPE html>
<html>

<!--
!!    MOE On-Line Manuals
!!    COPYRIGHT (C) CHEMICAL COMPUTING GROUP ULC.  ALL RIGHTS RESERVED.
!!-->
<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="keywords:" />
  <meta name="keywords" content="functions: rand" />
  <meta name="keywords" content="functions: randU" />
  <meta name="keywords" content="functions: randE" />
  <meta name="keywords" content="functions: randN" />
  <meta name="keywords" content="functions: randseed" />
  <title>Random Number Generators</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    Random Number Generators
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<pre class="code">
val = <a class="fcnlink" href="#rand">rand</a> v
val = <a class="fcnlink" href="#randE">randE</a> v
val = <a class="fcnlink" href="#randN">randN</a> v
val = <a class="fcnlink" href="#randU">randU</a> v

seed = <a class="fcnlink" href="#randseed">randseed</a> []
old_seed = <a class="fcnlink" href="#randseed">randseed</a> new_seed
</pre>
<a id="rand"></a>
<h1>Description</h1>

<p>For each leaf element&nbsp;<tt>q</tt> of vector&nbsp;<tt>v</tt>, return a
  random number based on the specified probability distribution:
  <!-- DESC --></p>
<table class="noborder">
<tr>
  <td>
<tt>rand</tt></td>
  <td>
    Integer in the range:&nbsp;<tt>[0..q)</tt>
    when&nbsp;q&nbsp;&gt;&nbsp;0, or&nbsp;<tt>(q..0]</tt>
    when&nbsp;q&nbsp;&lt;&nbsp;0, or trivially&nbsp;<tt>0</tt>
    when&nbsp;q&nbsp;=&nbsp;0. The argument&nbsp;<tt>q</tt> is rounded
    before the random number is generated.

<pre class="code">
svl&gt; rand [10, 9, 14, [8, 4]]
[2, 0, 11, [3, 0]]
</pre>
  </td>
</tr>
<tr>
  <td>
<a id="randE"></a>
<tt>randE</tt></td>
  <td>
    Non-negative real number from exponential distribution
    (1/<i>q</i>)<i>e<sup>-x/q</sup></i>

<pre class="code">
svl&gt; randE [10, 10, 10]
[14.4387,24.0121,1.37647]
</pre>
  </td>
</tr>
<tr>
  <td>
<a id="randN"></a>
<tt>randN</tt></td>
  <td>
    Real number from the normal distribution:

<img src="randetc/norm-dist.gif" class="center" />

<p>taking zero mean&nbsp;<tt>(&mu;=0)</tt> and with standard
    deviation&nbsp;<tt>q</tt>.</p>

<pre class="code">
svl&gt; randN [10, [11, 12]]
[ -10.6109, [7.4708,-1.74995] ]
</pre>
  </td>
</tr>
<tr>
  <td>
<a id="randU"></a>
<tt>randU</tt></td>
  <td>
    Real number in the range:&nbsp;<tt>[0..q)</tt>
    when&nbsp;q&nbsp;&gt;&nbsp;0, or&nbsp;<tt>(q..0]</tt>
    when&nbsp;q&nbsp;&lt;&nbsp;0, or trivially&nbsp;0
    when&nbsp;q&nbsp;=&nbsp;0, according to a uniform density distribution.

<pre class="code">
svl&gt; randU [10, 10, 10]
[2.41069, 3.91353, 4.0776]
</pre>
  </td>
</tr>
</table><!-- ENDDESC -->

<hr />
<a id="randseed"></a>
<p>The random functions <tt>rand</tt>, <tt>randU</tt>, <tt>randE</tt>,
  <tt>randN</tt>, <tt>shuffle</tt>, <tt>x_shuffle</tt>, <tt>sample</tt>,
  <tt>x_sample</tt> use a random number generator. In general, each call to
  these functions returns a different value. However, if the random number
  generator is reset to the same state, then the same sequence of functions
  will return the same sequence of values. Function&nbsp;<tt>randseed</tt>
  changes the state of the generator. The effect of the change is limited to
  the random functions of only the current task. If the
  function&nbsp;<tt>randseed</tt> is not called (or if it is called with
  argument&nbsp;0), then the random functions use the <i>default</i> random
  number generator.</p>

<p>When a task that uses the default number generator is duplicated, the
  child task will use the same, default random number generator. However, when
  a task that uses a non-default (seeded) random number generator is
  duplicated, the child task will use a separate random number generator,
  initialized to the same state as the generator of the parent task. As a
  consequence, 1)&nbsp;the random number functions will return the same result,
  whether they are called from the parent task or the child task and
  2)&nbsp;the random numbers generated by the parent task are unaffected by the
  actions of the child task.</p>

<pre>rnd_state = <span class="fcndef">randseed</span> []
</pre>

<p>Returns the current state of the random number generator. The state is
  represented by a vector of numbers. If the default random number generator is
  being used, the function returns&nbsp;0.</p>

<pre><span class="fcndef">randseed</span> rnd_state
old_rnd_state = <span class="fcndef">randseed</span> rnd_state
</pre>

<p>Resets the state of the random number generator to a previous state and
  returns the current state. The state is represented by a vector of numbers.
  If the default random number generator is being used, the function
  returns&nbsp;0. Warning: If the argument is of the same shape as a valid
  state but does not represent a valid state (e.g.&nbsp;a vector of all zeros),
  the random number generators could lose its probabilistic properties.</p>

<pre><span class="fcndef">randseed</span> seed
old_rnd_state = <span class="fcndef">randseed</span> seed
</pre>

<p>Resets the state of the random number generator to a state derived from a
  scalar seed and returns the current state. If the default random number
  generator is being used, the function returns&nbsp;0.</p>

<pre><span class="fcndef">randseed</span> 0
old_rnd_state = <span class="fcndef">randseed</span> 0
</pre>

<p>Resets the currently used generator back to the default random number
  generator. As a special case, when the argument is zero and the default
  random number generator is being used, the function does&nbsp;<i>not</i>
  return&nbsp;0, but the full state of the generator.</p>

<p>Example: Repeat the same sequence of random numbers:</p>

<pre>
svl&gt; randseed 5; randU [1,1,1]
[0.12945,0.584205,0.859906]

svl&gt; randseed 5; randU [1,1,1]
[0.12945,0.584205,0.859906]
</pre>

<p>Example:<br />
  Use a reproducible random numbers for a part of the code:</p>

<pre class="code">
local s = randseed myseed;
... use random functions ...
randseed s;
</pre>

<p>Example:<br />
  Reproduce the result of a given function,&nbsp;<tt>fcn</tt>, when the result
  the function <tt>fcn</tt> depends on the state of the random number
  generator. In order to reproduce the conditions for which the result fails a
  given test,&nbsp;<tt>test&nbsp;x</tt>, we save the state of the random number
  generator in the variable&nbsp;<tt>s</tt>. The function <tt>randseed</tt> is
  called twice in a row to guarantee that the&nbsp;<i>full</i> state of the
  generator is saved even for the default generator, for which a
  single&nbsp;<tt>randseed</tt> call would return only&nbsp;0.</p>

<pre class="code">
loop
    s = randseed randseed [];
    x = fcn arg;
until test x endloop

randseed s;
x = fcn arg;
print [test_x: test x];     // prints [test_x: 1]
</pre>

<p>Example:<br />
  To show the effect of a task fork on random number generation, print a
  sequence of random numbers from both the parent task and the child task.</p>

<pre class="code">
function test_rand seed
    randseed seed;
    write [&#39;parent:\t{}\n&#39;, rand [10,10,10]];
    write [&#39;child:\t{}\n&#39;, first task_call [&#39;rand&#39;, [10,10,10]]];
endfunction
</pre>

<p>When the same, default random number generator is used by both the child
  and the parent task, the sequences will differ. Also, a different result is
  printed with every call.</p>

<pre class="code">
svl&gt; test_rand 0     // global default generator
[5,7,1]
[9,8,0]
</pre>

<p>When each task uses its own copy of a random number generator, both copies
  initialized to the same seed, the printed sequences will be identical. Also,
  the same result is printed with every call.</p>

<pre class="code">
svl&gt; test_rand 1     // local generator seeded with 1
[6,9,1]
[6,9,1]
</pre>

<h1>See Also</h1>

<p><a class="svl" href="specfcn.htm">loggamma</a> <a class="svl" href=
  "sampletc.htm">sample</a> <a class="svl" href="serial.htm">serial</a>
  <a class="svl" href="sampletc.htm">shuffle</a></p>
<!-- START MOE_FOOTER -->
<div class="MOE_FOOTER">
  <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
  <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
  <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
  <a href="mailto:info@chemcomp.com"></a>
</div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

