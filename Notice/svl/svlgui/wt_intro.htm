<!DOCTYPE html>
<html>

<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="keywords:" />
  <meta name="keywords" content="functions:" />
  <title>Window Toolkit Reference</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    Window Toolkit Reference
  </div>
<!-- END MOE_HEADER -->
<div class="content">
  <ul>
    <li>
      <a href="#Widgets">Widgets</a>
      <ul>
        <li><a href="#Managers">Manager Widgets</a></li>
        <li><a href="#Primitives">Primitive Widgets</a></li>
        <li><a href="#Names">Widget Names</a></li>
        <li><a href="#Attributes">Core Attributes</a></li>
        <li><a href="#Values">Widget Data Values</a></li>
      </ul>
    </li>
    <li>
      <a href="#Windows">Windows</a>
      <ul>
        <li><a href="#CreatingAWindow">Creating a Window</a></li>
        <li><a href="#Triggers">Triggers</a></li>
        <li><a href="#RemovingOrDestroyingWindows">Removing or Destroying
        Windows</a></li>
        <li><a href="#Prompters">Prompters</a></li>
        <li><a href="#Summary">Summary</a></li>
      </ul>
    </li>
    <li>
      <a href="#Layout">Window Layout</a>
      <ul>
        <li><a href="#Alignment">Aligning Widgets</a></li>
        <li><a href="#Size">Resizing Widgets</a></li>
      </ul>
    </li>
    <li><a href="#WindowFunctions">Window Functions</a></li>
    <li><a href="#FunctionRef">Widget Function Reference</a></li>
  </ul>

<p>The SVL Window Toolkit lets you create a graphical user interface for any
  SVL program running in a window environment. It comprises a set of window
  objects and a library of functions for building panels that either display
  information (such as message boxes or warning messages) or require input from
  the user (such as panels).</p>

<p><b>Note:</b> The graphical user interface panels and tools are not
  available in batch mode.</p>

<h1><a id="Widgets">Widgets</a></h1>

<p>A user interface component is called a <i>widget</i>. Widgets are the
  building blocks of any interface. The toolkit includes a variety of widgets
  which belong to one of two groups:</p>
  <ul>
    <li>Manager widgets</li>
    <li>Primitive widgets</li>
  </ul>

<p>Every widget has a set of attributes that you may modify. Furthermore,
  when building panels, the toolkit automatically aligns all widgets and
  ensures a uniform look across multiple platforms.</p>

<h2><a id="Managers">Manager Widgets</a></h2>

<p>As their name implies, manager widgets &quot;manage&quot; other widgets,
  which become their children. Children are automatically positioned in the
  parent window based on their order of creation. A window may have many
  manager widgets, including nested managers.</p>

<p>There are six types of manager widgets:</p>
<table class="noborder width-75p">
  <tr>
    <td>Shell</td>
    <td>Box that aligns its children vertically in a straight line. This
    widget type is implicitly defined and created when a window is
    created.</td>
  </tr>
  <tr>
    <td>Vbox</td>
    <td>Box that aligns its children vertically in a straight line.</td>
  </tr>
  <tr>
    <td>Hbox</td>
    <td>Box that aligns its children horizontally in a straight line.</td>
  </tr>
  <tr>
    <td>Mbox</td>
    <td>Box that organizes its children in a matrix form of dimension
    specified by the <tt>columns</tt> attribute. By default, children are
    laid out row by row. This can be changed to column by column by setting
    the <tt>columnMajor</tt> attribute to 1.</td>
  </tr>
  <tr>
    <td>Pager</td>
    <td>Manages several <i>pages</i> of information.</td>
  </tr>
  <tr>
    <td>Prompter</td>
    <td>Manages children like a shell widget but has a specific
    application-dependent location.</td>
  </tr>
</table>

<h2><a id="Primitives">Primitive Widgets</a></h2>

<p>As opposed to manager widgets, primitive widgets do not manage other
  widgets. Although primitive widgets cannot have children, they may themselves
  be children of a manager. Widgets in this class include the button, checkbox,
  listbox, and label. Primitive widgets inherit core attributes and, in most
  cases, also have specific attributes.</p>

<p>The following is an overview of the primitive widgets supplied by the
  toolkit:</p>
<table class="noborder width-75p">
  <tr>
    <td>Button</td>
    <td>Button bar providing a set of pushbuttons.</td>
  </tr>
  <tr>
    <td>CLI</td>
    <td>Text entry field that acts as a CLI commands field.</td>
  </tr>
  <tr>
    <td>Checkbox</td>
    <td>Single toggle button with a label attached to it.</td>
  </tr>
  <tr>
    <td>Data</td>
    <td>An invisible widget used to attach user data to a window.</td>
  </tr>
  <tr>
    <td>Edit</td>
    <td>Multi-line text field.</td>
  </tr>
  <tr>
    <td>FSB</td>
    <td>File selection box.</td>
  </tr>
  <tr>
    <td>FSBText</td>
    <td>Single line text field with validation on filenames automatically
    done when triggered.</td>
  </tr>
  <tr>
    <td>Label</td>
    <td>Visual label used for display. No input from user can be received
    through a label.</td>
  </tr>
  <tr>
    <td>Listbox</td>
    <td>Scrollable list of options. A list can have a single selection or
    multiple selection policy.</td>
  </tr>
  <tr>
    <td>Option</td>
    <td>Menu of options allowing the selection of a single option at a
    time.</td>
  </tr>
  <tr>
    <td>Plot</td>
    <td>Graphical display with built-in plot functionality.</td>
  </tr>
  <tr>
    <td>Radio</td>
    <td>Set of buttons allowing the selection of a single option at a
    time.</td>
  </tr>
  <tr>
    <td>RangeSlider</td>
    <td>Line with two moveable bars to indicate a value range.</td>
  </tr>
  <tr>
    <td>Scale</td>
    <td>Slider accompanied by a numeric text field which displays the value
    of the slider and can be used for setting its position.</td>
  </tr>
  <tr>
    <td>Separator</td>
    <td>Horizontal or vertical black line that spans the width or height of
    its parent and is used to separate objects.</td>
  </tr>
  <tr>
    <td>Slider</td>
    <td>Line with a moveable bar to indicate the current value of the
    object.</td>
  </tr>
  <tr>
    <td>Spin</td>
    <td>Set of arrow buttons used to increment/decrement the numeric value of
    an object, accompanied by a numeric text field.</td>
  </tr>
  <tr>
    <td>Text</td>
    <td>Single-line text entry field operating as a one-line text editor,
    i.e. it is used to insert, modify, delete, select, and scroll text.</td>
  </tr>
  <tr>
    <td>Trackball</td>
    <td>A virtual trackball and grid that can be used to manipulate 3D
    objects using the mouse.</td>
  </tr>
  <tr>
    <td>Wheel</td>
    <td>Numeric input device akin to a tuning dial, used for making either
    relative or absolute changes to a value.</td>
  </tr>
</table>

<p>For a full listing of widget-specific attributes, see the widget function
  reference pages.</p>

<h2><a id="Names">Widget Names</a></h2>

<p>Widgets (contrary to windows as explained later) have no associated key.
  To reference a widget after its creation, you must assign it a unique name in
  the window descriptor when it is created. If a name is not specified, values
  and attributes may not be accessed after creation. Any widget whose value
  will be required after creation time needs to be named. To name a widget use
  the core attribute <tt>name</tt>.</p>

<h2><a id="Attributes">Core Attributes</a></h2>

<p>Each widget type, or class, has a set of modifiable default attributes.
  All widgets inherit core attributes, such as <tt>name</tt> and
  <tt>title</tt>. In addition, widgets may have specific attributes like, for
  example, the label of a pushbutton or the length attribute of a text.</p>

<p>Widget attributes are defined by attribute-value pairs at the time of
  window creation or through the <a class="svl" href=
  "fcnref/wt_attr.htm">WindowSetAttr</a> function call after creation.</p>

<p>The core attributes are as follows:</p>
  <div class="indent">

  <p><b>bubbleHelp</b></p>

  <p>Displays a message in a yellow &quot;bubble&quot; when the mouse cursor
      is held motionless over an object for a second. Bubble help disappears as
      soon as the cursor is moved, or a mouse button or keyboard key is pressed.
      The message text is supplied as a token and may include the newline
      character '\n'.</p>

  <p>Bubble help can be attached to individual objects in an array widget
      such as a radio box or a button widget. To do this, the number of tokens
      supplied as bubbleHelp must match the number of buttons in the widget,
      otherwise the behavior becomes unpredictable.</p>

  <p><b>centerH</b></p>

  <p>Centers an object, title, or text horizontally within its parent. The
      horizontal (Y-coordinate) alignment point is ignored. Value is 0 or 1.</p>

  <p><b>centerV</b></p>

  <p>Centers an object, title, or text vertically within its parent. The
      vertical (X-coordinate) alignment point is ignored. Value is 0 or 1.</p>

  <p><b>extendH</b></p>

  <p>Expands an object horizontally to fill the width of its cell. An
      extensible object does not resize when the shell is resized <i>unless</i>
      its cell changes size (e.g. because its manager is resizable). Value is 0
      or 1.</p>

  <p><b>extendV</b></p>

  <p>Expands object vertically to fill the height of its cell. An extensible
      object does not resize when the shell is resized <i>unless</i> its cell
      changes size (e.g. because its manager is resizable). Value is 0 or 1.</p>

  <p><b>flushLeft</b></p>

  <p>Positions the object at the left edge of its cell, thus ignoring the
      vertical (X-coordinate) alignment point. Value is 0 or 1.</p>

  <p><b>flushTop</b></p>

  <p>Positions the object at the top edge of its cell, thus ignoring the
      horizontal (Y-coordinate) alignment point. Value is 0 or 1.</p>

  <p><b>margin</b></p>

  <p>Adds a preset margin (extra space) around the object. The default is 0
      (no margin). Value is 0 or 1.</p>

  <p><b>name</b></p>

  <p>Name of object, which is used by all SVL window functions to identify
      the object. The name is not displayed in the window. Note that an object
      can be referenced <b>only</b> by its name. Two objects can share the same
      name, but only the one created first will be accessible. Value is a
      token.</p>

  <p><b>onTrigger</b></p>

  <p>Specifies whether a change to the object's value will <a href=
      "#Triggers">trigger</a> the window, and what action is to be taken if it
      does. When a window triggers, it causes <tt>WindowWait</tt> or
      <tt>WindowPrompt</tt> to return the values of all named objects in the
      window. Values are:<br />
      <tt>'exit'<br />
      'ignore'<br />
      'return'<br />
      'validate'</tt></p>

  <p><b>resizeH</b></p>

  <p>Resizes the object horizontally when the entire window is resized. If an
      object is resizable, its parents and all its ancestors are resizable
      too.</p>

  <p><b>resizeV</b></p>

  <p>Resizes the object vertically when the entire window is resized. If an
      object is resizable, its parents and all its ancestors are resizable
      too.</p>

  <p><b>sensitive</b></p>

  <p>Specifies whether an object is to be disabled (indicated by the object
      being dimmed).</p>

  <p><b>shadow</b></p>

  <p>Gives a 3D effect to objects by adding shadowing. Shadows are drawn
      along cell boundaries (not widget). The <tt>rounded</tt> looks provide a
      wider and softer shadow, giving the impression of greater depth or height.
      Command buttons in a <tt>Shell</tt> footer are <tt>rounded-out</tt>. Valid
      shadow types are listed in the built-in constant
      <tt>WINDOW_SHADOWS</tt>.</p>
  <ul>
    <li><tt>'in'</tt> inset look</li>
    <li><tt>'out'</tt> raised look</li>
    <li><tt>'etched-in'</tt> inset etched look</li>
    <li><tt>'etched-out'</tt> raised etched look</li>
    <li><tt>'none'</tt> no shadow, no border (default)</li>
    <li><tt>'rounded-in'</tt> rounded inset look</li>
    <li><tt>'rounded-out'</tt> rounded raised look</li>
  </ul>

  <p><b>spacingH</b></p>

  <p>Specifies how much horizontal space to add between an object's
      children. Valid tokens are listed in the built-in constant
      <tt>WINDOW_SPACING</tt>.</p>
      <ul>
        <li><tt>'none'</tt></li>
        <li><tt>'small'</tt> (default)</li>
        <li><tt>'medium'</tt></li>
        <li><tt>'large'</tt></li>
      </ul>

  <p><b>spacingV</b></p>

  <p>Specifies how much vertical space to add between an object's
      children. Valid tokens are listed in the built-in constant
      <tt>WINDOW_SHADOWS</tt>.</p>
      <ul>
        <li><tt>'none'</tt></li>
        <li><tt>'small'</tt> (default)</li>
        <li><tt>'medium'</tt></li>
        <li><tt>'large'</tt></li>
      </ul>

  <p><b>title</b></p>

  <p>Displays the title of the object. By default, it appears to the left of
      the object. However, the title will appear above the object if the
      <tt>titleTop</tt> attribute (see description below) is set to 1. Its value
      is a token.</p>

  <p><b>titleFont</b></p>

  <p>Sets the font of the title of the object. Permissible values are given
      in the built-in constant <tt>WINDOW_FONTS</tt>.</p>

  <p><b>titleTop</b></p>

  <p>Specifies the position of the object title with respect to the widget.
      Value is 0 or 1. If set to 0, then the title is placed to the left.</p>
  </div>

<h2><a id="Values">Widget Data Values</a></h2>

<p>Most widgets have an associated data value. For example, the data value of
  an option menu is the selected menu entry. The data value of a checkbox is 1
  if set, 0 if unset.</p>

<p>The data type of a widget's value can be specified with the
  <tt>type</tt> attribute (for objects supporting different data types). For
  example, the type of an option menu can be set to <tt>'int'</tt> to
  return the selected menu item as an index, or set to <tt>'char'</tt>
  to return the item's label (returned as a token).</p>

<p>Widget values can be modified with <a class="svl" href="fcnref/wt_data.htm">
  WindowSetData</a> and retrieved with <a class="svl"
  href="fcnref/wt_data.htm">WindowGetData</a>.</p>

<h1><a id="Windows">Windows</a></h1>

<p>The term <i>window</i> refers to a hierarchy of objects, at the top of
  which is a root <i>shell</i> widget.</p>

<p>A single shell widget exists per window hierarchy and is the parent of all
  other widgets in the window. The shell is implicit in a window: there is no
  actual window object type called <tt>Shell</tt>. The shell widget has a
  <tt>text</tt> attribute, which is a vector of tokens indicating the labels of
  command buttons at the bottom of the panel. The shell must be named in order
  to determine that the trigger widget is one of the shell command buttons.</p>

<p>Windows may include a variety of fields or buttons, and can be programmed
  to put up child windows as well. Windows are also called <i>panels</i> or
  <i>dialog boxes</i>.</p>

<p>A window is defined by a <i>window descriptor</i>, a tagged vector of
  attribute-value pairs. The following is an example of a window
  descriptor:</p>

<pre class="code">
  const PANEL = [
      name  : 'shell',          // shell name
      title : 'Example',        // shell titlebar
      text  : ['Close'],        // command buttons for window
      Label : [                 // child of the shell
          text : 'Hello World!'
      ]
  ];
</pre>

<p>A window has a set of values consisting of the widget_name:widget_value
  pairs for all <b>named</b> widgets in its hierarchy.</p>

<p>To get the values for all named widgets in a window use:</p>

<pre class="code">
name_value_pairs = WindowValues wkey
</pre>

<p>If only some of the widgets values are required, use
  <tt>WindowGetData</tt>. The names of the requested widgets are passed and
  their respective values are returned as a vector.</p>

<pre class="code">
widget_values = WindowGetData [ wkey, widget_names]
</pre>

<p>The data values for any widget in a window may be set using
  <tt>WindowSetData</tt>.</p>

<pre class="code">
WindowSetData [ wkey, widget_name_value_pairs]
</pre>

<p>A window also has an optional <tt>windowName</tt> attribute. In most
  window functions, a window name substitutes for the window key parameter.</p>

<p>Many of the application windows have names attached to them and can be
  manipulated with functions such as <tt>WindowShow</tt> and
  <tt>WindowDestroy</tt>. Note that, if referencing a window by its name, the
  name must be unique within the application.</p>

<h2><a id="CreatingAWindow">Creating a Window</a></h2>

<p>A window is created using the <tt>WindowCreate</tt> function, which
  returns a unique window <i>key</i>. The key is used to identify and reference
  the window after its creation.</p>

<p>A created window exists in memory but is not visible on screen. To display
  the window, a call to <tt>WindowShow</tt> must be made. This makes the window
  visible, however, the window will appear and disappear much too fast for it
  to be of any use. The window must be told to stay up until the user
  explicitly removes it. This is done with a call to <tt>WindowWait</tt>.</p>

<p>The following example shows the sequence of calls that are required to
  produce a window:</p>

<pre class="code">
function HelloWorld []
    const PANEL = [
        name  : 'shell',          // shell name
        title : 'Example',        // shell titlebar
        text  : ['Close'],        // command buttons for window
        Label : [                 // child of the shell
            text : 'Hello World!'
        ]
    ];

        // Create and display the panel

    local wkey = WindowCreate PANEL;
    WindowShow wkey;

        // Now wait for input

    local [values, trigger] = WindowWait wkey;

        // Clean up when done

    WindowDestroy wkey;
endfunction
</pre>

<p>The output of this program is:</p>

<img src="wt_intro/helloworld.png" class="center" />

<h2><a id="Triggers">Triggers</a></h2>

<p>When a call to <tt>WindowWait</tt> or <tt>WindowPrompt</tt> is made, the
  function waits for user input and returns all widget values, along with the
  name of the widget which triggered the return. The <tt>onTrigger</tt>
  attribute specifies which widgets will respond to user input.</p>

<p>For example, a typical window includes options and an OK button which the
  user presses to confirm his or her choices. In this case, the only widget
  that is set to trigger is the OK button. The button's <tt>onTrigger</tt>
  attribute is set to <tt>'return'</tt>. When pressed, the button
  <i>triggers</i>.</p>

<p>The <tt>onTrigger</tt> attribute may be set to one of following
  tokens:</p>
<ul>
  <li>
    <tt>'ignore'</tt>

    <p>Specifies that no action be taken when the widget's value changes.
      This is the default value for most widgets.</p>
    </li>
    <li>
      <tt>'return'</tt>

      <p>Specifies that a change in the widget's value causes a return from
      <tt>WindowWait</tt>.</p>
    </li>
    <li>
      <tt>'validate'</tt>

    <p>Is identical to <tt>'return'</tt> except that validation of
      the window's data is performed. For example, one or more
      <tt>Text</tt> widgets may have range-checking turned on if their
      <tt>min</tt> and <tt>max</tt> attributes have been set. In this case,
      when any widget whose <tt>onTrigger</tt> attribute is set to
      <tt>'validate'</tt>, <tt>WindowWait</tt> performs a validation of
      all widgets in the window. If values stored in any of the text fields are
      out of range, <tt>WindowWait</tt> reports an error to the user and will
      not return.</p>
    </li>
    <li>
      <tt>'exit'</tt>

      <p>Specifies that the calling task is to be killed when the widget is
      triggered. <tt>WindowWait</tt> does not return. This option is used to
      implement Cancel or Abort buttons.</p>
    </li>
  </ul>

<p><tt>onTrigger</tt> attributes may be set for each command button attached
  to the shell. In this case, the <tt>onTrigger</tt> is defined as a vector of
  tokens, in which the number of tokens matches the number of command
  buttons.</p>

<p>The following example shows a window with three command buttons, each one
  defining its own bubble help and onTrigger attribute:</p>

<pre class="code">
function ShellExample []
    local wkey = WindowCreate [
        name: 'shell',
        title: 'ShellExample',
        text: ['Validate', 'Apply', 'Cancel'],
        onTrigger: ['validate', 'return', 'exit'],
        bubbleHelp: [
            'Validate the number then return from WindowWait.',
            'It will simply return from WindowWait.',
            'Kill the task'
        ],

        Text: [
            name: 'text_field',
            type: 'int',
            title: 'Enter value:',
            max: 10,
            min: -10
        ]
    ];

    WindowShow wkey;
    loop
        local [values, trigger] = WindowWait wkey;
        if trigger == 'shell' then
            write ['Entered value:{}\n', values.text_field];
        endif
    endloop

    WindowDestroy wkey;
endfunction
</pre>

<p>The output of this program is:</p>

<img src="wt_intro/shell.png" class="center" />

<h2><a id="RemovingOrDestroyingWindows">Removing or Destroying Windows</a></h2>

<p>When the window is no longer required it can be destroyed with
  <tt>WindowDestroy</tt>. However, if <tt>WindowDestroy</tt> is not called, all
  memory associated with the window is automatically freed when the task which
  created the window is killed.</p>

<h1><a id="Prompters">Prompters</a></h1>

<p>The prompter is another kind of shell that is created inside a window
  specified by the <tt>location</tt> attribute. It behaves like an Hbox (i.e.
  its children are arranged horizontally), and has no command buttons.</p>

<p>By default, a stand-alone shell is created unless a valid location
  attribute is set, in which case a prompter is created. The value of the
  location attribute specifies the shell's owning window. The available
  locations are application dependent, and are usually specified as a window
  name and an optional window key if referring to a multiple-instance window
  (e.g. a Text Editor). The prompter may also specify a mode of interaction
  with its owning window.</p>

<p>Several of MOE's application windows support prompters. Each window
  has one or more prompting modes, which indicate the types of objects to
  select by the user. In the Sequence Editor, for example, one might have
  different prompters for deleting residues and chains. Application window
  locations and their prompting modes are listed below:</p>
<table class="titlebar">
<tr>
  <th>Location</th>
  <th>Mode</th>
  <th>Returns</th>
</tr>
<tr>
  <td><tt>'MOE'</tt></td>
  <td><tt>'pickNone'</tt><br />
  <tt>'pickAtom'</tt></td>
  <td><tt>[]</tt><br />
  atom key</td>
</tr>
<tr>
  <td><tt>'SequenceEditor'</tt></td>
  <td><tt>'pickNone'</tt><br />
  <tt>'pickResidue'</tt><br />
  <tt>'pickChain'</tt></td>
  <td><tt>[]</tt><br />
  residue key<br />
  chain key</td>
</tr>
<tr>
  <td><tt>['DatabaseViewer', dbkey]</tt></td>
  <td><tt>'pickNone'</tt><br />
  <tt>'pickEntry'</tt><br />
  <tt>'pickField'</tt><br />
  <tt>'pickCell'</tt></td>
  <td><tt>[]</tt><br />
  entry key<br />
  field name<br />
  [entry key, field name]</td>
</tr>
</table>

<p>Locations for the MOE Window and Sequence Editor are simple tokens because
  only one of each window can exist in the system. Since multiple database
  viewers may exist at any one time, the key of the specified viewer must also
  be included in order to prompt in the correct window.</p>

<p>Prompters may have any number of child objects. However, since the space
  where the prompter is shown is small, it is recommended to limit the number
  of children.</p>

<p>The prompter replaces the command line of the application window. The
  mouse cursor changes to a cross-hair while over the prompt region in the
  application window. Left button mouse clicks on the prompt region are
  intercepted and sent to the prompter instead of performing their usual
  function. Invalid mouse clicks are ignored. All other functionality in the
  window (and the rest of the application) is still available to the user. The
  prompter is canceled at any time by pressing <tt>Esc</tt> or by using the
  Cancel menu. If a prompter is activated while another is already active, the
  prompts stack. Mouse clicks apply to the visible prompter (i.e. the most
  recent).</p>

<p>The following example shows a function that labels selected atoms in the
  MOE Window:</p>

<pre class="code">
function AtomLabelPrompt []
    local wkey = WindowCreate [
        name: 'prompt',
        location: 'MOE',
        mode: 'pickAtom',
        title: 'Pick atom to label...'
    ];

    loop
        local [values, trigger] = WindowWait wkey;
        local atom = values.prompt;
        aSetLabelRes [atom, 1];
    endloop

    WindowDestroy wkey;
endfunction
</pre>

<p>The <tt>location</tt> attribute indicates where the prompt shell should be
  placed, in this case, in the prompt area of the MOE Window. The <tt>mode</tt>
  attribute specifies that atoms are being selected. This prompter loops
  indefinitely (until canceled with the <tt>Esc</tt> key), allowing the user to
  continue labeling atoms until <tt>Esc</tt> is pressed.</p>

<p>The output to the above code is:</p>

<img src="wt_intro/prompt.png" class="center" />

<h2><a id="Summary">Summary</a></h2>

<p>The following summarizes the window functions used for creating and
  displaying windows:</p>
<ul>
  <li>
    <tt>wkey = WindowCreate window_descriptor</tt>

<p>Creates a window defined by <tt>window_descriptor</tt>, and returns a
    unique window key to be used in subsequent window calls. The descriptor
    is a nested list of attribute-value pairs describing the window.</p>
  </li>
  <li>
    <tt>old_state = WindowShow [wkey, new_state]</tt>

<p>Reports the visibility state of the specified window and optionally
    shows or hides it. The old_state is always returned (1 = window exists
    and is visible, 0 otherwise). The new state is set if specified with
    <tt>new_state</tt>.</p>
  </li>
  <li>
    <tt>[widget_name_value_pairs, triggername] = WindowWait wkey</tt>

<p>Waits for the window specified by <tt>wkey</tt> to trigger.
    <tt>wkey</tt> is either the window key returned by <tt>WindowCreate</tt>
    or the window name specified with the <tt>windowName</tt> attribute.</p>
  </li>
</ul>

<h1><a id="Layout">Window Layout</a></h1>
<h3><a id="Alignment">Aligning Widgets</a></h3>

<p>The <i>alignment point</i> refers to a point on a widget used by the
  widget's parent to align the widget with its siblings.</p>

<p>For alignment purposes, a widget is broken down into the <i>title</i> and
  the <i>body</i>. The alignment point of a widget is calculated using the left
  edge of its body and its baseline, which is calculated differently for each
  type of widget.</p>

<p>The actual position of the vertical line along which vertically stacked
  widgets are lined up is calculated from the alignment points of all the
  widgets in each column. The bodies are left-justified, and titles are
  right-justified along that line.</p>

<p>Alignment points can be ignored by using the <tt>flushLeft</tt> and/or
  <tt>flushTop</tt> attributes. A widget with <tt>flushLeft</tt> on will be
  pushed as far left as possible within its cell. In the same way, a widget
  with <tt>flushTop</tt> on will be positioned as high as possible within its
  cell.</p>

<h3><a id="Size">Resizing Widgets</a></h3>

<p>Each widget has a base size defined by its intrinsics, attributes, and
  title. Managers arrange their children by creating a geometric grid (or
  matrix), with a child occupying one cell in the grid. Thus, the size of the
  cells of the grid depend on the sizes of the children.</p>

<p>Widgets can fill their cells in both horizontal and vertical directions by
  setting the <tt>extendH</tt> and <tt>extendV</tt> attributes to 1. These
  attributes are useful for getting widgets of different sizes to line up
  properly.</p>

<p>Resizable windows can also be specified. A resizable window has one or
  more widgets which resize when the window is resized. Listbox objects, for
  example, are usually resizable in a window to allow the user to see more of
  the list when the window is enlarged. If more
  than one widget is resizable, each will be resized proportionally.</p>



<h2><a id="WindowFunctions">Window Functions</a></h2>

<p>The toolkit provides several convenience functions that display simple
  windows such as simple prompts and warning messages. The following functions
  display commonly used interfaces:</p>
<ul>
  <li>
    <tt>WindowPrompt</tt>

<p>Accepts a window descriptor and a set of default values and puts up a
    panel with <b>OK</b> and <b>Cancel</b> buttons. The OK <tt>onTrigger</tt>
    attribute is set to '<tt>validate</tt>', while the Cancel
    <tt>onTrigger</tt> attribute is set to '<tt>exit</tt>'. The
    return value is the data values for the named widgets in the descriptor
    as a tagged vector of widget name:value pairs.</p>
  </li>
  <li>
    <tt>FilePrompt</tt>

<p>This function is a convenience function that allows the user to select
    a file from within a file selection box and returns the full name of the
    selected file.</p>
  </li>
</ul>

<p>The following functions are <i>application modal</i> and are used for
quick warnings or prompts from within another SVL program. They will block
the user from interacting with any other part of the application until the
warning is acknowledged.</p>
<ul>
  <li>
    <tt>Warning</tt>

<p>Includes an <b>OK</b> button that, when pressed, returns to the
    calling function. The function which invoked it resumes.</p>
  </li>
  <li>
    <tt>OKCancel</tt>

<p>Includes <b>OK</b> and <b>Cancel</b> buttons. Pressing <b>OK</b> or
    <tt>Return</tt> returns null. Pressing Cancel or <tt>Esc</tt>, kills the
    task which initiated it.</p>
  </li>
  <li>
    <tt>YesNo</tt>

<p>Includes Yes and No buttons, where Yes is set as the default. Pressing
    Yes, or <tt>Return</tt> or <tt>Esc</tt>, returns 1. Pressing No returns
    0.</p>
  </li>
  <li>
    <tt>NoYes</tt>

<p>Includes Yes and No buttons (but is the inverse of YesNo), where No is
    set as the default. Pressing Yes returns 1. Pressing No, or
    <tt>Return</tt> or <tt>Esc</tt>, returns 0.</p>
  </li>
  <li>
    <tt>YesNoCancel</tt>

<p>Includes Yes, No, and Cancel buttons. Pressing Yes or <tt>Return</tt>
    returns 1. Pressing No returns 0. Pressing Cancel or <tt>Esc</tt> returns
    null, in which case the task from which the modal question was initiated
    is also killed.</p>
  </li>
</ul>

<h1><a id="FunctionRef">Widget Function Reference</a></h1>

<p>Window Functions:</p>
<table class="functionList">
  <tr>
    <td><a href="fcnref/wt_create.htm">WindowCreate</a></td>
    <td><a href="fcnref/wt_create.htm">WindowDestroy</a></td>
    <td><a href="fcnref/wt_data.htm">WindowGetData</a></td>
    <td><a href="fcnref/wt_create.htm">WindowPrompt</a></td>
  </tr>
  <tr>
    <td><a href="fcnref/wt_data.htm">WindowSetData</a></td>
    <td><a href="fcnref/wt_attr.htm">WindowSetAttr</a></td>
    <td><a href="fcnref/wt_show.htm">WindowName</a></td>
    <td><a href="fcnref/wt_show.htm">WindowNameList</a></td>
  </tr>
  <tr>
    <td><a href="fcnref/wt_show.htm">WindowKey</a></td>
    <td><a href="fcnref/wt_show.htm">WindowKeyList</a></td>
    <td><a href="fcnref/wt_show.htm">WindowShow</a></td>
    <td><a href="fcnref/wt_data.htm">WindowValues</a></td>
  </tr>
  <tr>
    <td><a href="fcnref/wt_wait.htm">WindowWait</a></td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
</table>

<p>Widget Reference Pages:</p>

<p><a href="fcnref/wt_core.htm">Core Attributes</a><br />
  <a href="fcnref/wt_const.htm">Window Constants</a></p>

<table class="functionList">
  <tr>
    <td><a href="fcnref/wt_button.htm">Button</a></td>
    <td><a href="fcnref/wt_cli.htm">Cli</a></td>
    <td><a href="fcnref/wt_check.htm">Checkbox</a></td>
    <td><a href="fcnref/wt_edit.htm">Edit</a></td>
    <td><a href="fcnref/wt_fsb.htm">FSB</a></td>
  </tr>
  <tr>
    <td><a href="fcnref/wt_fsb.htm">FSBText</a></td>
    <td><a href="fcnref/wt_vbox.htm">Hbox</a></td>
    <td><a href="fcnref/wt_label.htm">Label</a></td>
    <td><a href="fcnref/wt_list.htm">Listbox</a></td>
    <td><a href="fcnref/wt_vbox.htm">Mbox</a></td>
  </tr>
  <tr>
    <td><a href="fcnref/wt_option.htm">Option</a></td>
    <td><a href="fcnref/wt_pager.htm">Pager</a></td>
    <td><a href="fcnref/wt_plot.htm">Plot</a></td>
    <td><a href="fcnref/wt_shell.htm">Prompter</a></td>
    <td><a href="fcnref/wt_radio.htm">Radio</a></td>
  </tr>
  <tr>
    <td><a href="fcnref/wt_rangeslider.htm">RangeSlider</a></td>
    <td><a href="fcnref/wt_scale.htm">Scale</a></td>
    <td><a href="fcnref/wt_shell.htm">Shell</a></td>
    <td><a href="fcnref/wt_sep.htm">Separator</a></td>
    <td><a href="fcnref/wt_slider.htm">Slider</a></td>
  </tr>
  <tr>
    <td><a href="fcnref/wt_spin.htm">Spin</a></td>
    <td><a href="fcnref/wt_text.htm">Text</a></td>
    <td><a href="fcnref/wt_trackb.htm">Trackball</a></td>
    <td><a href="fcnref/wt_vbox.htm">Vbox</a></td>
    <td><a href="fcnref/wt_wheel.htm">Wheel</a></td>
  </tr>
</table>

<p>Other window related functions:</p>
<table class="functionList">
  <tr>
    <td><a href="fcnref/yesno.htm">Warning</a></td>
    <td><a href="fcnref/yesno.htm">OKCancel</a></td>
    <td><a href="fcnref/yesno.htm">YesNo</a></td>
    </tr><tr>
    <td><a href="fcnref/yesno.htm">NoYes</a></td>
    <td><a href="fcnref/yesno.htm">YesNoCancel</a></td>
    <td><a href="fcnref/fprompt.htm">FilePrompt</a></td>
  </tr>
</table>

<h1>See Also</h1>

<p><a href="../../moe/hellomoe.htm#GUI_Basics">MOE GUI Basics</a><br />
  <a href="../../tutorials/wintour.htm">Window Toolkit Tutorial</a></p>
  <!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

