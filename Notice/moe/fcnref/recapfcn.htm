<!DOCTYPE html>
<html>

<!--
!!    MOE On-Line Manuals
!!    COPYRIGHT (C) CHEMICAL COMPUTING GROUP ULC.  ALL RIGHTS RESERVED.
!!-->
<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="keywords:" />
  <meta name="keywords" content="functions: recap_Analysis, recap_Synthesis" />
  <meta name="keywords" content=
  "functions: recap_SynthesizeOpen, recap_SynthesizeClose" />
  <meta name="keywords" content="functions: recap_SynthesizeRandom" />
  <meta name="keywords" content="functions: recap_BondClass" />
  <title>RECAP Analysis and Synthesis</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    RECAP Analysis and Synthesis
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<pre class="code">
<a class="fcnlink" href=
"#recap_Analysis">recap_Analysis</a> ['infile', 'outfile', [
    afield:       token,
    acompare:     token,
    athreshold:   number,
    esel:         flag,
    opendbv:      flag,
    verbose:      flag
]];

<a class="fcnlink" href=
"#recap_Synthesis">recap_Synthesis</a> ['outfile', fragfiles, [
    filter:       token,
    reactive:     flag,
    modelfile:    token,
    modelcmp:     token,
    modelval:     number,
    maxmol:       number,
    maxiter:      number,
    opendbv:      flag,
    wash:         flag,
    Qmean:        number,
    Qdev:         number,
    verbose:      flag
]];

ctx = <a class="fcnlink" href=
"#recap_SynthesizeOpen">recap_SynthesizeOpen</a> [mdbfile, wfield, pweight, sweight]
mol = <a class="fcnlink" href=
"#recap_SynthesizeRandom">recap_SynthesizeRandom</a> [ctx, options]
<a class="fcnlink" href=
"#recap_SynthesizeClose">recap_SynthesizeClose</a> ctx
token = <a class="fcnlink" href=
"#recap_BondClass">recap_BondClass</a> [atom_keys1, atom_keys2]
</pre>

<h1>Description</h1>

<p>The RECAP Analysis and RECAP Synthesis functions work in tandem to analyze
  collections of molecules according to simple retrosynthetic rules and to
  randomly generate, <i>de novo</i>, novel chemical structures that have a high
  likelihood of being synthesizable.</p>
<a id="recap_Analysis"></a>
<hr noshade="noshade" />

<pre>
<span class="fcndef">recap_Analysis</span> ['infile', 'outfile', options]
</pre>

<p>The purpose of <tt>recap_Analysis</tt> is to fragment every molecule in a
  database given by <tt>infile</tt> according to simple retrosynthetic analysis
  rules and collect statistics on the resulting fragments and write them to an
  output database given by <tt>outfile</tt>. The <tt>options</tt> argument is a
  tagged vector containing:</p>
<div class="indent">
  <dl>
    <dt><tt>afield</tt> : <i>token</i></dt>
    <dd>The name of a numeric field in the <tt>infile</tt> database
    containing activity data. An empty token (<tt>''</tt>), the
    default, means that no activity data is present in the input database and
    input molecules will be deemed to have an activity value of 0.</dd>
    <dt><tt>acompare</tt> : <i>token</i></dt>
    <dd>The comparison operator to use when determining whether an input
    molecule is considered active. Legal values are <tt>'&lt;'
    '&gt;' '&lt;=' '&gt;=' '==' '='
    '&lt;&gt;'</tt>. The default is <tt>'&gt;'</tt>. For
    example, if <tt>afield</tt> specifies pKi data, <tt>acompare</tt> is
    <tt>'&gt;'</tt> and <tt>athreshold</tt> is 6 then input molecules will
    considered active if the pKi value is greater than 6.</dd>
    <dt><tt>athreshold</tt> : <i>number</i></dt>
    <dd>The threshold value used to determine whether an input molecule is
    active. This value is only used if <tt>afield</tt> specifies a numeric
    field in the <tt>infile</tt> database. The default is 0.</dd>
    <dt><tt>esel</tt> : <i>flag</i></dt>
    <dd>If <tt>true</tt> then only entries selected in the Database Viewer
    opened on the <tt>infile</tt> will be used in the calculation; other
    entries will be ignored. The default is 0.</dd>
    <dt><tt>opendbv</tt> : <i>flag</i></dt>
    <dd>If <tt>true</tt> then a Database Viewer will be opened on the output
    database given by <tt>outfile</tt>. The default is 0.</dd>
    <dt><tt>verbose</tt> : <i>flag</i></dt>
    <dd>If <tt>true</tt> then progress information will be written to the SVL
    Commands window during the calculation. The default is 1.</dd>
  </dl>
</div>

<p>As the calculation proceeds, fragment data will be written to the output
  database given by <tt>outfile</tt>. This database will contain a molecule
  field, an extended SMILES name field and numeric frequency information.</p>
<a id="recap_Synthesis"></a>
<hr noshade="noshade" />

<pre><span class=
  "fcndef">recap_Synthesis</span> ['outfile', fragfiles, options]
</pre>

<p>The purpose of <tt>recap_Synthesis</tt> is to randomly recombine the RECAP
  Analysis fragments given by <tt>fragfiles</tt> in an effort to generate
  synthetically reasonable novel chemical structures which are to be written to
  an output database given by <tt>outfile</tt>. Optional property filters and
  screening predictive models (such as QSAR/QSPR models, fingerprint similarity
  models or pharmacophore models) can be applied to the synthesis output.</p>

<p>Molecule generation proceeds by selecting fragments in the databases
  specified in the <tt>fragfiles</tt> argument which must have the form
  <tt>[filename,wfield,P,S]</tt> where</p>
<div class="indent">
  <dl>
    <dt><tt>filename(i)</tt></dt>
    <dd>is the token name of a molecular database containing (minimally) a
    character field called <tt>'name'</tt> with extended SMILES
    fragment names as written by <tt>recap_Analysis</tt>.</dd>
    <dt><tt>wfield(i)</tt></dt>
    <dd>is the token field name in <tt>filename(i)</tt> containing numeric
    data to be interpreted as a random sampling weight for each fragment.
    Fragments will be sampled from <tt>filename(i)</tt> according to the
    distribution induced by the numeric values in <tt>wfield(i)</tt>. An
    empty token, <tt>''</tt> means uniform sampling (no
    weights).</dd>
    <dt><tt>P(i)</tt></dt>
    <dd>is a numeric value used as weight when selecting one of the fragment
    databases for use as the primary or root fragment. Molecule generation
    proceeds by randomly sampling a root fragment followed by substituting
    randomly sampled substituent fragments. At each stage, whether root
    fragment or substituent fragment, one of the <tt>fragfiles</tt> databases
    is chosen randomly according to a distribution specified by weights. The
    <tt>P(i)</tt> weight is used as the weight for <tt>filename(i)</tt> when
    a root fragment is generated.</dd>
    <dt><tt>S(i)</tt></dt>
    <dd>is a numeric value used as weight when selecting one of the fragment
    databases for use as the secondary or substituent fragment. Molecule
    generation proceeds by randomly sampling a root fragment followed by
    substituting randomly sampled substituent fragments. At each stage,
    whether root fragment or substituent fragment, one of the
    <tt>fragfiles</tt> databases is chosen randomly according to a
    distribution specified by weights. The <tt>S(i)</tt> weight is used as
    the weight for <tt>filename(i)</tt> when a substituent fragment is
    generated.</dd>
  </dl>
</div>

<p>The <tt>options</tt> argument is a tagged vector that specifies additional
  arguments that affect the calculation:</p>
<div class="indent">
  <dl>
    <dt><tt>filter</tt> : <i>value</i></dt>
    <dd>
      The <tt>filter</tt> option specifies a first stage acceptance filter on
      generated molecules. Molecules that do not satisfy the requirements of
      the filter are not written to the output database. Legal values are
      <ol>
        <li><tt>'None'</tt> for no filtering (the default).</li>
        <li><tt>'Leadlike'</tt> for Oprea's leadlike test.</li>
        <li><tt>'Druglike'</tt> for Lipinski's leadlike
        test.</li>
        <li><tt>[MW, logP, donacc]</tt> to output only molecules with a
        molecular weight less than or equal to <tt>MW</tt> and a
        logP(octanol/water) less than or equal to <tt>logP</tt> and hydrogen
        donor + hydrogen acceptor sum less than or equal to
        <tt>donacc</tt>.</li>
      </ol>
    </dd>
    <dt><tt>reactive</tt> : <i>flag</i></dt>
    <dd>If <tt>true</tt> then molecules containing commonly reactive groups
    will be written to the output database; otherwise such molecules will be
    suppressed and not written to the output database. The default is 1.</dd>
    <dt><tt>modelfile</tt> : <i>token</i></dt>
    <dd>The name of a QSAR <tt>.fit</tt> file or a Model Composer
    <tt>.mom</tt> model file used to further filter the generated molecules.
    This option, together with <tt>modelcmp</tt> and <tt>modelval</tt>
    specify a condition that molecules must satisfy in order to be written to
    the output database.</dd>
    <dt><tt>modelcmp</tt> : <i>token</i></dt>
    <dd>The comparison operator to use when determining whether a generated
    molecule satisfies the model given by <tt>modelfile</tt>. This option,
    together with <tt>modelfile</tt> and <tt>modelval</tt> specify a
    condition that molecules must satisfy in order to be written to the
    output database. Legal values are <tt>'&lt;' '&gt;'
    '&lt;=' '&gt;=' '==' '='
    '&lt;&gt;'</tt>. The default is <tt>'&gt;'</tt>.</dd>
    <dt><tt>modelval</tt> : <i>number</i></dt>
    <dd>The threshold value used to determine whether a generated molecule
    satisfies the model given by <tt>modelfile</tt>. This option, together
    with <tt>modelfile</tt> and <tt>modelcmp</tt> specify a condition that
    molecules must satisfy in order to be written to the output database. The
    default is 0.</dd>
    <dt><tt>maxmol</tt> : <i>number</i></dt>
    <dd>Specifies the maximum number of molecules that will be written to the
    output database. The <tt>recap_Synthesis</tt> function will terminate
    when the output database contains the given number of molecules. The
    default is 1000.</dd>
    <dt><tt>maxiter</tt> : <i>number</i></dt>
    <dd>Specifies the maximum number of attempts that will be made to
    generate and write a molecule to the output database. The
    <tt>recap_Synthesis</tt> function will terminate when the number of
    attempts exceeds the given value independent of how many molecules have
    been written to the output database. The default is 5,000,000.</dd>
    <dt><tt>wash</tt> : <i>flag</i></dt>
    <dd>If <tt>true</tt> then generated molecules will be &quot;washed&quot;;
    that is, acids will be deprotonated and bases will be protonated. The
    default is 0.</dd>
    <dt><tt>Qmean</tt> : <i>number</i></dt>
    <dd>The number of heavy atoms per molecule in the output database will be
    the specified number, on average. The default is 30 (good for drug-like);
    use 25 for lead-like.</dd>
    <dt><tt>Qdev</tt> : <i>number</i></dt>
    <dd>The standard deviation of the number of heavy atoms per molecule in
    the output database will be the specified number, on average. The default
    is 11.</dd>
    <dt><tt>opendbv</tt> : <i>flag</i></dt>
    <dd>If <tt>true</tt> then a Database Viewer will be opened on the output
    database given by <tt>outfile</tt>. The default is 0.</dd>
    <dt><tt>verbose</tt> : <i>flag</i></dt>
    <dd>If <tt>true</tt> then progress information will be written to the SVL
    Commands window during the calculation. The default is 1.</dd>
  </dl>
</div>

<a id="recap_SynthesizeClose"></a>
<a id="recap_SynthesizeRandom"></a>
<a id="recap_SynthesizeOpen"></a>
<hr noshade="noshade" />

<pre>ctx = <span class=
  "fcndef">recap_SynthesizeOpen</span> [mdbfile, wfield, pweight, sweight]
mol = <span class="fcndef">recap_SynthesizeRandom</span> [ctx, options]
<span class="fcndef">recap_SynthesizeClose</span> ctx;
</pre>

<p>These functions are used to access the lower level RECAP Synthesis
  functionality. The <tt>[mdbfile,wfield,pweight,sweight]</tt> arguments to
  <tt>recap_SynthesizeOpen</tt> are identical in definition to the
  <tt>fragfiles</tt> argument in <tt>recap_Synthesize</tt> and interpreted in
  exactly the same manner. The returned <tt>ctx</tt> contains information
  needed to generate molecules.</p>

<p>The <tt>recap_SynthesizeClose</tt> function must be used to release any
  resources contained in <tt>ctx</tt>.</p>

<p>The <tt>recap_SynthesizeRandom</tt> function generates a random novel
  chemical structure and returns it in the <tt>mol</tt> vector. The
  <tt>options</tt> argument is a tagged vector containing <tt>Qmean</tt> and
  <tt>Qdev</tt> numbers interpreted exactly as for <tt>recap_Synthesize</tt>.
  For this function the default <tt>Qmean</tt> is 25 and <tt>Qdev</tt> is
  11.</p>
<a id="recap_BondClass"></a>
<hr noshade="noshade" />

<pre>token = <span class=
  "fcndef">recap_BondClass</span> [atom_keys1, atom_keys2]
</pre>

<p>The <tt>recap_BondClass</tt> function provides a means to detect whether
  particular bonds are RECAP bonds. For each bond specified by two atom keys
  <tt>atom_keys1(i)</tt> and <tt>atom_keys2(i)</tt> a token is returned. The
  value of <tt>token(i)</tt> is the empty token (<tt>''</tt>) if
  <tt>atom_keys1(i)</tt> and <tt>atom_keys2(i)</tt> are not bonded or do not
  correspond to a RECAP bond; otherwise, the <tt>token(i)</tt> is the chemical
  bond class name of a RECAP cuttable bond.</p>

<h1>See Also</h1>

<p><a href="../../apps/recap.htm">RECAP Analysis and Synthesis</a>
  </p>
<!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

