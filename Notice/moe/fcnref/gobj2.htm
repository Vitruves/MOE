<!DOCTYPE html>
<html>

<!--
!!    MOE On-Line Manuals
!!    COPYRIGHT (C) CHEMICAL COMPUTING GROUP ULC.  ALL RIGHTS RESERVED.
!!-->
<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="keywords:" />
  <meta name="keywords" content=
  "functions: G_Cat, G_Cross, G_Box, G_WireBox" />
  <meta name="keywords" content=
  "functions: G_Sphere, G_WireSphere, G_PolySphere" />
  <meta name="keywords" content=
  "functions: G_Cylinder, G_WireCylinder, G_PolyCylinder" />
  <meta name="keywords" content="functions: G_Cone, G_WireCone, G_PolyCone" />
  <meta name="keywords" content=
  "functions: G_Arrow, G_WireArrow, G_PolyArrow" />
  <meta name="keywords" content="functions: G_Cap, G_WireCap, G_PolyCap" />
  <meta name="keywords" content="functions: G_Circle, G_WireCircle" />
  <meta name="keywords" content="functions: UnitSphere, UnitCircle" />
  <meta name="keywords" content="functions: CircleNpoints" />
  <title>Graphics Object Functions: G_Cat...</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    Graphics Object Functions: G_Cat...
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<pre>
    obj_data = <a class="fcnlink" href=
"#G_Cat">G_Cat</a> [obj_data1, obj_data2, ... obj_dataN]

    obj_data = <a class="fcnlink" href=
"#G_Cross">G_Cross</a> [color, center, radius]
    obj_data = <a class="fcnlink" href=
"#G_Box">G_Box</a> [color, corner1, corner2]
    obj_data = <a class="fcnlink" href=
"#G_WireBox">G_WireBox</a> [color, corner1, corner2]

    obj_data = <a class="fcnlink" href=
"#G_Sphere">G_Sphere</a> [color, center, radius, quality]
    obj_data = <a class="fcnlink" href=
"#G_WireSphere">G_WireSphere</a> [color, center, radius, quality]
    obj_data = <a class="fcnlink" href=
"#G_PolySphere">G_PolySphere</a> [color, center, radius, quality]

    obj_data = <a class="fcnlink" href=
"#G_Cylinder">G_Cylinder</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href=
"#G_WireCylinder">G_WireCylinder</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href=
"#G_PolyCylinder">G_PolyCylinder</a> [color, center, axis, radius, quality]

    obj_data = <a class="fcnlink" href=
"#G_Cone">G_Cone</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href=
"#G_WireCone">G_WireCone</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href=
"#G_PolyCone">G_PolyCone</a> [color, center, axis, radius, quality]

    obj_data = <a class="fcnlink" href=
"#G_Arrow">G_Arrow</a> [color, center, axis, radius, cap, quality]
    obj_data = <a class="fcnlink" href=
"#G_WireArrow">G_WireArrow</a> [color, center, axis, radius, cap, quality]
    obj_data = <a class="fcnlink" href=
"#G_PolyArrow">G_PolyArrow</a> [color, center, axis, radius, cap, quality]

    obj_data = <a class="fcnlink" href=
"#G_Cap">G_Cap</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href=
"#G_WireCap">G_WireCap</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href=
"#G_PolyCap">G_PolyCap</a> [color, center, axis, radius, quality]

    obj_data = <a class="fcnlink" href=
"#G_Circle">G_Circle</a> [color, center, axis, radius, quality]
    obj_data = <a class="fcnlink" href=
"#G_WireCircle">G_WireCircle</a> [color, center, axis, radius, quality]

    [tri_idx, [x,y,z] = <a class="fcnlink" href=
"#UnitSphere">UnitSphere</a> quality;
    [x, y] = <a class="fcnlink" href="#UnitCircle">UnitCircle</a> n_points;

    [seg, idx, colors, [x,y,z], [nx,ny,nz] ] = <a class="fcnlink" href=
"#G_Xxx...">G_Xxx...</a>
    obj_data = <a class="fcnlink" href="#G_Xxx...">G_Xxx...</a>
    <a class="fcnlink" href="#GVertex">GVertex</a> cat [ obj_key, obj_data ]
</pre>
<a id="G_Xxx..."></a>
<a id="GVertex"></a>
<h1>Description</h1>

<p><b>General Usage</b></p>

<p>The <tt><span class="fcndef">G_Xxx...</span></tt> functions allow the
  creation and manipulation of data sets that define 3D graphics objects. The
  actual graphics objects are then created with the SVL function
  <tt>GVertex</tt>. For example, the function <tt>G_Box</tt> returns the data
  vectors that describe a unit box:</p>

<pre>
    local obj_data = G_Box [color, corner1, corner2]
</pre>

<p>The data can then be used directly (without any modification) to display
  the box:</p>

<pre>
    <span class="fcndef">GVertex</span> cat [obj_key, obj_data]
</pre>

<p>or it can be broken down into separate vectors, modified or merged with
  other objects, and then used to display customized objects:</p>

<pre>
    local [seg, idx, colors, [x,y,z], [nx,ny,nz] ] = obj_data;
    z = z + z_offset;                           // move along the Z axis
    colors = my_color_function [x,y,z];         // add custom colors
    GVertex cat [ obj_key, [seg, idx, colors, [x,y,z], [nx,ny,nz] ] ];
</pre>

<p>All arguments of the <tt>G_Xxx...</tt> functions unit extend. For example,
  the following call returns the object data of two identical unit cubes,
  positioned at points (0,0,0) and (0,0,3):</p>

<pre>
    G_Box [color, [0,0,[0,3]], [1,1,[1,4]]]
</pre>

<p>The <tt>color</tt> argument applies to all vertices of the object. To
  color vertices individually, the object data must be explicitly broken down
  and customized, as in the example above.</p>

<p>When <tt>G_Xxx...</tt> represents a solid object (all except
  <tt>G_Cross</tt>), the <tt>G_WireXxx...</tt> form of the function returns the
  wireframe rendering of the object.</p>

<p>When <tt>G_Xxx...</tt> represents a solid object approximated by a number
  of polyhedral facets (spheres, cylinders, cones, and caps), the returned
  normals are perpendicular to the object itself (e.g. radial in case of a
  sphere), not to the facets. To obtain true polyhedral rendering, with normals
  perpendicular to each facet of the polyhedron, the <tt>G_PolyXxx...</tt> form
  of the function should be used instead.</p>

<p>The number of facets used in the polyhedron is governed by the
  <tt>quality</tt> argument, which follows a subjective scale of visual
  quality: 0..poor, 1..acceptable, 2..good, 3..excellent, 4..excessive, 5 and
  higher..wasteful.</p>

<p>The positioning of facets around cylinders, cones, caps, and circles uses
  the same algorithm, i.e. when a cap is positioned on top of a cylinder of the
  same quality, the edges of facets will match.</p>
<a id="G_Cross"></a>
<a id="G_Box"></a>
<a id="G_WireBox"></a>
<a id="G_Circle"></a>
<a id="G_WireCircle"></a>
<hr noshade="noshade" />

<p><b>Simple Objects</b></p>

<p>Simple objects include a simple 3D cross consisting of three intersecting
  lines, a rectangular box, and a polygonal approximation of a circle.</p>

<pre>
    obj_data = <span class="fcndef">G_Cross</span> [color, center, radius]
</pre>

<p>Function <tt>G_Cross</tt> returns three perpendicular intersecting lines,
  each of length <tt>radius</tt>, with the intersection point at
  <tt>center</tt>.</p>

<pre>
    obj_data = <span class="fcndef">G_Box</span> [color, corner1, corner2]
    obj_data = <span class="fcndef">G_WireBox</span> [color, corner1, corner2]
</pre>

<p>Function <tt>G_Box</tt> returns a box with the 3D diagonal formed by
  points <tt>corner1</tt> and <tt>corner2</tt>. The box does not depend on the
  order of the points or the choice of the diagonal.</p>

<pre>
    obj_data = <span class=
"fcndef">G_Circle</span> [color, center, axis, radius, quality]
    obj_data = <span class=
"fcndef">G_WireCircle</span> [color, center, axis, radius, quality]
</pre>

<p>Function <tt>G_Circle</tt> returns a circle of given <tt>center</tt> and
  <tt>radius</tt>, perpendicular to <tt>axis</tt>. The magnitude of
  <tt>axis</tt> is irrelevant.</p>
<a id="G_Sphere"></a>
<a id="G_WireSphere"></a>
<a id="G_PolySphere"></a>
<a id="G_Cylinder"></a>
<a id="G_WireCylinder"></a>
<a id="G_PolyCylinder"></a>
<a id="G_Cone"></a>
<a id="G_WireCone"></a>
<a id="G_PolyCone"></a>
<a id="G_Arrow"></a>
<a id="G_WireArrow"></a>
<a id="G_PolyArrow"></a>
<a id="G_Cap"></a>
<a id="G_WireCap"></a>
<a id="G_PolyCap"></a>
<hr noshade="noshade" />

<p><b>Spheres and Cylinders</b></p>

<p>Spheres and cylinders are approximated by a polyhedron of multiple facets.
  The number of facets is governed by the <tt>quality</tt> argument which
  indicates the (subjective) visual quality of the polyhedral
  approximation.</p>

<pre>
    obj_data = <span class=
"fcndef">G_Sphere</span> [color, center, radius, quality]
    obj_data = <span class=
"fcndef">G_WireSphere</span> [color, center, radius, quality]
    obj_data = <span class=
"fcndef">G_PolySphere</span> [color, center, radius, quality]
</pre>

<p>Function <tt>G_Sphere</tt> returns a sphere of given <tt>center</tt> and
  <tt>radius</tt>. A sphere is an object created by rotating a point about a
  center, i.e. a sphere consists of all points at the same distance from the
  center.</p>

<pre>
    obj_data = <span class=
"fcndef">G_Cylinder</span> [color, center, axis, radius, quality]
    obj_data = <span class=
"fcndef">G_WireCylinder</span> [color, center, axis, radius, quality]
    obj_data = <span class=
"fcndef">G_PolyCylinder</span> [color, center, axis, radius, quality]
</pre>

<p>Function <tt>G_Cylinder</tt> returns a cylinder of given parameters. A
  cylinder is an object created by rotating a line segment about an axis
  parallel to the line segment.</p>

<pre>
    obj_data = <span class=
"fcndef">G_Cone</span> [color, center, axis, radius, quality]
    obj_data = <span class=
"fcndef">G_WireCone</span> [color, center, axis, radius, quality]
    obj_data = <span class=
"fcndef">G_PolyCone</span> [color, center, axis, radius, quality]
</pre>

<p>Function <tt>G_Cone</tt> returns a cone of given parameters. A cone is an
  object created by rotating a line segment about an axis that intersects the
  line segment at one of its end points.</p>

<pre>
    obj_data = <span class=
"fcndef">G_Arrow</span> [color, center, axis, radius, cap, quality]
    obj_data = <span class=
"fcndef">G_WireArrow</span> [color, center, axis, radius, cap, quality]
    obj_data = <span class=
"fcndef">G_PolyArrow</span> [color, center, axis, radius, cap, quality]
</pre>

<p>Function <tt>G_Arrow</tt> returns an arrow of given parameters. An arrow
  is a cylinder capped by one or two cones. The <tt>radius</tt> parameter
  specifies the radius of the cylinder. The cone radius is somewhat larger. The
  length of the cone is between 1/3 and 2/3 of the length of the arrow. The
  <tt>cap</tt> parameter determines the presence of the cone(s): If
  <tt>cap=2</tt> or <tt>-2</tt>, then the arrow is drawn with cones at both
  ends. If <tt>cap=1</tt> or <tt>-1</tt>, then only one cone is drawn at either
  end. (If <tt>cap=-1</tt>, the cone points at the center.) If <tt>cap=0</tt>,
  then no cones are drawn; both ends are drawn flat. <!--
<ul>
    <li><b>-1:</b> One cone is drawn pointing at the center. </li>
    <li><b>1:</b> One cone is drawn pointing at (center+axis). </li>
    <li><b>2,-2:</b> Two cones are drawn at both ends. </li>
    <li><b>0:</b> No cones are drawn; both ends are drawn flat. </li>
</ul>
--></p>

<pre>
    obj_data = <span class=
"fcndef">G_Cap</span> [color, center, axis, radius, quality]
    obj_data = <span class=
"fcndef">G_WireCap</span> [color, center, axis, radius, quality]
    obj_data = <span class=
"fcndef">G_PolyCap</span> [color, center, axis, radius, quality]
</pre>

<p>Function <tt>G_Cap</tt> returns a semi-spherical cap of given parameters.
  A cap is an object created by intersecting a sphere with a half-space.</p>

<p>Functions <tt>G_Cylinder, G_Cone, G_Arrow, G_Cap</tt> return rotationally
  symmetric objects that share the same set of parameters. The radius of the
  base of each object is given by the argument <tt>radius</tt>. The base of the
  object is centered at <tt>center</tt>. The top of the object is centered at
  <tt>center+axis</tt>. The quality of the polyhedral approximation is governed
  by the value of the <tt>quality</tt> argument. The polyhedral approximation
  of circles, cylinders, arrows, cones, and caps uses the same algorithm.</p>
<a id="G_Cat"></a>
<a id="UnitSphere"></a>
<a id="CircleNpoints"></a>
<a id="UnitCircle"></a>
<hr noshade="noshade" />

<p><b>Utilities</b></p>

<p>In addition to the <tt>G_Xxx...</tt> functions, the following utility
  functions can further customize the graphics data objects.</p>

<pre>
    obj_data = <span class=
"fcndef">G_Cat</span> [obj_data1, obj_data2, ... obj_dataN]
</pre>

<p>Function <tt>G_Cat</tt> returns an object composed of objects given as
  arguments. In addition to simply catenating the objects together and adding
  offsets to the indices, the function finds and removes duplicate vertices
  (defined by their color, coordinates and normals) and duplicate graphics
  primitives (points, lines, triangles).</p>

<pre>
    [tri_idx, [x,y,z] = <span class="fcndef">UnitSphere</span> quality;
</pre>

<p>Function <tt>UnitSphere</tt> returns an approximation of a unit sphere.
  Vectors <tt>[x,y,z]</tt> contain 3D coordinates of points on the unit sphere
  centered at point (0,0,0). Vector <tt>tri_idx</tt> describes triangulation of
  the sphere: each successive three numbers in the vector are indices of
  vertices forming one triangle.</p>

<pre>
    n_points = <span class="fcndef">CircleNpoints</span> quality;
    [x, y] = <span class="fcndef">UnitCircle</span> n_points;
</pre>

<p>Function <tt>CircleNpoints</tt> returns the number of points used to
  approximate a circle of given <tt>quality</tt>.</p>

<p>Function <tt>UnitCircle</tt> returns an approximation of a unit circle of
  given number of points, <tt>n_points</tt>. Vectors <tt>[x,y]</tt> contain 2D
  coordinates of points on the unit circle centered at point (0,0,0).</p>

<p><b>Example</b></p>

<p>A working example that uses all the above functions is stored in file
  <tt>$MOE/sample/gobjdemo.svl</tt>.</p>

<h1>See Also</h1>

<p><a href="gobj.htm">Graphics Object Functions</a></p>

<p><a class="svl" href="gsurface.htm">GSurface</a></p>
  <!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

