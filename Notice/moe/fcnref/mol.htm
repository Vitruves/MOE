<!DOCTYPE html>
<html>

<!--
!!    MOE On-Line Manuals
!!    COPYRIGHT (C) CHEMICAL COMPUTING GROUP ULC.  ALL RIGHTS RESERVED.
!!-->
<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="keywords:" />
  <meta name="keywords" content="functions: mol_Cat" />
  <meta name="keywords" content=
  "functions: mol_Chirality, mol_Create, mol_CreateHidden" />
  <meta name="keywords" content=
  "functions: mol_aMask, mol_rMask, mol_cMask, mol_Heavy, mol_aPermute" />
  <meta name="keywords" content=
  "functions: mol_aPos, mol_aSetPos, mol_aName" />
  <meta name="keywords" content=
  "functions: mol_aCount, mol_rCount, mol_cCount" />
  <meta name="keywords" content=
  "functions: mol_EncodePos, mol_DecodePos, mol_DecodeInfo" />
  <title>MOE Molecule Functions: mol_Cat, mol_aCount, ...</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    MOE Molecule Functions: mol_Cat, mol_aCount,
    ...
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<pre>
    new_mol       = <a class="fcnlink" href="#mol_Cat">mol_Cat</a> mols

    positions     = <a class="fcnlink" href="#mol_aPos">mol_aPos</a> mol
    new_mol       = <a class="fcnlink" href="#mol_aSetPos">mol_aSetPos</a> [mol, positions]

    new_mol       = <a class="fcnlink" href="#mol_aMask">mol_aMask</a> [ mol, atom_mask ]
    new_mol       = <a class="fcnlink" href="#mol_rMask">mol_rMask</a> [ mol, res_mask ]
    new_mol       = <a class="fcnlink" href="#mol_cMask">mol_cMask</a> [ mol, chain_mask ]

    natoms        = <a class="fcnlink" href="#mol_aCount">mol_aCount</a> mol
    nres          = <a class="fcnlink" href="#mol_rCount">mol_rCount</a> mol
    nchains       = <a class="fcnlink" href="#mol_cCount">mol_cCount</a> mol

    new_mol       = <a class="fcnlink" href="#mol_Heavy">mol_Heavy</a> mol

    atom_names    = <a class="fcnlink" href="#mol_aName">mol_aName</a> mol
    chiral_values = <a class="fcnlink" href="#mol_Chirality">mol_Chirality</a> mol

    chain_keys    = <a class="fcnlink" href="#mol_Create">mol_Create</a> mol
    chain_keys    = <a class="fcnlink" href="#mol_CreateHidden">mol_CreateHidden</a> mol

    new_mol       = <a class="fcnlink" href="#mol_aPermute">mol_aPermute</a> [mol, idx_list]

    string        = <a class="fcnlink" href="#mol_EncodePos">mol_EncodePos</a> [mol, pos]
    string        = <a class="fcnlink" href="#mol_EncodePos">mol_EncodePos</a> [mol, pos, E]

    [pos]         = <a class="fcnlink" href="#mol_DecodePos">mol_DecodePos</a> [mol, string]
    [pos, E]      = <a class="fcnlink" href="#mol_DecodePos">mol_DecodePos</a> [mol, string]
    info          = <a class="fcnlink" href="#mol_DecodeInfo">mol_DecodeInfo</a> [mol, string]
</pre>
<a id="mol_Cat"></a>
<h1>Description</h1>

<pre>
new_mol = <span class="fcndef">mol_Cat</span> mols
</pre>

<p>Concatenates the molecules specified in <tt>mols</tt> into a MOE molecule
  format. The resulting conglomerate is returned. The specified molecules must
  be in the MOE molecular data format as specified in
  <a class="svl" href="extract.htm">mol_Extract</a>.</p>
<a id="mol_aSetPos"></a>
<a id="mol_aPos"></a>
<hr noshade="noshade" />

<pre>
positions = <span class="fcndef">mol_aPos</span> mol
new_mol = <span class="fcndef">mol_aSetPos</span> [mol, positions]
</pre>

<p><tt>mol_aPos</tt> returns the co-ordinates of all atoms in the MOE
  molecule <tt>mol</tt> in the form of a vector of 3 elements: the X
  co-ordinates, the Y co-ordinates and the Z co-ordinates, respectively. This
  function is equivalent to:</p>

<pre>
    mol(4)[[MOL_ATOM_X, MOL_ATOM_Y, MOL_ATOM_Z]]
</pre>

<p><tt>mol_aSetPos</tt> returns a vector <tt>new_mol</tt> equivalent to the
  <tt>mol</tt> argument, with the atom co-ordinates changed to
  <tt>positions</tt>.</p>
<a id="mol_aMask"></a>
<hr noshade="noshade" />

<pre>
new_mol = <span class="fcndef">mol_aMask</span> [ mol, atom_mask ]
</pre>

<p>Given a MOE molecule and a mask of flags, returns a molecule containing
  only those atoms (and associated residues and chains) for which the
  corresponding mask values are non-zero. <tt>atom_mask</tt> must contain one
  flag for each atom.</p>
<a id="mol_rMask"></a>
<hr noshade="noshade" />

<pre>
new_mol = <span class="fcndef">mol_rMask</span> [ mol, res_mask ]
</pre>

<p>Given a MOE molecule and a mask of flags, returns a molecule containing
  only those residues (and associated atoms and chains) for which the
  corresponding mask values are non-zero. <tt>res_mask</tt> must contain one
  flag for each residue.</p>
<a id="mol_cMask"></a>
<hr noshade="noshade" />

<pre>
new_mol = <span class="fcndef">mol_cMask</span> [ mol, chain_mask ]
</pre>

<p>Given a MOE molecule and a mask of flags, returns a molecule containing
  only those chains (and associated atoms and residues) for which the
  corresponding mask values are non-zero. <tt>chain_mask</tt> must contain one
  flag for each chain.</p>
<a id="mol_cCount"></a>
<a id="mol_rCount"></a>
<a id="mol_aCount"></a>
<hr noshade="noshade" />

<pre>
natoms  = <span class="fcndef">mol_aCount</span> mol
nres    = <span class="fcndef">mol_rCount</span> mol
nchains = <span class="fcndef">mol_cCount</span> mol
</pre>

<p>Returns the number of atoms, residues and chains respectively found in the
  specified molecule.</p>
<a id="mol_Heavy"></a>
<hr noshade="noshade" />

<pre>
new_mol = <span class="fcndef">mol_Heavy</span> mol
</pre>

<p>Returns a MOE molecule containing only the heavy atoms of the original
  molecule <tt>mol</tt>.</p>
<a id="mol_aName"></a>
<hr noshade="noshade" />

<pre>
atom_names = <span class="fcndef">mol_aName</span> mol
</pre>

<p>Returns a vector of tokens containing the atom names for the MOE molecule
  <tt>mol</tt>.</p>
<a id="mol_Chirality"></a>
<hr noshade="noshade" />

<pre>
chiral_values = <span class="fcndef">mol_Chirality</span> mol
</pre>

<p>Returns a vector of chiral values for each atom in the specified mol
  structure, measured according to the 3D coordinates of the structure.
  Possible values are 0 (not a chiral center), 1 (odd parity) and 2 (even
  parity).</p>

<p>Parity is determined by ordering the atom's adjacent neighbours by
  their position in the atom list, with the exception of hydrogen, which is
  elevated to the last position regardless. The atoms are arranged in the
  &quot;steering wheel&quot; form with the fourth position oriented
  downward:</p>

<img src="mol/chir_par.gif" class="center" />

<p>If the geometric direction of the first three atoms is anti-clockwise, the
  parity is even (2); if it is clockwise, the parity is odd (1).</p>

<p>This field is also used to store stereochemistry for rigid bond systems,
  including two-center stereo systems such as alkenes, or multicenter
  stereochemistry such as chiral allenes. In order to use the same parity
  system, the stereocenter is first transformed into a tetrahedron. In the case
  of alkenes, the transformation rules are as follows:</p>

<img src="mol/ster_par.gif" class="center" />
  <ol>
    <li>A and B are the terminal atoms of the bond stereo system, selected such
    that the atom index of A is less than that of B</li>
    <li>The molecule is rotated so that the viewer is looking down the rigid
    bond from A to B</li>
    <li>The rigid bond is rotated +90&deg;, then the atoms A and B are
    superimposed, in order to create a tetrahedron</li>
    <li>Each position is assigned a priority value, which works as follows:
      <ul>
        <li>Let <i>N</i> be an integer greater than the number of atoms</li>
        <li>If the position is occupied by a heavy atom, the priority is set to
        the atom index</li>
        <li>If the position is occupied by a hydrogen atom, the priority is set
        to the atom index + <i>N</i></li>
        <li>If the position is occupied by an implicit hydrogen, lone pair or
        other vacant placeholder, the priority is set to <i>N</i>.</li>
      </ul>
    </li>
  </ol>

<p>The odd/even parity of the resulting tetrahedron is calculated in the same
  way as for atom-centered chirality, with the highest priority atom being
  rotated to the &quot;down&quot; position in the &quot;steering wheel&quot;
  configuration. For allenes, the transformation is the same as for alkenes,
  except that the 90&deg; rotation step is omitted, and the <i>sp</i> carbon in
  the center is ignored.</p>

<p>For alkenes and alkene-like bond stereocenters, it is more convenient to
  observe the following recipe for deriving or interpreting the stereo parity
  values:</p>
  <ol>
    <li>Select the atoms comprising the bond, A and B, such that the index of A
    is less than that of B</li>
    <li>Define a vector of size 4, in which positions 1 and 2 are occupied by
    the outlying substituents of A, and positions 3 and 4 are populated by the
    neighbors of B such that 1 and 3 are on the same side of the double bond,
    as are 2 and 4</li>
    <li>For implicit hydrogens and lone pairs, replace the atom index with
    <i>N</i> (large number); for explicit hydrogen atoms, add <i>N</i> to the
    atom index</li>
    <li>The stereo parity of the double bond is equal to the parity of the
    array, which can be determined using the SVL <tt><a href=
    "../../svl/fcnref/permetc.htm">parity</a></tt> function, which returns 0
    for even and 1 for odd.</li>
  </ol>

<p>To extract geometric information from pre-encoded stereoparity values, the
  neighbor array can be populated as above, where the order of positions 3 and
  4 are arbitrary. After converting atom indices to the priority scheme, if the
  parity of the array does not match the evenness of the encoded parity, then
  positions 3 and 4 need to be switched. The order of the array will now be
  such that the moieties in positions 1 and 3 are on the same side of the
  double bond, as are 2 and 4.</p>
<a id="mol_Create"></a>
<a id="mol_CreateHidden"></a>
  <hr noshade="noshade" />

<pre>
chain_keys = <span class="fcndef">mol_Create</span> mol
chain_keys = <span class="fcndef">mol_CreateHidden</span> mol
</pre>

<p>Takes a MOE molecule specification, as returned by either <tt>db_Read</tt>
  or <tt>mol_Extract</tt>, and creates a MOE molecular system which is
  displayed in the MOE Window. The chain keys of the new molecular data are
  returned. Both functions are identical except that <tt>mol_CreateHidden</tt>
  leaves the atoms undisplayed, while <tt>mol_Create</tt> makes the created
  atoms visible.</p>

<p><i>Example</i>: suppose you want to create a copy of the current MOE
  molecule. First you need to extract the molecule using <a class="svl" href=
  "extract.htm">mol_Extract</a>:</p>

<pre>
    svl&gt; mol = mol_Extract Chains[]
</pre>

<p>Now we use <tt>mol</tt> to create a copy of the molecule in MOE:</p>

<pre>
    svl&gt; chain_keys = mol_Create mol
</pre>

<p>The new molecule is rendered in the MOE Window.</p>
<a id="mol_aPermute"></a>
<hr noshade="noshade" />

<pre>
new_mol = <span class="fcndef">mol_aPermute</span> [ mol, idx_list ]
</pre>

<p>Permutes the atoms in the molecule according to the index list. As with
  <a class="svl" href="../../svl/fcnref/getpeek.htm">get</a>, <tt>idx_list</tt>
  specifies the index of the position to get; i.e. each value in
  <tt>idx_list</tt> corresponds to an element in the atom list. Note that in
  the molecule data structure, the atoms contained by each residue are
  determined by their sequential order and by <a href=
  "extract.htm">res_data(MOL_RES_NATOMS)</a>, the number of atoms in each
  residue. Thus it is possible that atoms will be moved from one residue to
  another.</p>
<a id="mol_EncodePos"></a>
<hr noshade="noshade" />

<pre>
string = <span class="fcndef">mol_EncodePos</span> [mol, pos]
string = <span class="fcndef">mol_EncodePos</span> [mol, pos, E]
</pre>

<p>Encodes atom coordinates and, optionally, energies of a list of conformers
  of molecule <tt>mol</tt> to a flat array of bytes (characters). Each element
  of vector <tt>pos</tt> represents the atom positions of one conformer. For
  example, the following code stores 10 (identical) conformations of the
  molecule <tt>mol</tt> in the flat character vector <tt>string</tt>:</p>

<pre>
    svl&gt; pos = rep [mol_aPos mol, 10];
    svl&gt; string = mol_EncodePos [mol, pos];
</pre>

<p><b>Warning!</b> The atom positions are stored with the numerical precision
  of only 1/1000 &Aring;. The decoded values will likely <i>not</i> be
  identical to the original values. The numerical precision of the stored
  energies is also lower than the default precision of the SVL floating point
  values, with the relative precision of only about 0.001. <!--
The energies are stored in the IEEE <i>half</i> format with the relative
precision of&nbsp;2<sup>-10</sup>&nbsp;=&nbsp;0.001.
The largest finite value of energy is that can be stored
is&nbsp;2<sup>16</sup>&nbsp;&minus;&nbsp;2<sup>5</sup>&nbsp;=&nbsp;65504.
The smallest positive value of energy that can be stored at that
precision is&nbsp;2<sup>-14</sup>&nbsp;=&nbsp;6.1e-5.
--></p>
<a id="mol_DecodePos"></a>
<hr noshade="noshade" />

<pre>
[pos] = <span class="fcndef">mol_DecodePos</span> [mol, string]
[pos, E] = <span class="fcndef">mol_DecodePos</span> [mol, string]
</pre>

<p>Decodes atom coordinates and, optionally, energies of a list of conformers
  of molecule <tt>mol</tt> from a flat array of bytes (characters). Each
  element of vector <tt>pos</tt> represents the atom positions of one
  conformer. If the parameter <tt>string</tt> does <i>not</i> contain encoded
  energies, the returned vector <tt>E</tt> is empty.</p>
<a id="mol_DecodeInfo"></a>
<hr noshade="noshade" />

<pre>
info = <span class="fcndef">mol_DecodeInfo</span> [mol, string]
</pre>

<p>Returns a tag vector that contains general information about the encoded
  conformations. The returned information includes the following tags:</p>
  <table class="noborder">
      <tr>
        <td><tt>nconf</tt></td>
        <td>The number of stored conformations.</td>
      </tr>
      <tr>
        <td><tt>natoms</tt></td>
        <td>The number of atoms in the molecule.</td>
      </tr>
      <tr>
        <td><tt>E</tt></td>
        <td>A flag indicating whether the energies are also included.</td>
      </tr>
      <tr>
        <td><tt>version</tt></td>
        <td>The version of the storage format.</td>
      </tr>
    </table>

<h1>See Also</h1>

<p><a class="svl" href="extract.htm">mol_Extract</a><br />
  <a class="svl" href="../../svl/fcnref/getpeek.htm">get</a><br />
  <a class="svl" href="../../svl/fcnref/permetc.htm">parity</a>
  <!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

