<!DOCTYPE html>
<html>

<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="keywords:" />
  <meta name="keywords" content=
  "functions: Read_ProcessStandardOptions, Read_Prompt, Read_Return, Write_Prompt" />
  <title>Custom Molecule File Formats</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    Custom Molecule File Formats
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<pre>
    ['filename','format',options] = <a class="fcnlink" href=
"#Read_Prompt">Read_Prompt</a> ['filename','format',options]
    ['filename','format',options] = <a class="fcnlink" href=
"#Write_Prompt">Write_Prompt</a> ['filename','format',options]

    <a class="fcnlink" href=
"#Read_ProcessStandardOptions">Read_ProcessStandardOptions</a> [ chainkeys, options ]

    chainkeys = <a class="fcnlink" href=
"#Read_Return">Read_Return</a> [ chainkeys, 0 ]
    <a class="fcnlink" href="#Read_Return">Read_Return</a> [ chainkeys, 1 ]
</pre>

<h1>Description</h1>

<p>To read and write a custom file format, a new pair of <a href=
  "molrw.htm">ReadXXX</a> and <a href="molrw.htm">WriteXXX</a>
  functions must be written, and the file format identifier added to the
  <tt>FILE_FORMATS</tt> table in the file <tt>fileio.svl</tt>. This table is
  organized as follows:</p>

<pre>
    const FILE_FORMATS = tr [
        [ 'format_name', [ 'ext' {, 'other_ext'} ] ],
            ...
    ];
</pre>

<p>The curly braces {} indicate that more than one file extension
  (<tt>ext</tt>) may be associated with a given file format. All should be
  listed in the table in lowercase, however, the actual files may have
  extensions in either upper or lower case, as both will match.</p>

<p>For example, the entries for <tt>'PDB'</tt> and
  <tt>'MOE'</tt> are:</p>

<pre>
    [  'PDB',   ['pdb','ent'] ],
    [  'MOE',   ['moe']       ]
</pre>
<a id="Read_Prompt"></a>
<a id="Read_Return"></a>
<a id="Read_ProcessStandardOptions"></a>
<h3>Custom File Format Reader</h3>

<p>Every <tt>ReadXXX</tt> function should be structured as follows:</p>

<pre>
    function: ReadXXX [ filename, options ] // 'XXX' is the format identifier
        local newchains;

        [filename,[],options] = <span class=
"fcndef">Read_Prompt</span> [ filename, 'XXX', options ];

            ... read data from 'filename' ...
            ... set variable newchains to new chain keys ...

        <span class=
"fcndef">Read_ProcessStandardOptions</span> [ newchains, options ];

            ... process format-specific options ...

        return <span class="fcndef">Read_Return</span> [ newchains, call[] ];
    endfunction
</pre>

<p><tt>Read_Prompt</tt> prompts for filenames with a file selection box if
  <tt>filename</tt> (a token) is null. It returns the filename, format
  identifier (a token), and the <tt>options</tt> argument.
  <tt>'XXX'</tt> should be replaced by a format identifier in the
  calling sequence.</p>

<p>After the filename is obtained from <tt>Read_Prompt</tt>, <tt>ReadXXX</tt>
  reads from the file (using the SVL file I/O functions <tt>fread</tt> or
  <tt>freadb</tt>), interprets the data, and creates molecular objects (see
  <tt>oCreate</tt>).</p>

<p><tt>Read_ProcessStandardOptions</tt> is then passed the keys of the newly
  created chains along with the <tt>options</tt> parameter. This function will
  process the <tt>center</tt> and <tt>select</tt> options, if present. Any
  other format-specific or custom options must be handled by the
  <tt>ReadXXX</tt> function itself.</p>

<p>The return value of <tt>Read_Return</tt> depends on its second argument.
  If zero, <tt>Read_Return</tt> returns its chain keys argument, otherwise, if
  it is non-zero then null is returned. <tt>ReadXXX</tt> returns whatever
  <tt>Read_Return</tt> returns.</p>

<p>Note that <a href="../../svl/fcnref/calletc.htm">call</a>
  returns 1 if <tt>ReadXXX</tt> was called as a <i>procedure</i>. So if the
  results of <tt>ReadXXX</tt> are required then the calling routine will use
  <tt>ReadXXX</tt> in an assignment. For example:</p>

<pre>
    chains = ReadPDB 'filename';
    ReadPDB 'filename';
</pre>

<p>In the first statement the return value of <tt>ReadPDB</tt> is stored in
  variable <tt>chains</tt>. The second statement requires no return value so
  none is returned.</p>

<p>Please see <a href="../../svl/fcnref/calletc.htm">call</a> for
  more information on routines invoked as <i>procedures</i> and routines
  invoked as <i>functions</i>.</p>
<a id="Write_Prompt"></a>
<h3>Custom File Format Writer</h3>

<p>Every <tt>WriteXXX</tt> should be structured as follows:</p>

<pre>
    function: WriteXXX [ filename, options ] // 'XXX' is the format identifier
        [filename,[],options] = <span class=
"fcndef">Write_Prompt</span>[ filename, 'XXX', options ];

            ... write data to 'filename' ...

    endfunction
</pre>

<p><tt>Write_Prompt</tt> prompts for a filename with a file selection box if
  <tt>filename</tt> (a token) is null. It returns the filename, format
  identifier (a token), and <tt>options</tt> argument. <tt>'XXX'</tt>
  in the calling sequence should be replaced by a format identifier.
  <tt>options</tt> is the same as in the read case. Once the filename is
  obtained from <tt>Write_Prompt</tt>, <tt>WriteXXX</tt> encodes the currently
  loaded molecular system in the custom format and writes it out to the file
  using SVL file write functions (<tt>fwrite</tt>, <tt>fwriteb</tt>).</p>

<h1>See Also</h1>
  <table class="functionList">
    <tr>
      <td><a href="openclo.htm">Close</a></td>
      <td><a href="openclo.htm">Open</a></td>
    </tr>
    <tr>
      <td><a href="save.htm">DataFilename</a></td>
      <td><a href="save.htm">DataModified</a></td>
    </tr>
    <tr>
      <td><a href="save.htm">Save</a></td>
      <td><a href="save.htm">SaveAs</a></td>
    </tr>
  </table>

<p><a href="molrw.htm">Read/Write Molecular Data Functions</a></p>
  <!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

