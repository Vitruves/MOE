<!DOCTYPE html>
<html>

<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="keywords:" />
  <meta name="keywords" content="functions: mtz_Read" />
  <meta name="keywords" content="functions: cv_Read" />
  <meta name="keywords" content="functions: cif_ExtractStructureFactors" />
  <meta name="keywords" content="functions: mtz_Write" />
  <meta name="keywords" content="functions: cv_Write" />
  <meta name="keywords" content="functions: cif_StuffStructureFactors" />
  <meta name="keywords" content="functions: fread_CCP4" />
  <meta name="keywords" content="functions: fread_CNS" />
  <meta name="keywords" content="functions: fread_DSN6" />
  <meta name="keywords" content="functions: fwrite_CCP4" />
  <meta name="keywords" content="functions: fwrite_CNS" />
  <meta name="keywords" content="functions: ccp4_fread_header" />
  <meta name="keywords" content="functions: ccp4_fread" />
  <title>Electron Density I/O Functions</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    Electron Density I/O Functions
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<pre class="code">
sfinfo = <a class="fcnlink"
href="#mtz_Read">mtz_Read</a> 'filename'
sfinfo = <a class="fcnlink"
href="#cv_Read">cv_Read</a> 'filename'
sfinfo = <a class="fcnlink"
href="#cif_ExtractStructureFactors">cif_ExtractStructureFactors</a> cif

<a class="fcnlink"
href="#mtz_Write">mtz_Write</a> ['filename', sfinfo]
<a class="fcnlink"
href="#cv_Write">cv_Write</a>  ['filename', sfinfo]
cif = <a class="fcnlink"
href="#cif_StuffStructureFactors">cif_StuffStructureFactors</a> [sfinfo, 'entryid']

[data, shape, cell, label, skew, [mean, sd], [min, max]] = <a class="fcnlink"
href="#fread_CCP4">fread_CCP4</a> 'filename'
[data, shape, cell, label, [mean, sd]] = <a class="fcnlink"
href="#fread_CNS">fread_CNS</a>  'filename'
[data, shape, cell] = <a class="fcnlink"
href="#fread_DSN6">fread_DSN6</a>  'filename'

<a class="fcnlink"
href="#fwrite_CCP4">fwrite_CCP4</a> ['filename', [data, shape, cell, label, skew, [mean, sd], [min, max]]]
<a class="fcnlink"
href="#fwrite_CNS">fwrite_CNS</a>  ['filename', [data, shape, cell, label, [mean, sd]]]
header = <a class="fcnlink"
href="#ccp4_fread_header">ccp4_fread_header</a> 'filename'
[data, shape] = <a class="fcnlink"
href="#ccp4_fread">ccp4_fread</a> [header, x1, x2]
</pre>

<h1>Description</h1>

<p>These functions provide means for reading and writing structure factors
  and electron density, in various popular file formats.</p>
<a id="cif_ExtractStructureFactors"></a>
<a id="cv_Read"></a>
<a id="mtz_Read"></a>
<hr noshade="noshade" />

<pre>
sfinfo = <span class="fcndef">mtz_Read</span> 'filename'
sfinfo = <span class="fcndef">cv_Read</span> 'filename'
sfinfo = <span class="fcndef">cif_ExtractStructureFactors</span> cif
</pre>

<p>The first three functions read in structure factor data stored in MTZ
  (CCP4), CNS/CNX or CIF format, respectively, into a common <tt>sfinfo</tt>
  tagged vector. Note that while the first two functions take a file on disk as
  their main argument, <tt>cif_ExtractStructureFactors</tt> takes a
  <tt>cif</tt> object, such as the <tt>blockdata</tt> returned by
  <tt>cif_fread</tt>. It is important that the CIF structure includes the cell
  parameters and space group information as well; otherwise a default value
  will be assigned. Similarly, CNS structure factor files never specify this
  information, and so a default value is used for any calculations.</p>

<p>The last function can be used when the relevant information is already
  present in MOE and does not come from a file on disk. A vector of the same
  shape and with the same tags as the other functions is returned, but instead
  of a file it requires the structure factor magnitudes <tt>F</tt> and
  <tt>phase</tt> in reciprocal space. These are each flat vectors like a normal
  MOE grid, with HKL co-ordinates defined by <tt>shape</tt>. Additionally the
  cell parameters <tt>cell</tt> and <tt>resolution</tt> are needed. The latter
  is of the form <tt>[res_low, res_high]</tt>, where <tt>res_low &gt;
  res_high</tt> are the low and high resolution limits of the experiment,
  respectively.</p>
<a id="sfinfo"></a>
<p>The <tt>sfinfo</tt> object mirrors the
  MTZ file format, and thus consists of the following tags:</p>
  <table class="titlebar">
    <tr align="left">
      <th>Tag Name</th>
      <th>Format</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>version</td>
      <td>'version info'</td>
      <td>A tag for the version of the file format.</td>
    </tr>
    <tr>
      <td>title</td>
      <td>'title'</td>
      <td>A description of how the file was generated or what is
      represents.</td>
    </tr>
    <tr>
      <td>hist</td>
      <td>['history1', 'history2', ...]</td>
      <td>An audit trail or modification history of the file. Each
      element is at most 80 characters long. Optional.</td>
    </tr>
    <tr>
      <td>cell</td>
      <td>['spacegroup',&nbsp;size,&nbsp;shape]</td>
      <td>The standard space group name followed by the unit cell
      parameters.</td>
    </tr>
    <tr>
      <td>sort</td>
      <td>[n1,&nbsp;n2,&nbsp;n3,&nbsp;n4,&nbsp;n5]</td>
      <td>Maintained for compatibility with MTZ format;
      ignored.</td>
    </tr>
    <tr>
      <td>nspgrp</td>
      <td>ispacegroup</td>
      <td>Number of the space group from the International
      Tables.</td>
    </tr>
    <tr>
      <td>latticetype</td>
      <td>'type'</td>
      <td>Lattice abbreviation for the space group. One of:
      'A', 'M', 'O', 'T', 'H',
      'C'.</td>
    </tr>
    <tr>
      <td>pointgroupname</td>
      <td>'PGx'</td>
      <td>Name of the point group associated with the space
      group.</td>
    </tr>
    <tr>
      <td>nsym</td>
      <td>n</td>
      <td>Number of symmetry operators for the space group,
      including the identity operator.</td>
    </tr>
    <tr>
      <td>nsymp</td>
      <td>n</td>
      <td>Number of <i>primitive</i> symmetry operators.
      <b>Currently not correct.</b></td>
    </tr>
    <tr>
      <td>sym</td>
      <td>['sym1', 'sym2', ...]</td>
      <td>Symmetry operators, in International Tables style (e.g.
      'x+1/2,y,z'), including the identity operator.</td>
    </tr>
    <tr>
      <td>resolution</td>
      <td>[res_low,&nbsp;res_high]</td>
      <td>The resolution limits of the experiment (with low
      resolution being the numerically larger value). Note it is actually
      stored as 1 / R^2 however.</td>
    </tr>
    <tr>
      <td>write</td>
      <td>flag</td>
      <td>If non-zero, cluster numbers will be written to a field
      of the source database.</td>
    </tr>
    <tr>
      <td>missingvalue</td>
      <td>n</td>
      <td>The value placed in the structure factor data columns
      when a reflection is absent.</td>
    </tr>
    <tr>
      <td>ncols</td>
      <td>n</td>
      <td>The number of columns of data in <tt>cdata</tt> (see
      below).</td>
    </tr>
    <tr>
      <td>nrefs</td>
      <td>n</td>
      <td>The number of reflections stored in <tt>cdata</tt> (see
      below).</td>
    </tr>
    <tr>
      <td>nbatch</td>
      <td>n</td>
      <td>The batch number. Maintained for compatibility with MTZ
      ignored.</td>
    </tr>
    <tr>
      <td>nproj</td>
      <td>n</td>
      <td>The number of projects present - always one.</td>
    </tr>
    <tr>
      <td>pdata</td>
      <td>['project name', 'crystal name',
      'dataset name',
      [a,&nbsp;b,&nbsp;c,&nbsp;alpha,&nbsp;beta,&nbsp;gamma], lambda]</td>
      <td>Information about the project including a project name,
      crystal name, dataset name, unit cell parameters (copied from the data in
      <tt>cell</tt>) and wavelength used to collect the data, if known.</td>
    </tr>
    <tr>
      <td>cdata</td>
      <td>[['label1',&nbsp;...],
      ['type1',&nbsp;...], [min1,&nbsp;...], [max1,&nbsp;...],
      [id1,&nbsp;...], [data1,&nbsp;...]]</td>
      <td>This is where the actual data is stored. Each of the 6
      elements of this vector has length <tt>ncols</tt>, the number of columns
      of data in the file, and the 6th column has l_length of <tt>nrefs</tt>,
      the number of reflections. Element 1 stores column labels, such as
      'FOBS', 'PHIC', which are arbitrary. Element 2 stores the
      MTZ column type, such as 'F' or 'P'. Consult the MTZ file
      format documentation for details on all the possible values and their
      meanings. Elements 3 and 4 store the minimum and maximum values,
      respectively, of each column of data. Element 5 stores the id of the
      corresponding dataset for each data column, and is always set to ones.
      Element 6 is the actual data columns. Note that there can be multiple
      data columns of the same type, and no columns of some types. It is up to
      the called functions to decide what to do when columns are missing, or
      when there is more than one column of the same type to choose from.
      Although some naming conventions are commonly used for column labels to
      have special meanings (for example FCALC for calculated structure
      factors), there is no way to know for certain where the data in a column
      has come from or what it really represents beyond its data type, only the
      user who created the structure factor file would have that
      knowledge.</td>
    </tr>
  </table>
<a id="cv_Write"></a>
<a id="mtz_Write"></a>
<a id="cif_StuffStructureFactors"></a>
<hr noshade="noshade" />

<pre>
<span class="fcndef">mtz_Write</span> ['filename', sfinfo]
<span class="fcndef">cv_Write</span>  ['filename', sfinfo]
cif = <span class=
"fcndef">cif_StuffStructureFactors</span> [sfinfo, 'entryid']
</pre>

<p>These functions take an <tt>sfinfo</tt> tagged vector (see above) and
  write it out in MTZ (CCP4), CNS/CNX, or CIF format, respectively. The first
  two functions write directly to disk using the given filename, while the
  latter returns a <tt>cif</tt> object which can then be written out to disk
  using <tt>cif_fwrite</tt>. <tt>entryid</tt> is the name to be assigned to the
  cif datablock and is normally the PDB ID or some other unique identifier.
  Note that the CNS/CNX format (<tt>cv_Write</tt>) is extremely limited and is
  missing much of the critical information such as cell parameters.</p>
<a id="fread_CNS"></a>
<a id="fread_CCP4"></a>
<a id="fread_DSN6"></a>
<hr noshade="noshade" />

<pre>
[data, shape, cell, label, skew, [mean, sd], [min, max]] = <span class=
"fcndef">fread_CCP4</span> 'filename'
[data, shape, cell, label, [mean, sd]] = <span class=
"fcndef">fread_CNS</span>  'filename'
[data, shape, cell] = <span class=
"fcndef">fread_DSN6</span>  'filename'
</pre>

<p>These functions read electron density files in either binary CCP4 map file
  format, DSN6 format, or ASCII CNS format, returning the density map and cell
  information.
  <tt>label</tt> is a free text description of the source of the file or any
  other pertinent information, split into 'lines' of at most 80
  characters each. <tt>skew</tt> is the Skew Matrix S and translation T (both
  stored as flat vectors) representing the skew operation on the map (see
  CCP4map documentation for more details). This is normally null. <tt>mean</tt>
  and <tt>sd</tt> contain the mean and standard deviation, respectively, of the
  density over the whole unit cell (and not necessarily the region actually in
  the file). <tt>min</tt> and <tt>max</tt> give the minimum and maximum values
  in the grid.</p>
<a id="fwrite_CNS"></a>
<a id="fwrite_CCP4"></a>
<hr noshade="noshade" />

<pre>
<span class=
"fcndef">fwrite_CCP4</span> ['filename', [data, shape, cell, label, skew, [mean, sd], [min, max]]]
<span class=
"fcndef">fwrite_CNS</span>  ['filename', [data, shape, cell, label, [mean, sd]]]
</pre>

<p>These functions write out an electron density map in either CCP4 binary
  map file format, or CNS ASCII format. Along with the filename it requires the
  actual grid data <tt>[data, shape]</tt> as well as the cell parameters
  <tt>cell</tt>. An optional skew matrix and text label can be added for CCP4
  format. All other required information is recalculated from this upon
  writing. The <tt>mean</tt>, <tt>sd</tt>, <tt>min</tt> and <tt>max</tt>
  parameters allow for specifying explicit values for the mean, standard
  deviation, minimum value and maximum value of the grid, respectively. If not
  provided, these will be calculated from the grid. Note that most software
  interpret these values as originating from data covering the whole unit cell;
  thus if the grid only covers a portion of the unit cell, the mean, etc.
  cannot be correctly computed and should therefore be passed in.</p>

<p><b>Warning:</b> For all grids, it is assumed that the unit cell boundaries
  <tt>[0,0,0]</tt> and <tt>[1,1,1]</tt> lie on grid points. This is true even
  for partial grids and therefore care must be taken when constructing the
  <tt>shape</tt> and <tt>data</tt> parameters. Should the <tt>shape</tt> and
  <tt>data</tt> parameters be such that the origin and boundaries of the cell
  would <i>not</i> fall on grid points if the grid were to be extended, they
  would still be interpreted as such, resulting in distortion of the grid with
  no warning.</p>


<a id="ccp4_fread_header"></a>
<a id="ccp4_fread"></a>
<hr noshade="noshade" />

<pre>
header = <span class=
"fcndef">ccp4_fread_header</span> 'filename'
[data, shape] = <span class=
"fcndef">ccp4_fread</span>  [header, x1, x2]
</pre>

<p>These functions are designed to read large CCP4 map files efficiently
without loading the entire file into memory.  <tt>ccp4_fread_header</tt>
must be called first, and returns the CCP4 header information and prepares
the large grid file for reading.  Note it does <i>not</i> keep a file
handle open on the file.  Once this is done, <tt>ccp4_fread</tt> may be
called repeatedly as needed, passing in the header, and <tt>x1</tt> and
<tt>x2</tt>, the two corners of the grid to be read from disk.  <tt>x1</tt>
and <tt>x2</tt> should be integral triplets and range from
<tt>[1..header.ns, 1..header.nr, 1..header.nc]</tt> (permuted to match the
xyz-ordering).
</p>

<h1>See Also</h1>

<p><a href="cif.htm">CIF</a> I/O functions<br />
  <a href="ed.htm">Electron Density Functions</a></p>

<h1>References</h1>

<p><a href="http://www.ccp4.ac.uk/html/mtzformat.html">MTZ</a> File Format
  Specification</p>

<p><a href="http://www.ccp4.ac.uk/html/maplib.html#description">CCP4 MAP</a>
  File Format Specification
<!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

