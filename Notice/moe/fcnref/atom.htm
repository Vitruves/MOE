<!DOCTYPE html>
<html>

<head>
  <meta http-equiv="x-ua-compatible" content="IE=9" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" type="text/css" href="../../include/manstyle.css" />
  <link rel="icon" type="image/png" href="../../images/ccgicon.png" />
  <link rel="shortcut icon" type="image/png" href="../../images/ccgicon.png" />
  <meta name="keywords" content="functions: aArticulator" />
  <meta name="keywords" content=
  "functions: aAtomicNumber, aHydrogens, aLonePairs, aHeavyValence" />
  <meta name="keywords" content="functions: aBackbone, aSetBackbone" />
  <meta name="keywords" content="functions: aBondCount, aRingBondCount" />
  <meta name="keywords" content=
  "functions: aBonds, aBondOrder, aRotatableBonds" />
  <meta name="keywords" content="functions: aChiDegV" />
  <meta name="keywords" content="functions: aDFSIn, aDFSOut" />
  <meta name="keywords" content="functions: aDegree, aExplicitDegree" />
  <meta name="keywords" content="functions: aElement, aSetElement" />
  <meta name="keywords" content="functions: aFCharge, aExplicitFCharge" />
  <meta name="keywords" content="functions: aGeometry, aSetGeometry" />
  <meta name="keywords" content="functions: aHCount, aExplicitHCount" />
  <meta name="keywords" content="functions: aHintLP, aSetHintLP" />
  <meta name="keywords" content="functions: aIdealVSA" />
  <meta name="keywords" content=
  "functions: aInRing, aInHRing, aMoleculeNumber" />
  <meta name="keywords" content=
  "functions: aIn8Ring, aIn7Ring, aIn6Ring, aIn5Ring, aIn4Ring, aIn3Ring" />
  <meta name="keywords" content="functions: aIon, aSetIon" />
  <meta name="keywords" content="functions: aName, aSetName" />
  <meta name="keywords" content="functions: aNumber" />
  <meta name="keywords" content="functions: aPrioCIP, aPrioSMI, aPrioZQH" />
  <meta name="keywords" content="functions: aTempFactor, aSetTempFactor" />
  <meta name="keywords" content="functions: aAniso, aSetAniso" />
  <meta name="keywords" content="functions: aOccupancy, aSetOccupancy" />
  <meta name="keywords" content="intro: Atom Fundamental Properties" />
  <title>Atom Fundamental Properties</title>
</head>
<body>
<div class="center-page">
  <!-- START MOE_HEADER -->
  <div class="MOE_HEADER">
    <a href="../../index.htm"><img src="../../images/ccglogo.png" /></a>
    <a href="../../index.htm"><div class="moeversion"></div></a>
    Atom Fundamental Properties
  </div>
<!-- END MOE_HEADER -->
<div class="content">

<h1>Syntax</h1>

<pre class="code">
[u11,u12,u13,u22,u23,u33] = <a class="fcnlink" href="#aAniso">aAniso</a>           atom_keys
             atnos        = <a class="fcnlink" href="#aAtomicNumber">aAtomicNumber</a>    atom_keys
             flags        = <a class="fcnlink" href="#aArticulator">aArticulator</a>     atom_keys
             flags        = <a class="fcnlink" href="#aBackbone">aBackbone</a>        atom_keys
             counts       = <a class="fcnlink" href="#aBondCount">aBondCount</a>       atom_keys
             order_lists  = <a class="fcnlink" href="#aBondOrder">aBondOrder</a>       atom_keys
             atom_lists   = <a class="fcnlink" href="#aBonds">aBonds</a>           atom_keys
             chiv_degrees = <a class="fcnlink" href="#aChiDegV">aChiDegV</a>         atom_keys
             bond_counts  = <a class="fcnlink" href="#aDegree">aDegree</a>          atom_keys
             in_times     = <a class="fcnlink" href="#aDFSIn">aDFSIn</a>           atom_keys
             out_times    = <a class="fcnlink" href="#aDFSOut">aDFSOut</a>          atom_keys
             el_tokens    = <a class="fcnlink" href="#aElement">aElement</a>         atom_keys
             bond_counts  = <a class="fcnlink" href="#aExplicitDegree">aExplicitDegree</a>  atom_keys
             charges      = <a class="fcnlink" href="#aExplicitFCharge">aExplicitFCharge</a> atom_keys
             h_counts     = <a class="fcnlink" href="#aExplicitHCount">aExplicitHCount</a>  atom_keys
             charges      = <a class="fcnlink" href="#aFCharge">aFCharge</a>         atom_keys
             geom_tokens  = <a class="fcnlink" href="#aGeometry">aGeometry</a>        atom_keys
             heavy_counts = <a class="fcnlink" href="#aHeavyValence">aHeavyValence</a>    atom_keys
             h_counts     = <a class="fcnlink" href="#aHCount">aHCount</a>          atom_keys
             flags        = <a class="fcnlink" href="#aHintLP">aHintLP</a>          atom_keys
             h_counts     = <a class="fcnlink" href="#aHydrogens">aHydrogens</a>       atom_keys
             vdw_areas    = <a class="fcnlink" href="#aIdealVSA">aIdealVSA</a>        atom_keys
             flags        = <a class="fcnlink" href="#aIn3Ring">aIn3Ring</a>         atom_keys
             flags        = <a class="fcnlink" href="#aIn4Ring">aIn4Ring</a>         atom_keys
             flags        = <a class="fcnlink" href="#aIn5Ring">aIn5Ring</a>         atom_keys
             flags        = <a class="fcnlink" href="#aIn6Ring">aIn6Ring</a>         atom_keys
             flags        = <a class="fcnlink" href="#aIn7Ring">aIn7Ring</a>         atom_keys
             flags        = <a class="fcnlink" href="#aIn8Ring">aIn8Ring</a>         atom_keys
             flags        = <a class="fcnlink" href="#aInHRing">aInHRing</a>         atom_keys
             flags        = <a class="fcnlink" href="#aInRing">aInRing</a>          atom_keys
             ionizations  = <a class="fcnlink" href="#aIon">aIon</a>             atom_keys
             lp_counts    = <a class="fcnlink" href="#aLonePairs">aLonePairs</a>       atom_keys
             mol_numbers  = <a class="fcnlink" href="#aMoleculeNumber">aMoleculeNumber</a>  atom_keys
             name_tokens  = <a class="fcnlink" href="#aName">aName</a>            atom_keys
             index        = <a class="fcnlink" href="#aNumber">aNumber</a>          atom_keys
             occupancies  = <a class="fcnlink" href="#aOccupancy">aOccupancy</a>       atom_keys
             prio_numbers = <a class="fcnlink" href="#aPrioCIP">aPrioCIP</a>         atom_keys
             prio_numbers = <a class="fcnlink" href="#aPrioSMI">aPrioSMI</a>         atom_keys
             prio_numbers = <a class="fcnlink" href="#aPrioZQH">aPrioZQH</a>         atom_keys
             counts       = <a class="fcnlink" href="#aRingBondCount">aRingBondCount</a>   atom_keys
             atom_lists   = <a class="fcnlink" href="#aRotatableBonds">aRotatableBonds</a>  atom_keys
             temp_factors = <a class="fcnlink" href="#aTempFactor">aTempFactor</a>      atom_keys

             <a class="fcnlink" href="#aSetAniso">aSetAniso</a>      [atom_keys, [u11,u12,u13,u22,u23,u33]]
             <a class="fcnlink" href="#aSetBackbone">aSetBackbone</a>   [atom_keys, flags]
             <a class="fcnlink" href="#aSetElement">aSetElement</a>    [atom_keys, el_tokens]
             <a class="fcnlink" href="#aSetGeometry">aSetGeometry</a>   [atom_keys, geom_tokens]
             <a class="fcnlink" href="#aSetHintLP">aSetHintLP</a>     [atom_keys, flags]
             <a class="fcnlink" href="#aSetIon">aSetIon</a>        [atom_keys, ionizations]
             <a class="fcnlink" href="#aSetName">aSetName</a>       [atom_keys, name_tokens]
             <a class="fcnlink" href="#aSetOccupancy">aSetOccupancy</a>  [atom_keys, occupancies]
             <a class="fcnlink" href="#aSetTempFactor">aSetTempFactor</a> [atom_keys, temp_factors]
</pre>

<h1>Description</h1>

<p>In MOE, molecular data is organized as a hierarchy of <i>molecular
  objects</i> or <i>objects</i>. MOE stores atom information in separate
  internal data structures. Atoms are referenced with an object key, which is a
  unique number identifying the atom object. The many atom functions provided
  by MOE cover the following broad categories:</p>
  <ul>
    <li><a href="atom.htm">Fundamental Properties</a> (this page)</li>
    <li><a href="atom_p.htm">Potential Properties</a></li>
    <li><a href="atom_d.htm">Display Properties</a></li>
    <li><a href="atom_g.htm">Geometry</a></li>
  </ul>

<p>The following functions can be used to obtain atom information:
  <!-- DESC --></p>
  <table class="titlebar">
    <tr>
      <th>Function</th>
      <th>Description</th>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aAniso"></a>
<tt>aAniso</tt></td>
      <td valign="baseline">
        Returns the anisotropic temperature factors (as provided in PDB files,
        for example), for each atom in the argument, as a laminated vector of
        length six (i.e. the return value has six elements, each the same
        length as <tt>atom_keys</tt>). The values are given in the order
        <tt>[u11, u12, u13, u22, u23, u33]</tt>. This function can be used on
        flat vectors only.

<pre>
[u11, u12, u13, u22, u23, u33] = aAniso atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aAtomicNumber"></a>
<tt>aAtomicNumber</tt></td>
      <td valign="baseline">
        Returns the atomic number of each atom in the argument. This function
        can be used on arbitrarily nested vectors.

<pre>
atnos = aAtomicNumber atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aArticulator"></a>
<tt>aArticulator</tt></td>
      <td valign="baseline">
        Returns a value of 1 for each atom that, if deleted, would disconnect
        the molecular graph (i.e. introduce a new component), 0 otherwise. This
        function can be used on arbitrarily nested vectors.

<pre>
flags = aArticulator atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aBackbone"></a>
<tt>aBackbone</tt></td>
      <td valign="baseline">
        Returns a value of 1 for each atom that is considered to be a backbone
        atom, 0 otherwise. The backbone flag is used by some applications
        (notably protein applications) to identify the backbone of a polymer.
        This function can be used on arbitrarily nested vectors.

<pre>
flags = aBackbone atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aBondCount"></a>
<tt>aBondCount</tt></td>
      <td valign="baseline">
        Returns the number of explicit bonds on each atom in the argument. This
        function can be used on arbitrarily nested vectors.

<pre>
counts = aBondCount atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aBondOrder"></a>
<tt>aBondOrder</tt></td>
      <td valign="baseline">
        Returns for each atom in the argument a list of the bond orders (1,2,3)
        of all bonds on that atom. This function applies to flat vectors only.

<pre>
order_lists = aBondOrder atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aBonds"></a>
<tt>aBonds</tt></td>
      <td valign="baseline">
        Returns for each atom in the argument a list of its bonded neighbor
        atoms. This function applies to flat vectors only.

<pre>
atom_lists = aBonds atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aChiDegV"></a>
<tt>aChiDegV</tt></td>
      <td valign="baseline">
        Returns, for each atom in the argument, the &quot;chiv&quot; degree
        that is used in Kier and Hall ([Hall 1991] and [Hall 1997]) chi
        connectivity index calculations. The chiv degree is calculated to be,
        for a given atom, <i>v=(p-h)/(Z-p-1)</i>, where <i>p</i> is the number
        of s and p valence electrons, <i>h</i> is the total number of attached
        hydrogens, and <i>Z</i> is the atomic number. Note: the return values
        are meaningful for heavy (non-hydrogen non-lone pair) atoms only. This
        function applies to flat vectors only.

<pre>
chiv_degrees = aChiDegV atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aDegree"></a>
<tt>aDegree</tt></td>
      <td valign="baseline">
        Returns the number of neighbors, including all (both explicit and
        implicit) hydrogens but ignoring lone pairs, of each atom in the
        argument. This function applies to flat vectors only.

<pre>
bond_counts = aDegree atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aDFSIn"></a>
<a id="aDFSOut"></a>
<tt>aDFSIn</tt><br />
      <tt>aDFSOut</tt></td>
      <td valign="baseline">
        Return integer codes obtained from a Depth First Search (DFS) traversal
        of the molecular graph. A counter is maintained during the traversal
        and incremented as the atoms are traversed. The In time is the value of
        the counter when an atom is first encountered and the Out time is the
        value of the counter when the atom's descendants (in the DFS
        traversal) have all been traversed. Thus, for each atom <i>i</i>, an
        interval I<i><sub>i</sub></i> = [In<i><sub>i</sub></i>,
        Out<i><sub>i</sub></i>] is defined. Atom <i>i</i> is the ancestor of
        atom <i>j</i> only if interval I<i><sub>i</sub></i> contains interval
        I<i><sub>j</sub></i>. The DFS numbers change arbitrarily between edits
        to the molecular system. These functions can be used on arbitrarily
        nested vectors.

<pre>
in_times = aDFSIn atom_keys
out_times = aDFSOut atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aElement"></a>
<tt>aElement</tt></td>
      <td valign="baseline">
        Returns the element symbol token of each atom in the argument. This
        function can be used on arbitrarily nested vectors.

<pre>
el_tokens = aElement atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aExplicitDegree"></a>
<tt>aExplicitDegree</tt></td>
      <td valign="baseline">
        Returns the number of neighbors, including explicit hydrogens
        (excluding implicit hydrogens) but ignoring lone pairs, of each atom in
        the argument. This function applies to flat vectors only.

<pre>
bond_counts = aExplicitDegree atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aExplicitFCharge"></a>
<tt>aExplicitFCharge</tt></td>
      <td valign="baseline">
        Returns the formal charge of each atom in the argument. Implicit
        hydrogens and lone pairs are excluded from the calculations. This
        function can be used on arbitrarily nested vectors.

<pre>
charges = aExplicitFCharge atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aExplicitHCount"></a>
<tt>aExplicitHCount</tt></td>
      <td valign="baseline">
        Returns the number of explicit hydrogen atoms attached to each atom in
        the argument. This function can be used on arbitrarily nested vectors.

<pre>
h_counts = aExplicitHCount atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aFCharge"></a>
<tt>aFCharge</tt></td>
      <td valign="baseline">
        Returns the formal charge of each atom in the argument, taking into
        consideration all implicit hydrogens and lone pairs. This function can
        be used on arbitrarily nested vectors.

<pre>
charges = aFCharge atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aGeometry"></a>
<tt>aGeometry</tt></td>
      <td valign="baseline">
        Returns the geometry symbol token of each atom in the argument. The
        geometry token gives the atom's hybridization state. Legal values
        are defined in the <a class="svl" href="moe_const.htm">EL_GEOMETRIES</a> constant: <tt>'sp'</tt>,
        <tt>'sp2'</tt>, <tt>'sp3'</tt>,
        <tt>'dsp3'</tt>, <tt>'d2sp3'</tt> and
        <tt>'d3sp3'</tt>. This function can be used on arbitrarily
        nested vectors.

<pre>
geom_tokens = aGeometry atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aHCount"></a>
<tt>aHCount</tt></td>
      <td valign="baseline">
        Returns the total number of hydrogen atoms (explicit plus implicit)
        attached to each atom in the argument. This function can be used on
        arbitrarily nested vectors.

<pre>
h_counts = aHCount atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aHeavyValence"></a>
<tt>aHeavyValence</tt></td>
      <td valign="baseline">
        Returns the number of heavy atoms (non-hydrogen non-lone pair) attached
        to each atom in the argument. This function can be used on arbitrarily
        nested vectors.

<pre>
heavy_counts = aHeavyValence atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aHintLP"></a>
<tt>aHintLP</tt></td>
      <td valign="baseline">
        Returns the &quot;lone pair hint&quot; flag for each atom in the
        argument. A value of 1 indicates that the atom does not have a lone
        pair of electrons participating in a pi orbital system; a value of 0
        indicates that it does. This flag is most often used to establish
        correct bond orders on atoms iso-electronic to nitrogen. This function
        can be used on arbitrarily nested vectors.

<pre>
flags = aHintLP atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aHydrogens"></a>
<tt>aHydrogens</tt></td>
      <td valign="baseline">
        Returns the number of explicit hydrogen atoms attached to each atom in
        the argument. This function can be used on arbitrarily nested vectors.

<pre>
h_counts = aHydrogens atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aIdealVSA"></a>
<tt>aIdealVSA</tt></td>
      <td valign="baseline">
        Returns the idealized van der Waals surface area for each atom in the
        argument. Occlusions caused by neighboring atoms are subtracted, with
        ideal interatomic distances being assumed. Note that only those
        neighboring atoms specified in the argument are taken into account --
        atoms not in the argument are ignored. This function applies to flat
        vectors only.

<pre>
vdw_areas = aIdealVSA atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aIn3Ring"></a>
<a id="aIn4Ring"></a>
<a id="aIn5Ring"></a>
<a id="aIn6Ring"></a>
<a id="aIn7Ring"></a>
<a id="aIn8Ring"></a>
<tt>aIn#Ring</tt></td>
      <td valign="baseline">
        Returns a value of 1 for each atom that is in a ring of the specified
        size, 0 otherwise. For example, <tt>aIn5Ring</tt> will return 1 for
        each atom that is in a ring of size 5. This function can be used on
        arbitrarily nested vectors.

<pre>
flags = aIn3Ring atom_keys
flags = aIn4Ring atom_keys
flags = aIn5Ring atom_keys
flags = aIn6Ring atom_keys
flags = aIn7Ring atom_keys
flags = aIn8Ring atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aInHRing"></a>
<tt>aInHRing</tt></td>
      <td valign="baseline">
        Returns 1 for each atom that is in a ring satisfying the Huckel rule
        (4<i>n</i>+2 pi electrons, <i>n</i> is an integer), 0 otherwise. This
        function can be used on arbitrarily nested vectors.

<pre>
flags = aInHRing atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aInRing"></a>
<tt>aInRing</tt></td>
      <td valign="baseline">
        Returns a value of 1 for each atom that is in a ring (of any size), 0
        otherwise. This function can be used on arbitrarily nested vectors.

<pre>
flags = aInRing atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aIon"></a>
<tt>aIon</tt></td>
      <td valign="baseline">
        Returns the ionization state (integer) of each atom in the argument. A
        value of 0 indicates a neutral atom. This is not necessarily the formal
        charge although it is suggested that it be set to the formal charge
        whenever possible. This function can be used on arbitrarily nested
        vectors.

<pre>
ionizations = aIon atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aLonePairs"></a>
<tt>aLonePairs</tt></td>
      <td valign="baseline">
        Returns the number of explicit lone pair pseudo-atoms attached to each
        atom in the argument. This function can be used on arbitrarily nested
        vectors.

<pre>
lp_counts = aLonePairs atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aMoleculeNumber"></a>
<tt>aMoleculeNumber</tt></td>
      <td valign="baseline">
        Returns the connected component number of each atom in the argument
        (starting from 1). Two atoms have the same molecule number if there is
        a path through the molecular graph joining one to the other. The
        molecule numbers are arbitrary integers and can change between edits of
        the system. This function can be used on arbitrarily nested vectors.

<pre>
mol_numbers = aMoleculeNumber atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aName"></a>
<tt>aName</tt></td>
      <td valign="baseline">
        Returns the atom name token of each atom in the argument. Atom names
        can be up to four characters with no spaces. Empty names are not
        permitted. Atom names are automatically converted to uppercase. This
        function can be used on arbitrarily nested vectors.

<pre>
name_tokens = aName atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aNumber"></a>
<tt>aNumber</tt></td>
      <td valign="baseline">
        Returns the atom index in the system; this is equivalent to <tt>indexof
        [atom_keys, Atoms[]]</tt>. This function can be used on arbitrarily
        nested vectors.

<pre>
index_numbers = aNumber atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aOccupancy"></a>
<tt>aOccupancy</tt></td>
      <td valign="baseline">
        Returns the crystallographic occupancy (as provided in PDB files, for
        example) for each atom in the argument. This function can be used on
        arbitrarily nested vectors.

<pre>
occupancies = aOccupancy atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aPrioCIP"></a>
<tt>aPrioCIP</tt></td>
      <td valign="baseline">
        Returns the CIP (Cahn-Ingold-Prelog) priority number of each atom in
        the argument. This number can be used, for example, to determine R/S
        chirality. Higher values correspond to higher priorities. This function
        can be used on arbitrarily nested vectors.

<pre>
prio_numbers = aPrioCIP atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aPrioSMI"></a>
<tt>aPrioSMI</tt></td>
      <td valign="baseline">
        Returns a priority number for each atom in the argument. This number is
        computed from atomic number, heavy valence, total hydrogen count,
        formal charge and molecular connectivity, and can be used to obtain a
        unique molecule input language string representation of a molecule.
        Higher values correspond to higher priorities. This function applies to
        flat vectors only.

<pre>
prio_numbers = aPrioSMI atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aPrioZQH"></a>
<tt>aPrioZQH</tt></td>
      <td valign="baseline">
        Returns a priority number for each atom in the argument. This number is
        computed from atomic number, heavy valence, total hydrogen count and
        molecular connectivity. Higher values correspond to higher priorities.
        This function applies to flat vectors only.

<pre>
prio_numbers = aPrioZQH atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aRingBondCount"></a>
<tt>aRingBondCount</tt></td>
      <td valign="baseline">
        Returns the number of ring bonds on each atom in the argument (ring
        degree). This function can be used on arbitrarily nested vectors.

<pre>
counts = aRingBondCount atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aRotatableBonds"></a>
<tt>aRotatableBonds</tt></td>
      <td valign="baseline">
        Returns for each atom in the argument a list of the atoms bonded to it
        by rotatable bonds. This function applies to flat vectors only.

<pre>
atom_lists = aRotatableBonds atom_keys
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aTempFactor"></a>
<tt>aTempFactor</tt></td>
      <td valign="baseline">
        Returns <i>B</i>, the temperature factor (as provided in PDB files, for
        example), for each atom in the argument. This function can be used on
        arbitrarily nested vectors.

<pre>
temp_factors = aTempFactor atom_keys
</pre>
      </td>
    </tr>
  </table><!-- ENDDESC -->

<p>The following functions can be used to modify atom information:</p>

<p><b>Note:</b> All functions described below can be used on arbitrarily
  nested vectors. <!-- DESC --></p>
  <table class="titlebar">
    <tr>
      <th>Function</th>
      <th>Description</th>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aSetAniso"></a>
<tt>aSetAniso</tt></td>
      <td valign="baseline">
        Sets the anisotropic temperature factors of each given atom. The
        anisotropic temperature factors are floating point values, and should
        be provided as a laminated vector of length six (i.e.
        <tt>temp_factors</tt> has six elements, each of the same length as
        <tt>atom_keys</tt>), in the order <tt>[u11, u12, u13, u22, u23,
        u33]</tt>. Note that when TLS (translation-libration-screw) refinement
        has been employed, the <i>u</i>'s (anisotropic temperature factors)
        have a component computed from the TLS, and a <i>residual</i>
        component. This residual component is included in the temperature
        factor in the ATOM records of PDB files, and the isotropic portion of
        the TLS component is also included in the ATOM records in most cases.
        The values passed to <tt>aSetAniso</tt> are assumed to include both the
        TLS and the residual components.

<pre>
aSetAniso [atom_keys, [u11, u12, u13, u22, u23, u33]]
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aSetBackbone"></a>
<tt>aSetBackbone</tt></td>
      <td valign="baseline">
        Sets the backbone flag of each given atom. A non-zero flag value
        indicates that the atom is to be considered as being on the backbone of
        a molecule. The backbone flag is used primarily in protein and polymer
        applications.

<pre>
aSetBackbone [atom_keys, flags]
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aSetElement"></a>
<tt>aSetElement</tt></td>
      <td valign="baseline">
        Sets the element symbol token of each given atom. Note: this function
        does not adjust the number of hydrogens attached to the atoms.

<pre>
aSetElement [atom_keys, el_tokens]
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aSetGeometry"></a>
<tt>aSetGeometry</tt></td>
      <td valign="baseline">
        Sets the hybridization token of each given atom. Legal values are
        defined in the <a class="svl" href="moe_const.htm">EL_GEOMETRIES</a>
        constant: <tt>'sp'</tt>, <tt>'sp2'</tt>,
        <tt>'sp3'</tt>, <tt>'dsp3'</tt>,
        <tt>'d2sp3'</tt> and <tt>'d3sp3'</tt>. Note: this
        function does not adjust the number of hydrogens attached to the atoms.

<pre>
aSetGeometry [atom_keys, geom_tokens]
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aSetHintLP"></a>
<tt>aSetHintLP</tt></td>
      <td valign="baseline">
        Sets the &quot;lone pair hint&quot; flag of each given atom. A non-zero
        value indicates that the atom does not have a lone pair of electrons
        participating in a pi orbital system. This flag is most often used to
        establish correct bond orders on atoms iso-electronic to nitrogen.
        Note: this function does not adjust the number of hydrogens attached to
        the atoms.

<pre>
aSetHintLP [atom_keys, flags]
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aSetIon"></a>
<tt>aSetIon</tt></td>
      <td valign="baseline">
        Sets the ionization state of each given atom. A value of 0 indicates a
        neutral atom. This is not necessarily the formal charge although it is
        suggested that it be set to the formal charge whenever possible. Note:
        this function does not adjust the number of hydrogens attached to the
        atoms.

<pre>
aSetIon [atom_keys, ionizations]
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aSetName"></a>
<tt>aSetName</tt></td>
      <td valign="baseline">
        Sets the name of each given atom. Names are automatically converted to
        uppercase and blanks are stripped. The resulting name is truncated to a
        maximum of four characters.

<pre>
aSetName [atom_keys, name_tokens]
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aSetOccupancy"></a>
<tt>aSetOccupancy</tt></td>
      <td valign="baseline">
        Sets the occupancy of each given atom (floating point value between 0
        and 1).

<pre>
aSetOccupancy [atom_keys, occupancies]
</pre>
      </td>
    </tr>
    <tr>
      <td valign="baseline">
<a id="aSetTempFactor"></a>
<tt>aSetTempFactor</tt></td>
      <td valign="baseline">
        Sets the temperature factor of each given atom (floating point value).

<pre>
aSetTempFactor [atom_keys, temp_factors]
</pre>
      </td>
    </tr>
  </table><!-- ENDDESC -->

<h1>References</h1>
  <table class="ref">
    <tr>
      <td valign="baseline">[Hall&nbsp;1991]</td>
      <td valign="baseline">Hall, L.H. and Kier, L.B. The Molecular
      Connectivity Chi Indices and Kappa Shape Indices in Structure-Property
      Modeling. <i>Reviews of Computational Chemistry</i>. 2, (1991).</td>
    </tr>
    <tr>
      <td valign="baseline">[Hall&nbsp;1997]</td>
      <td valign="baseline">Hall, L.H. and Kier, L.B. The Nature of
      Structure-Activity Relationships and Their Relation to Molecular
      Connectivity. <i>Eur. J. Med. Chem. - Chimica Therapeutica</i>. 4,
      307-312, (1997).</td>
    </tr>
  </table>

<h1>See Also</h1>

<p><a class="svl" href="achain.htm">aChain</a><br />
  <a class="svl" href="achain.htm">aResidue</a></p>

<p><a href="atom_d.htm">Atom Display Functions</a><br />
  <a href="atom_p.htm">Atom Potential Functions</a></p>

<p><a href="residue.htm">Residue Functions</a><br />
  <a href="chain.htm">Chain Functions</a><br />
  <a href="obj.htm">Object Functions</a><br />
  <a href="bond.htm">Bond Functions</a></p>

<p><a href="../molsystems/molrep.htm">Representation of Molecular Systems in
  MOE</a></p>
<!-- START MOE_FOOTER -->
  <div class="MOE_FOOTER">
    <img src="../../images/ccgicon.png" /> <a href="../../index.htm"></a>
    <a href="../../legal.htm"></a> &copy;<span class="versionyear"></span>
    <a href="http://www.chemcomp.com"></a>. All rights reserved.<br />
    <a href="mailto:info@chemcomp.com"></a>
  </div><!-- END MOE_FOOTER -->
</div>
</div>
</body>
</html>

